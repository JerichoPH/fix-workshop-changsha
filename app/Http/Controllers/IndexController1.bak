<?php

namespace App\Http\Controllers;

use App\Facades\Code;
use App\Model\Account;
use App\Model\EntireInstance;
use App\Model\FixWorkflow;
use App\Model\Maintain;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Jericho\FileSystem;
use Jericho\HttpResponseHelper;
use Jericho\TextHelper;

class IndexController extends Controller
{
    private $_qualityDir = '';
    private $_deviceDir = '';

    public function __construct()
    {
        $this->_qualityDir = 'app/quality/breakdownDevice';
        $this->_deviceDir = 'app/basicInfo/deviceTotal';
    }

    /**
     * 获取主页缓存数据
     * @return \Illuminate\Http\JsonResponse
     */
    final public function getReportData()
    {
        try {
            $currentYear = date('Y');
            /**
             * 动态统计
             * @return false|string
             */
            $deviceDynamicAsStatus = function () use ($currentYear): array {
                $fileDir = storage_path("app/basicInfo/deviceTotal/{$currentYear}/devicesAsKind.json");
                $statuses = ['INSTALLED' => '上道', 'INSTALLING' => '备品', 'FIXING' => '在修', 'RETURN_FACTORY' => '返厂', 'FIXED' => '成品'];
                if (!is_file($fileDir)) return [[], $statuses];

                return ['statistics' => json_decode(file_get_contents($fileDir), true), 'statuses' => $statuses];
            };

            /**
             * 出入所统计
             * @return array
             */
            $warehouseReport = function () {
                $dateList = [];

                for ($i = 6; $i >= 0; $i--) {
                    $time = Carbon::today()->subDay($i);
                    $time = $time->format('Y-m-d');
                    $dateList[] = $time;  # 当前时间标记
                }

                $originTime = array_first($dateList) . ' 00:00:00';
                $finishTime = array_last($dateList) . ' 23:59:59';

                $statistics = DB::table('warehouse_report_entire_instances as wrei')
                    ->selectRaw("count(c.name) as t,c.name as c,wr.direction as d,DATE_FORMAT(wr.created_at, '%Y-%m-%d') as time")
                    ->join(DB::raw('entire_instances ei'), 'ei.identity_code', '=', 'wrei.entire_instance_identity_code')
                    ->join(DB::raw('categories c'), 'c.unique_code', '=', 'ei.category_unique_code')
                    ->join(DB::raw('warehouse_reports wr'), 'wr.serial_number', '=', 'wrei.warehouse_report_serial_number')
                    ->whereBetween('wr.updated_at', [$originTime, $finishTime])
                    ->groupBy(DB::raw('c,d,time'))
                    ->get();
                $statistics2 = $statistics->groupBy('time')->all();

                # 空数据
                $statisticsForWarehouse = [];
                foreach ($dateList as $date) {
                    $statisticsForWarehouse["转辙机(入所)"][$date] = 0;
                    $statisticsForWarehouse["转辙机(出所)"][$date] = 0;
                    $statisticsForWarehouse["继电器(入所)"][$date] = 0;
                    $statisticsForWarehouse["继电器(出所)"][$date] = 0;
                    $statisticsForWarehouse["综合(入所)"][$date] = 0;
                    $statisticsForWarehouse["综合(出所)"][$date] = 0;
                }

                foreach ($dateList as $date) {
                    if (!array_key_exists($date, $statistics2)) continue;
                    foreach ($statistics2[$date] as $val) {
                        if ($val) {
                            if ($val->c == '转辙机' || $val->c == '继电器') {
                                if ($val->d == 'IN') {
                                    $statisticsForWarehouse["{$val->c}(入所)"][$val->time] += $val->t;
                                } else {
                                    $statisticsForWarehouse["{$val->c}(出所)"][$val->time] = $val->t;
                                }
                            } else {
                                if ($val->d == 'IN') {
                                    $statisticsForWarehouse["综合(入所)"][$val->time] = $val->t;
                                } else {
                                    $statisticsForWarehouse["综合(出所)"][$val->time] = $val->t;
                                }
                            }
                        }
                    }
                }

                return ['dateList' => $dateList, 'statistics' => $statisticsForWarehouse];
            };

            /**
             * 资产管理
             * @return array
             */
            $property = function () use ($currentYear): array {
                $fileDir = storage_path('app/property');
                if (!is_dir($fileDir)) return [];

                $propertyDevicesAsKind = json_decode(file_get_contents("{$fileDir}/{$currentYear}/devicesAsKindWithFirstLevel.json"), true);

                return ['propertyDevicesAsKind' => $propertyDevicesAsKind];
            };

            /**
             * 质量报告
             * @return array
             * @throws \Exception
             */
            $quality = function (): array {
                $file = FileSystem::init(__FILE__);
                $qualityDateType = request('dateType', 'year');
                $qualityYears = $file->setPath(storage_path($this->_qualityDir))->join("yearList.json")->fromJson();
                $qualityMonths = $file->setPath(storage_path($this->_qualityDir))->join("dateList.json")->fromJson();
                if ($qualityDateType == 'year') {
                    $year = $qualityDate = request("date", date('Y'));
                    $qualityDir = storage_path($this->_qualityDir . "/{$year}");
                    $deviceDir = storage_path($this->_deviceDir . "/{$year}");
                } else {
                    list($year, $month) = explode('-', request('date', date('Y-m')));
                    $qualityDir = storage_path($this->_qualityDir . "/{$year}/{$year}-{$month}");
                    $deviceDir = storage_path($this->_deviceDir . "/{$year}/{$year}-{$month}");
                }
                $qualities = $file->setPath($qualityDir)->join('factory.json')->fromJson();
                $qualityDevices = $file->setPath($deviceDir)->join('devicesAsFactory.json')->fromJson();
                return [
                    'qualities' => $qualities,
                    'qualityDevices' => $qualityDevices,
                    'qualityDate' => request('date', date('Y-m')),
                    'qualityYears' => $qualityYears,
                    'qualityMonths' => $qualityMonths,
                ];
            };

            /**
             * 超期使用
             * @return array
             */
            $scraped = function () use ($currentYear): array {
                $scrapedDevicesAsKind = json_decode(file_get_contents(storage_path("app/scraped/scrapedDevicesAsKind.json")), true);
                return ['scrapedDevicesAsKind' => $scrapedDevicesAsKind];
            };

            /**
             * 台账
             * @return array
             */
            $maintain = function () {
                $fileDir = storage_path('app/maintain/' . request('sceneWorkshopUniqueCode') . 'WithFirstLevel.json');
                if (!is_file($fileDir)) return [];
                return ['maintain' => json_decode(file_get_contents($fileDir))];
            };

            /**
             * 周期修
             * @return array|array[]
             */
            $cycleFix = function () {
                $rootDir = storage_path('app/cycleFix');
                switch (request('dateType')) {
                    default:
                    case 'year':
                        $cycleFixDate = request('date', date('Y'));
                        $fileDir = "{$rootDir}/{$cycleFixDate}/statistics.json";
                        if (!is_file("{$rootDir}/yearList.json")) return [[], []];
                        if (!is_file($fileDir)) return [[], []];
                        $timeList = json_decode(file_get_contents("{$rootDir}/yearList.json"), true);
                        # 获取任务内容
                        $originAt = Carbon::create($cycleFixDate, 1, 1)->firstOfYear()->format('Y-m-d');
                        $finishAt = Carbon::create($cycleFixDate, 1, 1)->endOfYear()->format('Y-m-d');
                        $missions = [];
                        foreach (DB::select("
select sum(rbcfmr.number)                as aggregate,
       rbcfmr.category_unique_code                as cu,
       rbcfmr.category_name                       as cn
from repair_base_cycle_fix_mission_records as rbcfmr
where rbcfmr.completing_at between ? and ?
group by rbcfmr.category_unique_code, rbcfmr.category_name", [$originAt, $finishAt]) as $item) {
                            $missions[$item->cu] = $item;
                        }
                        break;
                    case 'month':
                        $time = Carbon::createFromFormat('Y-m', request('date', date('Y-m')));
                        $year = $time->year;
                        $cycleFixDate = $time->format('Y-m');
                        $fileDir = "{$rootDir}/{$year}/{$cycleFixDate}/statistics.json";
                        if (!is_file("{$rootDir}/yearList.json")) return [[], []];
                        if (!is_file($fileDir)) return [[], []];
                        # 获取任务内容
                        $originAt = Carbon::createFromFormat('Y-m-d', "{$cycleFixDate}-01")->firstOfMonth()->format('Y-m-d');
                        $finishAt = Carbon::createFromFormat('Y-m-d', "{$cycleFixDate}-01")->endOfMonth()->format('Y-m-d');
                        $missions = [];
                        foreach (DB::select("
select sum(rbcfmr.number)                as aggregate,
       rbcfmr.category_unique_code                as cu,
       rbcfmr.category_name                       as cn
from repair_base_cycle_fix_mission_records as rbcfmr
where rbcfmr.completing_at between ? and ?
group by rbcfmr.category_unique_code, rbcfmr.category_name", [$originAt, $finishAt]) as $item) {
                            $missions[$item->cu] = $item;
                        }
                        break;
                }
                $cycleFixYears = json_decode(file_get_contents("{$rootDir}/yearList.json"), true);
                $cycleFixMonths = json_decode(file_get_contents("{$rootDir}/dateList.json"), true);
                $statistics = json_decode(file_get_contents($fileDir), true);
                return [
                    'cycleFixYears' => $cycleFixYears,
                    'cycleFixMonths' => $cycleFixMonths,
                    'cycleFixDate' => $cycleFixDate,
                    'statistics' => $statistics,
                    'missions' => $missions,
                ];
            };

            $func = request('type');
            return response()->json(['message' => '读取成功', 'data' => $$func()]);
        } catch (\Exception $e) {
            return response()->json(['message' => '意外错误', 'details' => [get_class($e), $e->getMessage(), $e->getFile(), $e->getLine()]], 500);
        }
    }

    /**
     * Display a listing of the resource.
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Foundation\Application|\Illuminate\View\View
     * @throws \Exception
     */
    final public function index()
    {
        $currentYear = date('Y');

        /**
         * 获取左侧快捷按钮的统计
         * @return array
         */
        $shortcutButtonsStatistics = function () {
            $shortcutButtonsStatisticsCurrentMonthFirst = Carbon::now()->firstOfMonth()->toDateString();
            $shortcutButtonsStatisticsCurrentMonthEndless = Carbon::now()->lastOfMonth()->toDateString();
            $shortcutButtonsStatistics = [
                'search' => '',
                # 当月检修比例
                'fixWorkflow' => [
                    'total' => $totalFixWorkflow = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->count()),
                    'completed' => $completedFixWorkflow = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('status', 'FIXED')->count()),
                    'proportion' => $completedFixWorkflow > 0 ? $totalFixWorkflow !== $completedFixWorkflow ? intval(round(floatval($completedFixWorkflow / $totalFixWorkflow), 2) * 100) : 100 : 0,
                ],
                # 当月新设备
                'new' => [
                    'total' => $totalEntireInstance = EntireInstance::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->count(),
                ],
                # 当月周期修
                'fixCycle' => [
                    'total' => $totalFixCycle = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('is_cycle', true)->count()),
                    'completed' => $completedFixCycle = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('status', 'FIXED')->where('is_cycle', true)->count()),
                    'proportion' => $completedFixCycle > 0 ? $totalFixCycle !== $completedFixCycle ? intval(round(floatval($completedFixCycle / $totalFixCycle), 2) * 100) : 100 : 0,
                ],
                # 当月质量报告
                'quality' => [],
                # 当月验收
                'check' => [
                    'fixed' => $totalCheck = FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('type', 'FIX')->where('status', 'FIXED')->count(),
                    'checked' => $completedCheck = FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('type', 'CHECK')->where('status', 'FIXED')->count(),
                ]
            ];
            return $shortcutButtonsStatistics;
        };
        $shortcutButtonsStatistics = $shortcutButtonsStatistics();
        if ($shortcutButtonsStatistics['check']['checked'] > 0) {
            if ($shortcutButtonsStatistics['check']['fixed'] != $shortcutButtonsStatistics['check']['checked']) {
                $shortcutButtonsStatistics['check']['proportion'] = intval(round(intval(intval($shortcutButtonsStatistics['check']['fixed']) / $shortcutButtonsStatistics['check']['checked']), 2));
            } else {
                $shortcutButtonsStatistics['check']['proportion'] = 100;
            }
        } else {
            $shortcutButtonsStatistics['check']['proportion'] = 0;
        }

//        /**
//         * 周期修
//         * @return array
//         */
//        $cycleFix = function () {
//            $root_dir = storage_path("app/周期修");
//            $file = FileSystem::init(__FILE__);
//            $year = request("cycleFixYear", date("Y"));
//            $categories = $file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson();
//
//            if (request("cycleFixDateType", "year") == "year") {
//                $cycle_fix_date_list = $file->setPath($root_dir)->join("yearList.json")->fromJson();
//                $month = date("m");
//
//                $missions = $file->setPath($root_dir)->joins([$year, "列-任务-种类.json"])->fromJson();
//                $plans = $file->setPath($root_dir)->joins([$year, "列-计划.json"])->fromJson();
//                $plans2 = [];
//                foreach ($plans as $category_name => $plan) $plans2[$category_name] = $plan["count"];
//                $reals = $file->setPath($root_dir)->joins([$year, "列-实际-种类.json"])->fromJson();
//            } else {
//                $cycle_fix_date_list = $file->setPath($root_dir)->join("dateList.json")->fromJson();
//                list($year, $month) = explode("-", request("cycleFixDate", date("Y-m")));
//
//                $missions = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "任务-种类.json"])->fromJson();
//                $plans = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "计划.json"])->fromJson();
//                $plans2 = [];
//                foreach ($plans as $category_name => $plan) $plans2[$category_name] = $plan["count"];
//                $reals = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "实际-种类.json"])->fromJson();
//            }
//
//            foreach ($categories as $category_unique_code => $category_name)
//                if ($missions[$category_name] == 0 && $plans2[$category_name] == 0 && $reals[$category_name] == 0)
//                    unset($missions[$category_name], $plans2[$category_name], $reals[$category_name], $categories[$category_unique_code]);
//
//
//            return [
//                array_flip($categories),
//                $missions,
//                $plans2,
//                $reals,
//                $year,
//                "{$year}-{$month}",
//                request("cycleFixDateType", "year"),
//                $cycle_fix_date_list,
//            ];
//        };
//        list(
//            $cycle_fix_categories,
//            $cycle_fix_missions,
//            $cycle_fix_plans,
//            $cycle_fix_reals,
//            $cycle_fix_year,
//            $cycle_fix_month,
//            $cycle_fix_date_type,
//            $cycle_fix_date_list
//            ) = $cycleFix();

        /**
         * 一次过检 ❌
         * @return array
         */
        $ripe = function (): array {
            $file = FileSystem::init(__FILE__);
            $root_dir = storage_path("app/一次过检");

            if (request("ripeDateType", "year") == "year") {
                $ripe_date_list = $file->setPath($root_dir)->join("yearList.json")->fromJson();
                $year = request("ripeYear", date("Y"));
                $month = date("m");

                # 加载年度数据
                $statistics = $file->setPath($root_dir)->joins([$year, "年-种类.json"])->fromJson();
            } else {
                $ripe_date_list = $file->setPath($root_dir)->join("dateList.json")->fromJson();
                list($year, $month) = explode("-", request("ripeDate", date("Y-m")));

                # 加载月度数据
                $statistics = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "月-种类.json"])->fromJson();
            }
            $categories = array_flip($file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson());

            return [
                $statistics,
                $year,
                "{$year}-{$month}",
                request("ripeDateType", "year"),
                $ripe_date_list,
                $categories,
            ];
        };
        list($ripe_statistics, $ripe_year, $ripe_month, $ripe_date_type, $ripe_date_list, $ripe_categories) = $ripe();

        # 现场车间列表
        $sceneWorkshops = json_decode(file_get_contents(storage_path('app/basicInfo/stations.json')), true);
        foreach ($sceneWorkshops as $su => $item) {
            if (DB::table('maintains')->where('name', $item['name'])->value('is_show')) {
                $sceneWorkshops2[$su] = $item['name'];
            }
        }
        return view('Index.index', [
            'shortcutButtonsStatistics' => $shortcutButtonsStatistics,
//            'cycleFixCategories' => TextHelper::toJson($cycle_fix_categories),
//            'cycleFixMissions' => TextHelper::toJson(array_values($cycle_fix_missions)),
//            'cycleFixPlans' => TextHelper::toJson(array_values($cycle_fix_plans)),
//            'cycleFixReals' => TextHelper::toJson(array_values($cycle_fix_reals)),
//            'cycleFixYear' => $cycle_fix_year,
//            'cycleFixMonth' => $cycle_fix_month,
//            'cycleFixDateType' => $cycle_fix_date_type,
//            'cycleFixDateList' => $cycle_fix_date_list,
            'ripeStatistics' => TextHelper::toJson($ripe_statistics),
            'ripeYear' => $ripe_year,
            'ripeMonth' => $ripe_month,
            'ripeDateType' => $ripe_date_type,
            'ripeDateList' => $ripe_date_list,
            'ripeCategoriesAsJson' => TextHelper::toJson($ripe_categories),
            'sceneWorkshops' => $sceneWorkshops2,
            'sceneWorkshopsAsJson' => json_encode($sceneWorkshops2),
        ]);
    }

    /**
     * TODO:: BAK
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Foundation\Application|\Illuminate\View\View
     * @throws \Exception
     */
    final public function index_bak()
    {
        /**
         * 获取左侧快捷按钮的统计
         * @return array
         */
        $shortcutButtonsStatistics = function () {
            $shortcutButtonsStatisticsCurrentMonthFirst = Carbon::now()->firstOfMonth()->toDateString();
            $shortcutButtonsStatisticsCurrentMonthEndless = Carbon::now()->lastOfMonth()->toDateString();
            $shortcutButtonsStatistics = [
                'search' => '',
                # 当月检修比例
                'fixWorkflow' => [
                    'total' => $totalFixWorkflow = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->count()),
                    'completed' => $completedFixWorkflow = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('status', 'FIXED')->count()),
                    'proportion' => $completedFixWorkflow > 0 ? $totalFixWorkflow !== $completedFixWorkflow ? intval(round(floatval($completedFixWorkflow / $totalFixWorkflow), 2) * 100) : 100 : 0,
                ],
                # 当月新设备
                'new' => [
                    'total' => $totalEntireInstance = EntireInstance::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->count(),
                ],
                # 当月周期修
                'fixCycle' => [
                    'total' => $totalFixCycle = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('is_cycle', true)->count()),
                    'completed' => $completedFixCycle = intval(FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('status', 'FIXED')->where('is_cycle', true)->count()),
                    'proportion' => $completedFixCycle > 0 ? $totalFixCycle !== $completedFixCycle ? intval(round(floatval($completedFixCycle / $totalFixCycle), 2) * 100) : 100 : 0,
                ],
                # 当月质量报告
                'quality' => [],
                # 当月验收
                'check' => [
                    'fixed' => $totalCheck = FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('type', 'FIX')->where('status', 'FIXED')->count(),
                    'checked' => $completedCheck = FixWorkflow::whereBetween('created_at', [$shortcutButtonsStatisticsCurrentMonthFirst, $shortcutButtonsStatisticsCurrentMonthEndless])->where('type', 'CHECK')->where('status', 'FIXED')->count(),
                ]
            ];
            return $shortcutButtonsStatistics;
        };
        $shortcutButtonsStatistics = $shortcutButtonsStatistics();
        if ($shortcutButtonsStatistics['check']['checked'] > 0) {
            if ($shortcutButtonsStatistics['check']['fixed'] != $shortcutButtonsStatistics['check']['checked']) {
                $shortcutButtonsStatistics['check']['proportion'] = intval(round(intval(intval($shortcutButtonsStatistics['check']['fixed']) / $shortcutButtonsStatistics['check']['checked']), 2));
            } else {
                $shortcutButtonsStatistics['check']['proportion'] = 100;
            }
        } else {
            $shortcutButtonsStatistics['check']['proportion'] = 0;
        }

        /**
         * 动态统计
         * @return false|string
         */
        $deviceDynamicStatus = function (): array {
            $getBuilder = function () {
                return DB::table('entire_instances')
                    ->where('deleted_at', null)
                    ->when(request('categoryUniqueCode'), function ($query) {
                        if (request('categoryUniqueCode') == 'ALL') return $query;
                        return $query->where('category_unique_code', request('categoryUniqueCode'));
                    });
            };

            $using = $getBuilder()->where("status", 'INSTALLED')->count("id");
            $standby = $getBuilder()->where('status', 'INSTALLING')->count('id');
            $fixed = $getBuilder()->where("status", "FIXED")->count("id");
            $returnFactory = $getBuilder()->where("status", "RETURN_FACTORY")->count("id");
            $fixing = $getBuilder()->whereIn("status", ["FIXING", "FACTORY_RETURN", "BUY_IN"])->count("id");
            $total = $getBuilder()->where("status", "<>", "SCRAP")->count("id");
            return [
                $total,
                [
                    ["name" => "上道", "value" => $using],
                    ['name' => '备品', 'value' => $standby],
                    ["name" => "在修", "value" => $fixing],
                    ["name" => "送修", "value" => $returnFactory],
                    ["name" => "成品", "value" => $fixed]
                ]
            ];
        };
        $deviceDynamicStatus = $deviceDynamicStatus();

        /**
         * 资产管理
         * @return array
         */
        $property = function () {
            $fileDir = storage_path('app/资产管理');

            if (!is_dir($fileDir)) return [[], [], [], []];

            $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $withFactory = TextHelper::parseJson(file_get_contents("{$fileDir}/统计-供应商.json"));
            $categoryNames = collect($categories)->values()->toArray();
            $factoryNames = collect($withFactory)->keys()->toArray();

            $tmp = [];
            foreach ($withFactory as $factoryName => $statistics) {
                foreach ($categoryNames as $categoryName) $tmp[$factoryName][] = key_exists($categoryName, $statistics) ? $statistics[$categoryName] : 0;
            }

            return [$categories, $tmp, $categoryNames, $factoryNames];
        };
        list($propertyCategories, $propertyWithFactory, $propertyCategoryNames, $propertyFactoryNames) = $property();

        /**
         * 周期修
         * @return array
         */
        $cycleFix = function () {
            $root_dir = storage_path("app/周期修");
            $file = FileSystem::init(__FILE__);
            $year = request("cycleFixYear", date("Y"));
            $categories = $file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson();

            if (request("cycleFixDateType", "year") == "year") {
                $cycle_fix_date_list = $file->setPath($root_dir)->join("yearList.json")->fromJson();
                $month = date("m");

                $missions = $file->setPath($root_dir)->joins([$year, "列-任务-种类.json"])->fromJson();
                $plans = $file->setPath($root_dir)->joins([$year, "列-计划.json"])->fromJson();
                $plans2 = [];
                foreach ($plans as $category_name => $plan) $plans2[$category_name] = $plan["count"];
                $reals = $file->setPath($root_dir)->joins([$year, "列-实际-种类.json"])->fromJson();
            } else {
                $cycle_fix_date_list = $file->setPath($root_dir)->join("dateList.json")->fromJson();
                list($year, $month) = explode("-", request("cycleFixDate", date("Y-m")));

                $missions = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "任务-种类.json"])->fromJson();
                $plans = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "计划.json"])->fromJson();
                $plans2 = [];
                foreach ($plans as $category_name => $plan) $plans2[$category_name] = $plan["count"];
                $reals = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "实际-种类.json"])->fromJson();
            }

            foreach ($categories as $category_unique_code => $category_name)
                if ($missions[$category_name] == 0 && $plans2[$category_name] == 0 && $reals[$category_name] == 0)
                    unset($missions[$category_name], $plans2[$category_name], $reals[$category_name], $categories[$category_unique_code]);


            return [
                array_flip($categories),
                $missions,
                $plans2,
                $reals,
                $year,
                "{$year}-{$month}",
                request("cycleFixDateType", "year"),
                $cycle_fix_date_list,
            ];
        };
        list($cycle_fix_categories, $cycle_fix_missions, $cycle_fix_plans, $cycle_fix_reals, $cycle_fix_year, $cycle_fix_month, $cycle_fix_date_type, $cycle_fix_date_list) = $cycleFix();

        /**
         * 质量报告
         * @return array
         */
        $quality = function (): array {
            $file = FileSystem::init(__FILE__);
            $root_dir = storage_path("app/质量报告");
            $statistics = [];

            if (request("qualityDateType", "year") == "year") {
                $quality_date_list = $file->setPath($root_dir)->join("yearList.json")->fromJson();
                $year = request("qualityYear", date("Y"));
                $month = date("m");

                # 加载当月设备数
                $devices = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "设备数-供应商-种类.json"])->fromJson();
                foreach ($devices as $factory_name => $device) {
                    if ($factory_name !== "count") {
                        if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = ["设备" => 0, "检修" => 0];
                        $statistics[$factory_name]["设备"] = $device["count"];
                    }
                }

                # 统计从一月开始到当月的检修数
                for ($i = 1; $i <= intval($month); $i++) {
                    $I = str_pad(strval($i), 2, '0', STR_PAD_LEFT);
                    $fixeds = $file->setPath($root_dir)->joins([$year, "{$year}-{$I}", "检修数.json"])->fromJson();
                    foreach ($fixeds as $factory_name => $fixed) {
                        if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = ["设备" => 0, "检修" => 0];
                        $statistics[$factory_name] ["检修"] += $fixed["count"];
                    }
                }
            } else {
                $quality_date_list = $file->setPath($root_dir)->join("dateList.json")->fromJson();
                list($year, $month) = explode("-", request("qualityDate", date("Y-m")));

                # 加载当月设备数
                $devices = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "设备数-供应商-种类.json"])->fromJson();
                foreach ($devices as $factory_name => $device) {
                    if ($factory_name !== "count") {
                        if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = ["设备" => 0, "检修" => 0];
                        $statistics[$factory_name]["设备"] = $device["count"];
                    }
                }

                # 加载当月检修数
                $fixeds = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "检修数.json"])->fromJson();
                foreach ($fixeds as $factory_name => $fixed) {
                    if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = ["设备" => 0, "检修" => 0];
                    $statistics[$factory_name] ["检修"] = $fixed["count"];
                }
            }

            return [
                $statistics,
                $year,
                "{$year}-{$month}",
                request("qualityDateType", "year"),
                $quality_date_list,
            ];
        };
        list($quality_statistics, $quality_year, $quality_month, $quality_date_type, $quality_date_list) = $quality();

        /**
         * 一次过检
         * @return array
         */
        $ripe = function (): array {
            $file = FileSystem::init(__FILE__);
            $root_dir = storage_path("app/一次过检");

            if (request("ripeDateType", "year") == "year") {
                $ripe_date_list = $file->setPath($root_dir)->join("yearList.json")->fromJson();
                $year = request("ripeYear", date("Y"));
                $month = date("m");

                # 加载年度数据
                $statistics = $file->setPath($root_dir)->joins([$year, "年-种类.json"])->fromJson();
            } else {
                $ripe_date_list = $file->setPath($root_dir)->join("dateList.json")->fromJson();
                list($year, $month) = explode("-", request("ripeDate", date("Y-m")));

                # 加载月度数据
                $statistics = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "月-种类.json"])->fromJson();
            }
            $categories = array_flip($file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson());

            return [
                $statistics,
                $year,
                "{$year}-{$month}",
                request("ripeDateType", "year"),
                $ripe_date_list,
                $categories,
            ];
        };
        list($ripe_statistics, $ripe_year, $ripe_month, $ripe_date_type, $ripe_date_list, $ripe_categories) = $ripe();

        /**
         * 出入所统计
         * @return array
         */
        $warehouse_report = function () {
            $date_list = [];

            for ($i = 6; $i >= 0; $i--) {
                $time = Carbon::today()->subDay($i);
//                if ($time->dayOfWeek == 0 || $time->dayOfWeek == 6) continue;
                $time = $time->format('Y-m-d');
                $date_list[] = $time;  # 当前时间标记
            }

            $origin_time = array_first($date_list) . ' 00:00:00';
            $finish_time = array_last($date_list) . ' 23:59:59';

            $statistics = DB::table('warehouse_report_entire_instances as wrei')
                ->selectRaw("count(c.name) as t,c.name as c,wr.direction as d,DATE_FORMAT(wr.created_at, '%Y-%m-%d') as time")
                ->join(DB::raw('entire_instances ei'), 'ei.identity_code', '=', 'wrei.entire_instance_identity_code')
                ->join(DB::raw('categories c'), 'c.unique_code', '=', 'ei.category_unique_code')
                ->join(DB::raw('warehouse_reports wr'), 'wr.serial_number', '=', 'wrei.warehouse_report_serial_number')
                ->whereBetween('wr.updated_at', [$origin_time, $finish_time])
                ->groupBy(DB::raw('c,d,time'))
                ->get();
            $statistics2 = $statistics->groupBy('time')->all();

            # 空数据
            $statistics_for_warehouse = [];
            foreach ($date_list as $date) {
                $statistics_for_warehouse["转辙机(入所)"][$date] = 0;
                $statistics_for_warehouse["转辙机(出所)"][$date] = 0;
                $statistics_for_warehouse["继电器(入所)"][$date] = 0;
                $statistics_for_warehouse["继电器(出所)"][$date] = 0;
                $statistics_for_warehouse["综合(入所)"][$date] = 0;
                $statistics_for_warehouse["综合(出所)"][$date] = 0;
            }

            foreach ($date_list as $date) {
                if (!array_key_exists($date, $statistics2)) continue;
                foreach ($statistics2[$date] as $val) {
                    if ($val) {
                        if ($val->c == '转辙机' || $val->c == '继电器') {
                            if ($val->d == 'IN') {
                                $statistics_for_warehouse["{$val->c}(入所)"][$val->time] += $val->t;
                            } else {
                                $statistics_for_warehouse["{$val->c}(出所)"][$val->time] = $val->t;
                            }
                        } else {
                            if ($val->d == 'IN') {
                                $statistics_for_warehouse["综合(入所)"][$val->time] = $val->t;
                            } else {
                                $statistics_for_warehouse["综合(出所)"][$val->time] = $val->t;
                            }
                        }
                    }
                }
            }

            return [$date_list, $statistics_for_warehouse];
        };
        list($warehouse_statistics_date_list, $warehouse_statistics) = $warehouse_report();

        /**
         * 超期使用
         */
        $scraped = function (): array {
            $categories = collect(TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/种类.json'))));
            $scrapedWithCategory = json_encode(json_decode(file_get_contents(storage_path('app/超期使用/统计-种类.json')), true));
            return [$categories->flip()->toJson(), $categories->values()->toJson(), $scrapedWithCategory];
        };
        list($scrapedCategories, $scrapedCategoryNames, $scrapedWithCategory) = $scraped();

        /**
         * 台账
         * @return array
         */
        $maintainStatistics = function () {
            $fileDir = storage_path("app/台账");

            $maintainWithSceneWorkshop = TextHelper::parseJson(file_get_contents("{$fileDir}/状态统计-现场车间.json"));
            $sceneWorkshops = TextHelper::parseJson(file_get_contents("{$fileDir}/现场车间.json"));
            $stations = TextHelper::parseJson(file_get_contents("{$fileDir}/车站.json"));
            $stationNames = collect($stations)->values()->toJson();

            return [
                $maintainWithSceneWorkshop,
                $sceneWorkshops,
                $stations,
                $stationNames,
            ];
        };
        list($maintainWithSceneWorkshop, $sceneWorkshops, $stations, $stationNames) = $maintainStatistics();

        # 更新设备位置
        # 该检修车间下的现场车间
        $currentMaintains = Maintain::with('Subs')
            ->where('parent_unique_code', env('ORGANIZATION_CODE'))
            ->where('type', 'SCENE_WORKSHOP')
            ->get();
        if (env('SUPURUI_API', 0) == 1) {
            $supuruiConnectionName = env('SUPURUI_DB', 'gcdb');
            $updateSuPuRuiLocationCode = function () use ($supuruiConnectionName) {
                # 获取需要更新的设备编号和位置
                $needUpdateMaintainInstances = DB::table('entire_instances')
                    ->where('deleted_at', null)
                    ->whereIn('status', ['INSTALLING', 'INSTALLED'])
                    ->get(['identity_code', 'maintain_location_code']);

                # 获取新的位置
                if ($needUpdateMaintainInstances) {
                    foreach ($needUpdateMaintainInstances as $needUpdateMaintainInstance) {
                        $needUpdateMaintainInstance = (array)$needUpdateMaintainInstance;
                        switch (substr($needUpdateMaintainInstance['identity_code'], 0, 1)) {
                            case 'S':
                                # 查找在用设备（S状态：0）
                                $supurui = DB::connection($supuruiConnectionName)
                                    ->table('s_equipment')
                                    ->where('status', 0)
                                    ->where('SysId', $needUpdateMaintainInstance['identity_code'])
                                    ->where('PositionId', '<>', $needUpdateMaintainInstance['maintain_location_code'])
                                    ->first(['PositionId', 'status']);
                                if ($supurui) $supurui = (array)$supurui;
                                if ($supurui) DB::table('entire_instances')
                                    ->where('identity_code', $needUpdateMaintainInstance['identity_code'])
                                    ->update([
                                        'status' => 'INSTALLED',
                                        'maintain_location_code' => $supurui['PositionId'],
                                        'scene_workshop_status' => $supurui['status']
                                    ]);
                                break;
                            case 'Q':
                                # 查找在用设备（Q状态：0）
                                $supurui = DB::connection($supuruiConnectionName)
                                    ->table('q_device')
                                    ->where('status', 0)
                                    ->where('SysId', $needUpdateMaintainInstance['identity_code'])
                                    ->where('PositionId', '<>', $needUpdateMaintainInstance['maintain_location_code'])
                                    ->first(['PositionId', 'status']);
                                if ($supurui) {
                                    DB::table('entire_instances')
                                        ->where('identity_code', $needUpdateMaintainInstance['identity_code'])
                                        ->update([
                                            'status' => 'INSTALLED',
                                            'maintain_location_code' => $supurui->PositionId,
                                            'scene_workshop_status' => $supurui->status
                                        ]);
                                }
                                break;
                        }

                        # 查找停用和备用设备（S）
                        $supurui = DB::connection($supuruiConnectionName)
                            ->table('s_equipment')
                            ->whereIn('status', [1, 2])
                            ->pluck('status', 'SysId');
                        foreach ($supurui as $SysId => $status) {
                            DB::table('entire_instances')
                                ->where('identity_code', $SysId)
                                ->update([
                                    'status' => 'INSTALLING',
                                    'maintain_location_code' => null,
                                    'scene_workshop_status' => $status
                                ]);
                        }

                        # 查找停用和备用设备（Q）
                        $supurui = DB::connection($supuruiConnectionName)
                            ->table('q_device')
                            ->whereIn('status', [1, 2])
                            ->pluck('status', 'SysId');
                        foreach ($supurui as $SysId => $status) {
                            DB::table('entire_instances')
                                ->where('identity_code', $SysId)
                                ->update([
                                    'status' => 'INSTALLING',
                                    'maintain_location_code' => null,
                                    'scene_workshop_status' => $status
                                ]);
                        }
                    }
                }
            };
            $updateSuPuRuiLocationCode();
        }

        return view('Index.index', [
            'shortcutButtonsStatistics' => $shortcutButtonsStatistics,
            'deviceDynamicStatus' => TextHelper::toJson($deviceDynamicStatus),
            'cycleFixCategories' => TextHelper::toJson($cycle_fix_categories),
            'cycleFixMissions' => TextHelper::toJson(array_values($cycle_fix_missions)),
            'cycleFixPlans' => TextHelper::toJson(array_values($cycle_fix_plans)),
            'cycleFixReals' => TextHelper::toJson(array_values($cycle_fix_reals)),
            'cycleFixYear' => $cycle_fix_year,
            'cycleFixMonth' => $cycle_fix_month,
            'cycleFixDateType' => $cycle_fix_date_type,
            'cycleFixDateList' => $cycle_fix_date_list,
            'ripeStatistics' => TextHelper::toJson($ripe_statistics),
            'ripeYear' => $ripe_year,
            'ripeMonth' => $ripe_month,
            'ripeDateType' => $ripe_date_type,
            'ripeDateList' => $ripe_date_list,
            'ripeCategoriesAsJson' => TextHelper::toJson($ripe_categories),
            'qualityStatistics' => TextHelper::toJson($quality_statistics),
            'qualityYear' => $quality_year,
            'qualityMonth' => $quality_month,
            'qualityDateType' => $quality_date_type,
            'qualityDateList' => $quality_date_list,
            'currentMaintains' => $currentMaintains,
            'maintainWithSceneWorkshop' => TextHelper::toJson($maintainWithSceneWorkshop),
            'sceneWorkshops' => array_flip($sceneWorkshops),
            'stations' => TextHelper::toJson(array_flip($stations)),
            'stationNames' => TextHelper::toJson($stationNames),
            'scrapedCategories' => $scrapedCategories,
            'scrapedCategoryNames' => $scrapedCategoryNames,
            'scrapedWithCategory' => $scrapedWithCategory,
            'propertyCategories' => TextHelper::toJson($propertyCategories),
            'propertyWithFactory' => TextHelper::toJson($propertyWithFactory),
            'propertyCategoryNames' => TextHelper::toJson($propertyCategoryNames),
            'propertyFactoryNames' => TextHelper::toJson($propertyFactoryNames),
            'warehouse_statistics_date_list_as_json' => json_encode($warehouse_statistics_date_list),
            'warehouse_statistics_as_json' => json_encode($warehouse_statistics),
        ]);
    }

    /**
     * 批量扫码绑定RFID测试页面
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    final public function getBatchBindingRFIDWithIdentityCode()
    {
        return view('Index.batchBindingRFIDWithIdentityCode');
    }

    /**
     * 测试
     */
    final public function getTest()
    {
        return view('Testing.index');
//        $ids = DB::table('warehouse_reports as wr')
//            ->join(DB::raw('warehouse_report_entire_instances ei'), 'wr.serial_number', '=', 'ei.warehouse_report_serial_number')
//            ->groupBy('wr.id')
//            ->pluck('wr.id')
//            ->toArray();
//        $a = DB::table('warehouse_reports as wr')->whereNotIn('id', $ids)->update(['deleted_at' => date('Y-m-d H:i:s')]);
//        dd("清洗没有出入所设备的出入所单：FINISH {$a}");
//
//        $b = WarehouseReportEntireInstance::with(['WarehouseReport', 'EntireInstance'])
//            ->whereHas('WarehouseReport', function ($WarehouseReport) {
//                $WarehouseReport->where('direction', 'OUT');
//            })
//            ->groupBy('warehouse_report_serial_number')
//            ->get();
//
//        foreach ($b as $item) {
//            if ($item->WarehouseReport && $item->EntireInstance) {
//                if ($item->EntireInstance->maintain_station_name == null) continue;
//                $maintain = DB::table('maintains as s')
//                    ->select(['s.type', 'sw.name as scene_workshop_name'])
//                    ->leftJoin(DB::raw('maintains as sw'), 'sw.unique_code', '=', 's.parent_unique_code')
//                    ->where('s.deleted_at', null)
//                    ->where('s.name', $item->EntireInstance->maintain_station_name)
//                    ->first();
//                if ($maintain) {
//                    if ($maintain->type == 'STATION') {
//                        dump("找到车间：{$maintain->scene_workshop_name}，找到车站：{$item->EntireInstance->maintain_staion_name}");
//                        $item->WarehouseReport->station_name = $item->EntireInstance->maintain_station_name;
//                        $item->WarehouseReport->scene_workshop_name = $maintain->scene_workshop_name;
//                        $item->WarehouseReport->save();
//                    } else {
//                        dump("找到车间：{$item->EntireInstance->maintain_station_name}");
//                        $item->WarehouseReport->scene_workshop_name = $item->EntireInstance->maintain_station_name;
//                        $item->WarehouseReport->save();
//                    }
//                }
//            }
//        }
//
//        dd('FINISH');
//        $ret = SuPuRuiTest::api10();
//        dd($ret);
//        //        SuPuRuiTest::api11();
//        //        $this->entireInstanceInstalled("S03", "S0301");
//        //        $this->entireInstanceFixed("S03", "S0301");
//        //        $this->entireInstanceFixing("S03", "S0301");
//        //        $this->entireInstanceInstalled("Q01", "Q010101");
//        //        $this->entireInstanceFixed("Q01", "Q010101");
//        //        $this->entireInstanceFixing("Q01", "Q010101");
//        //        $this->onlyOnceFixed();
//        dd('FINISH ' . date("H:i:s"));
//
//        foreach (FixWorkflow::with(['EntireInstance'])->where('status', '<>', 'FIXED')->get() as $fixWorkflow) {
//            if (rand(0, 1)) {
//                $fixWorkflow->fill(['status' => 'FIXED', 'entire_fix_after_count' => 1, 'part_fix_after_count' => 1, 'is_cycle' => true])->saveOrFail();
//                $fixWorkflow->EntireInstance->fill(['status' => 'FIXED'])->saveOrFail();
//            }
//        }
//        dd('CYCLE FIX WORKFLOW FINISH ' . date('H:i:s'));
//
//        $partInstances = $this->readPart();
//        foreach ($partInstances as $partInstance) {
//            if (DB::table('part_instances')->where('identity_code', $partInstance['identity_code'])->first()) continue;
//            DB::table('part_instances')->insert($partInstance);
//        }
//        dd('PART FINISH ' . date('H:i:s'));
//
//        list($entireInstances, $warehouseReports, $warehouseReportEntireInstances) = $this->readEntire();
//
//        foreach ($entireInstances as $entireInstance) {
//            if (DB::table('entire_instances')->where('identity_code', $entireInstance['identity_code'])->first()) continue;
//            if (DB::table('entire_instances')->where('factory_device_code', $entireInstance['factory_device_code'])->first()) continue;
//            DB::table('entire_instances')->insert($entireInstance);
//        }
//
//        dd('ENTIRE FINISH ' . date('H:i:s'));
    }

    public function readPart()
    {
        $filePath = storage_path('exports/转辙机部件.xlsx');
        // 读取excel部件
        try {
            $inputFileType = \PHPExcel_IOFactory::identify($filePath);
            $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
            $objPHPExcel = $objReader->load($filePath);
        } catch (\Exception $e) {
            die('加载文件发生错误');
        }

        // 确定要读取的sheet，什么是sheet，看excel的右下角，真的不懂去百度吧
        $sheet = $objPHPExcel->getSheet(0);
        $highestRow = $sheet->getHighestRow(); #行数
        $highestColumn = $sheet->getHighestColumn(); #列数

        $partInstances = [];  # 整件

        // 获取一行的数据
        for ($row = 3; $row <= $highestRow; $row++) {
            // Read a row of data into an array
            list(
                $identityCode,  # 唯一编号，所编号
                $partModelUniqueCode,  # 部件类型
                $partModelName,  # 部件类型名称
                $tmp1,  # 周期
                $entireInstanceIdentityCode,  # 整机编号
                $tmp2,  # 转辙机型号
                $tmp3,  # 对应转辙机种类
                $tmp4,  # 对应转辙机周期
                $tmp4,  # 供应商
                $tmp5,  # 厂编号
                $tmp6,  # 上道状态
                $tmp7,  # 一级状态
                $tmp8,  # 仓库名称
                $tmp9,  # 库存位置
                $tmp10,  # 去向
                $tmp11,  # 岔道号
                $tmp12,  # 牵引
                $tmp13,  # 来源
                $tmp14,  # 来源岔号
                $tmp15,  # 来源牵引
                $tmp16,  # 出场日期
                $partInstanceCreatedAt,  # 入所日期
                $tmp17,
                $tmp18,
                $tmp19,
                $tmp20,
                $tmp21,
                $tmp22,
                $tmp23,
                $tmp24,
                $tmp25,
                $tmp26,
                $tmp27,
                $tmp28,
                $tmp29,
                $tmp30,
                $tmp31,
                $tmp32,
                $tmp33,
                $tmp34,
                $tmp35,
                $tmp36,
                $tmp37,
                $tmp38,
                $tmp39,
                $tmp40,
                $tmp41,
                $tmp42,
                $tmp43,
                $tmp44,
                $tmp45,
                $tmp46,
                $tmp47,
                $tmp48,
                $tmp49,
                $tmp50,
                $tmp51,
                $tmp52,
                $tmp53,
                $tmp54,
                $tmp55,
                $tmp56,
                $tmp57,
                $tmp58,
                $tmp59,
                $tmp60,
                ) = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE)[0];
            $partInstances[] = [
                'created_at' => $partInstanceCreatedAt,
                'updated_at' => $partInstanceCreatedAt,
                'part_model_unique_code' => $partModelUniqueCode,
                'part_model_name' => $partModelName,
                'entire_instance_identity_code' => $entireInstanceIdentityCode,
                'status' => $tmp6 == '成品' ? 'FIXED' : 'INSTALLED',
                'factory_name' => null,
                'factory_device_code' => time() . rand(0, 4) . $row,
                'identity_code' => $identityCode,
                'entire_instance_serial_number' => null,
                'cycle_fix_count' => 0,
                'un_cycle_fix_count' => 0,
            ];
        }
        return $partInstances;
    }

    public function readEntire()
    {
        $filePath = storage_path('exports/转辙机整件.xlsx');
        // 读取excel部件
        try {
            $inputFileType = \PHPExcel_IOFactory::identify($filePath);
            $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
            $objPHPExcel = $objReader->load($filePath);
        } catch (\Exception $e) {
            die('加载文件发生错误');
        }

        // 确定要读取的sheet，什么是sheet，看excel的右下角，真的不懂去百度吧
        $sheet = $objPHPExcel->getSheet(0);
        $highestRow = $sheet->getHighestRow(); #行数
        $highestColumn = $sheet->getHighestColumn(); #列数

        $entireInstances = [];  # 整件
        $warehouseReports = [];  # 出入所单
        $warehouseReportEntireInstances = [];  # 出所实例

        for ($rows = 3; $rows <= $highestRow; $rows++) {
            // Read a row of data into an array
            list(
                $serialNumber,  # 设备编号
                $entireModelIdCode,  # 设备型号
                $categoryName,  # 种类名称
                $fixCycleValue,  # 周期
                $factoryName,  # 供应商
                $factoryDeviceCode,  # 厂编号
                $status,  # （上道使用：INSTALLED、成品：FIXED）
                $inWarehouse,  # （站场：false、室内：true）
                $warehouseName,  # 仓库名称！ (出所单）
                $warehouseLocation,  # 库存位置！(出所单）
                $toDirection,  # 去向！(出所单）
                $crossroadNumber,  # 岔号！(出所单）
                $traction,  # 牵引！(出所单）
                $source,  # 来源！(出所单）
                $sourceCrossroadNumber,  # 岔号！(出所单）
                $sourceTraction,  # 来源牵引！(出所单）
                $madeAt,  # 出场日期！
                $createdAt,  # 入所日期（入所单）
                $tmp1,  # 使用日期❎
                $tmp2,  # 返所日期❎
                $tmp3,  # 故障检测日期❎
                $fixBeforeAt,  # 修前检日期（检测单）？
                $fixAfterAt,  # 修后检日期（检测单）？
                $fixCheckedAt,  # 段抽验日期（检测单）？
                $fixWorkshopAt,  # 车间抽验日期（检测单）？
                $warehouseReportCreatedAt,  # 出所日期（出所单）
                $forecastInstallAt,  # 理论上道日期！（出所单）
                $lastInstalledAt,  # 实际安装日期
                $nextFixingAt,  # 到期日期（需要计算）
                $scarpingAt,  # 预计报废日期！
                $tmp4,  # 下道日期
                $tmp5,  # 返厂日期
                $tmp6,  # 接收日期
                $residueUseYear,  # 剩余年限！
                $lineUniqueCode,  # 线制！（出所单）
                $openDirection,  # 开向！（出所单）
                $saidRod,  # 表示杆特征！（出所单）
                $tmp7,  # 整机故障检测人
                $fixBeforeProcessorName,  # 修前检测人（检测单）？
                $fixAfterProcessorName,  # 修后检测人（检测单）？
                $fixCheckedProcessorName,  # 段抽验人（检测单）？
                $fixWorkshopProcessorName,  # 车间抽验人（检测单）？
                $warehouseReportProcessorName,  # 操作人（出所单）
                $tmp8,  # 交送人！
                $warehouseReportConnectionName,  # 接收人（出所单）
                $fixWorkflowNote,  # 入所原因（检修单）？
                $scarpedNote,  # 报废原因！（出所单）
                $oldNumber,  # 设备老编号！（出所单）
                $tmp9,  # 维修费用！（出所单）
                $oldCheckedCount,  # 验收次数！（出所单）？
                $railwayName,  # 路局！（出所单）
                $sectionName,  # 段！（出所单）
                $baseName,  # 基地名称！（出所单）
                $tmp10,  # 检修外器材
                $issueNote,  # 检修缺点！（出所单）？
                $fixWorkflowProcessNote,  # 检修记事？
                $tmp11,  # 出所用途
                $tmp12,  # 配线人
                $tmp13,  # 其他
                $tmp14,  # 备注
                $tmp15,  # 是否最新
                $tmp16,  # sid
                ) = $sheet->rangeToArray('A' . $rows . ':' . $highestColumn . $rows, NULL, TRUE, FALSE)[0];

            # 获取对应的类型代码
            $entireModelIdCodeDB = DB::table('entire_model_id_codes')->where('code', $entireModelIdCode)->first(['category_unique_code', 'entire_model_unique_code', 'code']);
            # 获取操作人编号
            $account = Account::where('nickname', $warehouseReportProcessorName)->first(['id']);
            # 出所单号
            $warehouseReportSerialNumber = Code::makeSerialNumber('OUT') . $rows;

            $entireInstances[] = [
                'created_at' => $createdAt,
                'updated_at' => $createdAt,
                'entire_model_unique_code' => $entireModelIdCodeDB ? $entireModelIdCodeDB->entire_model_unique_code : '',
                'entire_model_id_code' => $entireModelIdCodeDB ? $entireModelIdCodeDB->code : $entireModelIdCode,
                'serial_number' => $serialNumber,
                'status' => $status == '上道使用' ? 'INSTALLED' : 'FIXED',
                'maintain_station_name' => $sectionName,
                'maintain_location_code' => null,
                'is_main' => null,
                'factory_name' => $factoryName,
                'factory_device_code' => $factoryDeviceCode,
                'identity_code' => $serialNumber,
                'last_installed_time' => null,
                'in_warehouse' => $inWarehouse == '室内' ? true : false,
                'category_name' => $categoryName,
                'category_unique_code' => $entireModelIdCodeDB ? $entireModelIdCodeDB->category_unique_code : 'S03',
                'fix_workflow_serial_number' => null,
                'last_warehouse_report_serial_number_by_out' => null,
                'is_flush_serial_number' => null,
                'next_auto_making_fix_workflow_time' => null,
                'next_fixing_time' => null,
                'next_auto_making_fix_workflow_at' => null,
                'next_fixing_month' => null,
                'next_fixing_day' => null,
                'fix_cycle_unit' => 'YEAR',
                'fix_cycle_value' => $fixCycleValue,
                'cycle_fix_count' => null,
                'un_cycle_fix_count' => null,
                'made_at' => $madeAt,
                'scarping_at' => $scarpingAt,
                'residue_use_year' => $residueUseYear,
                'old_number' => $oldNumber,
            ];

            //            $warehouseReports[] = [
            //                'created_at' => $warehouseReportCreatedAt ?: null,
            //                'updated_at' => $warehouseReportCreatedAt ?: null,
            //                'processor_id' => $account ? $account->id : null,
            //                'processed_at' => $warehouseReportCreatedAt ?: null,
            //                'connection_name' => $warehouseReportConnectionName,
            //                'connection_phone' => null,
            //                'type' => 'INSTALL',
            //                'direction' => 'OUT',
            //                'serial_number' => $warehouseReportSerialNumber,
            //                'purpose' => null,
            //                'warehouse_name' => $warehouseName,
            //                'location_unique_code' => $warehouseLocation,
            //                'to_direction' => $toDirection,
            //                'crossroad_number' => $crossroadNumber,
            //                'traction' => $traction,
            //                'source' => $source,
            //                'source_crossroad_number' => $sourceCrossroadNumber,
            //                'source_traction' => $sourceTraction,
            //                'forecast_install_at' => $forecastInstallAt?:null,
            //                'line_unique_code' => $lineUniqueCode,
            //                'open_direction' => $openDirection,
            //                'said_rod' => $saidRod,
            //                'scarped_note' => $scarpedNote,
            //                'railway_name' => $railwayName,
            //                'section_name' => $sectionName,
            //                'base_name' => $baseName,
            //            ];
            //
            //            $warehouseReportEntireInstances[] = [
            //                'warehouse_report_serial_number' => $warehouseReportSerialNumber,
            //                'entire_instance_identity_code' => $serialNumber,
            //            ];
        }

        return [$entireInstances, $warehouseReports, $warehouseReportEntireInstances];
    }

    public function onlyOnceFixed()
    {
        foreach (Fixworkflow::where('status', 'FIXED')->get() as $fixWorkflow) {
            if (rand(0, 100) < 45) {
                $fixWorkflow->fill(['entire_fix_after_count' => 1, 'part_fix_after_count' => 1, 'is_cycle' => 1])->saveOrFail();
            }
        }
    }

    public function entireInstanceInstalled($categoryUniqueCode, $entireModelUniqueCode)
    {
        for ($i = 0; $i < rand(333, 555); $i++) {
            $currentDatetime = date('Y-m-d H:i:s');

            $entireModelIdCodes = [
                'S0301N01',
                'S0301N04',
            ];

            $identityCode = \App\Facades\Code::makeEntireInstanceIdentityCode($entireModelUniqueCode, '');

            # 安装出所
            # 随机安装时间
            $randInstalledDay = rand(1, 4);
            $lastInstalledTime = strtotime("-{$randInstalledDay} month");
            $nextFixingTime = strtotime("+3 month", $lastInstalledTime);
            $nextFixingMonth = date('Y-m-01', $nextFixingTime);
            $nextFixingDay = date('Y-m-d', $nextFixingTime);
            $nextAutoMakingFixWorkflowTime = strtotime("-2 month", $nextFixingTime);
            $nextAutoMakingFixWorkflowAt = date('Y-m-01', $nextAutoMakingFixWorkflowTime);

            $entireInstance = [
                'created_at' => $currentDatetime,
                'updated_at' => $currentDatetime,
                'entire_model_unique_code' => $entireModelUniqueCode,
                'entire_model_id_code' => $categoryUniqueCode == "S03" ? $entireModelIdCodes[rand(0, 1)] : null,
                'status' => 'INSTALLED',
                'factory_name' => '太原铁路信号设备有限责任公司',
                'factory_device_code' => $identityCode,
                'fix_cycle_unit' => 'YEAR',
                'fix_cycle_value' => 3,
                'maintain_station_name' => '十里冲',
                'maintain_location_code' => rand(0, 9) . rand(0, 9) . rand(0, 9) . rand(0, 9),
                'last_installed_time' => $lastInstalledTime,
                'serial_number' => $identityCode,
                'identity_code' => $identityCode,
                'category_unique_code' => $categoryUniqueCode,
                'next_auto_making_fix_workflow_time' => $nextAutoMakingFixWorkflowTime,
                'next_fixing_time' => $nextFixingTime,
                'next_auto_making_fix_workflow_at' => $nextAutoMakingFixWorkflowAt,
                'next_fixing_month' => $nextFixingMonth,
                'next_fixing_day' => $nextFixingDay
            ];
            DB::table('entire_instances')->insert($entireInstance);

            DB::table('pivot_entire_instance_and_extra_tags')->insert([
                'entire_instance_identity_code' => $identityCode,
                'extra_tag' => '天津厂',
            ]);

            $fixWorkflowSerialNumber = Code::makeSerialNumber('FIX_WORKFLOW') . strval($i);
            $fixWorkflow = [
                'created_at' => $entireInstance['created_at'],
                'updated_at' => $entireInstance['created_at'],
                'entire_instance_identity_code' => $entireInstance['identity_code'],
                'warehouse_report_serial_number' => null,
                'status' => 'FIXED',
                'processor_id' => rand(1, 21),
                'expired_at' => null,
                'id_by_failed' => null,
                'serial_number' => $fixWorkflowSerialNumber,
                'note' => null,
                'processed_times' => 0,
                'stage' => 'FIXED',
                'is_cycle' => false,
                'entire_fix_after_count' => 0,
                'part_fix_after_count' => 0,
            ];
            DB::table('fix_workflows')->insert($fixWorkflow);

            if ($categoryUniqueCode == "S03") {
                $partInstance = [
                    'created_at' => $currentDatetime,
                    'updated_at' => $currentDatetime,
                    'part_model_unique_code' => $entireInstance['entire_model_id_code'],
                    'entire_instance_identity_code' => $entireInstance['identity_code'],
                    'status' => 'FIXED',
                    'factory_name' => '太原铁路信号设备有限责任公司',
                    'factory_device_code' => time() . $i,
                    'identity_code' => time() . $i,
                    'entire_instance_serial_number' => $entireInstance['identity_code'],
                    'cycle_fix_count' => 0,
                    'un_cycle_fix_count' => 0,
                    'category_unique_code' => $categoryUniqueCode,
                    'entire_model_unique_code' => $entireModelUniqueCode
                ];
                DB::table('part_instances')->insert($partInstance);
            }
        }
    }

    public function entireInstanceFixed($categoryUniqueCode, $entireModelUniqueCode)
    {
        for ($i = 0; $i < rand(333, 555); $i++) {
            $currentDatetime = date('Y-m-d H:i:s');

            $entireModelIdCodes = ['S0301N01', 'S0301N04'];

            $identityCode = \App\Facades\Code::makeEntireInstanceIdentityCode($entireModelUniqueCode, '');

            $entireInstance = [
                'created_at' => $currentDatetime,
                'updated_at' => $currentDatetime,
                'entire_model_unique_code' => $entireModelUniqueCode,
                'entire_model_id_code' => $entireModelIdCodes[rand(0, 1)],
                'status' => 'FIXED',
                'in_warehouse' => false,
                'factory_name' => '太原铁路信号设备有限责任公司',
                'factory_device_code' => $identityCode,
                'fix_cycle_unit' => 'YEAR',
                'fix_cycle_value' => 3,
                'serial_number' => $identityCode,
                'identity_code' => $identityCode,
                'category_unique_code' => $categoryUniqueCode,
            ];
            DB::table('entire_instances')->insert($entireInstance);

            DB::table('pivot_entire_instance_and_extra_tags')->insert([
                'entire_instance_identity_code' => $identityCode,
                'extra_tag' => '天津厂',
            ]);

            $fixWorkflowSerialNumber = Code::makeSerialNumber('FIX_WORKFLOW') . strval($i);
            $fixWorkflow = [
                'created_at' => $entireInstance['created_at'],
                'updated_at' => $entireInstance['created_at'],
                'entire_instance_identity_code' => $entireInstance['identity_code'],
                'warehouse_report_serial_number' => null,
                'status' => 'FIXED',
                'processor_id' => rand(1, 21),
                'expired_at' => null,
                'id_by_failed' => null,
                'serial_number' => $fixWorkflowSerialNumber,
                'note' => null,
                'processed_times' => 0,
                'stage' => 'FIXED',
                'is_cycle' => false,
                'entire_fix_after_count' => 0,
                'part_fix_after_count' => 0,
            ];
            DB::table('fix_workflows')->insert($fixWorkflow);

            if ($categoryUniqueCode == "S03") {
                $partInstance = [
                    'created_at' => $currentDatetime,
                    'updated_at' => $currentDatetime,
                    'part_model_unique_code' => $entireInstance['entire_model_id_code'],
                    'entire_instance_identity_code' => $entireInstance['identity_code'],
                    'status' => 'FIXED',
                    'factory_name' => '太原铁路信号设备有限责任公司',
                    'factory_device_code' => time() . $i,
                    'identity_code' => time() . $i,
                    'entire_instance_serial_number' => $entireInstance['identity_code'],
                    'cycle_fix_count' => 0,
                    'un_cycle_fix_count' => 0,
                    'category_unique_code' => $categoryUniqueCode,
                    'entire_model_unique_code' => $entireModelUniqueCode
                ];
                DB::table('part_instances')->insert($partInstance);
            }
        }
    }

    public function entireInstanceFixing($categoryUniqueCode, $entireModelUniqueCode)
    {
        for ($i = 0; $i < rand(333, 555); $i++) {
            $currentDatetime = date('Y-m-d H:i:s');

            $entireModelIdCodes = [
                'S0301N01',
                'S0301N04',
            ];

            $identityCode = \App\Facades\Code::makeEntireInstanceIdentityCode($entireModelUniqueCode, '');

            # 不安装
            $entireInstance = [
                'created_at' => $currentDatetime,
                'updated_at' => $currentDatetime,
                'entire_model_unique_code' => $entireModelUniqueCode,
                'entire_model_id_code' => $entireModelIdCodes[rand(0, 1)],
                'status' => 'FIXING',
                'in_warehouse' => false,
                'factory_name' => '太原铁路信号设备有限责任公司',
                'factory_device_code' => $identityCode,
                'fix_cycle_unit' => 'YEAR',
                'fix_cycle_value' => 3,
                'serial_number' => $identityCode,
                'identity_code' => $identityCode,
                'category_unique_code' => $categoryUniqueCode,
            ];
            DB::table('entire_instances')->insert($entireInstance);

            DB::table('pivot_entire_instance_and_extra_tags')->insert([
                'entire_instance_identity_code' => $identityCode,
                'extra_tag' => '天津厂',
            ]);

            $fixWorkflowSerialNumber = Code::makeSerialNumber('FIX_WORKFLOW') . strval($i);
            $fixWorkflow = [
                'created_at' => $entireInstance['created_at'],
                'updated_at' => $entireInstance['created_at'],
                'entire_instance_identity_code' => $entireInstance['identity_code'],
                'warehouse_report_serial_number' => null,
                'status' => 'FIXING',
                'processor_id' => rand(1, 21),
                'expired_at' => null,
                'id_by_failed' => null,
                'serial_number' => $fixWorkflowSerialNumber,
                'note' => null,
                'processed_times' => 0,
                'stage' => 'PART',
                'is_cycle' => false,
                'entire_fix_after_count' => 0,
                'part_fix_after_count' => 0,
            ];
            DB::table('fix_workflows')->insert($fixWorkflow);

            if ($categoryUniqueCode == "S03") {
                $partInstance = [
                    'created_at' => $currentDatetime,
                    'updated_at' => $currentDatetime,
                    'part_model_unique_code' => $entireInstance['entire_model_id_code'],
                    'entire_instance_identity_code' => $entireInstance['identity_code'],
                    'status' => 'FIXED',
                    'factory_name' => '太原铁路信号设备有限责任公司',
                    'factory_device_code' => time() . $i,
                    'identity_code' => time() . $i,
                    'entire_instance_serial_number' => $entireInstance['identity_code'],
                    'cycle_fix_count' => 0,
                    'un_cycle_fix_count' => 0,
                    'category_unique_code' => $categoryUniqueCode,
                    'entire_model_unique_code' => $entireModelUniqueCode
                ];
                DB::table('part_instances')->insert($partInstance);
            }
        }
    }

//    /**
//     * 台账可视化
//     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
//     */
//    public function monitor()
//    {
//        $origin_time = Carbon::now()->subDay(3);
//
//        # 获取近三天出入所数据
//        $nearly_three_days = [];
//        for ($i = 0; $i < 3; $i++) {
//            $now = $origin_time->addDay(1);
//            $nearly_three_days[$now->format('Y-m-d')] = [
//                'in' => TextHelper::parseJson(file_get_contents(storage_path("app/出入所/" . $now->format('Y') . '/' . $now->format('Y-m') . '/' . $now->format('Y-m-d') . '-入-总计.json'))),
//                'out' => TextHelper::parseJson(file_get_contents(storage_path("app/出入所/" . $now->format('Y') . '/' . $now->format('Y-m') . '/' . $now->format('Y-m-d') . '-出-总计.json'))),
//            ];
//        }
//
//        # 检修动态
//        $year = Carbon::now()->format('Y');
//        $month = Carbon::now()->format('e');
//        $fix = TextHelper::parseJson(file_get_contents(storage_path("app/周期修/{$year}/{$year}-{$month}/实际-种类.json")));
//        $fix_count = [
//            '转辙机' => 0,
//            '继电器' => 0,
//            '综合' => 0,
//        ];
//        foreach ($fix as $category_name => $item) {
//            if ($category_name === '转辙机' || $category_name === '继电器') $fix_count[$category_name] = $item;
//            if ($category_name !== '转辙机' && $category_name !== '继电器') $fix_count['综合'] += $item;
//        }
//
//        $cycle_fix_count = [
//            '转辙机' => [
//                '任务' => 0,
//                '计划' => 0,
//            ],
//            '继电器' => [
//                '任务' => 0,
//                '计划' => 0,
//            ],
//            '综合' => [
//                '任务' => 0,
//                '计划' => 0,
//            ]
//        ];
//        $cycle_fix_for_mission = TextHelper::parseJson(file_get_contents(storage_path("app/周期修/{$year}/{$year}-{$month}/任务-种类.json")));
//        $cycle_fix_for_plan = TextHelper::parseJson(file_get_contents(storage_path("app/周期修/{$year}/{$year}-{$month}/计划.json")));
//        foreach ($cycle_fix_for_mission as $category_name => $item) {
//            if ($category_name === '转辙机' || $category_name === '继电器') $cycle_fix_count[$category_name]['任务'] = $item;
//            if ($category_name !== '转辙机' && $category_name !== '继电器') $cycle_fix_count['综合']['任务'] += $item;
//        }
//        foreach ($cycle_fix_for_plan as $category_name => $item) {
//            if ($category_name === '转辙机' || $category_name === '继电器') $cycle_fix_count[$category_name] ['计划'] += $item['count'];
//            if ($category_name !== '转辙机' && $category_name !== '继电器') $cycle_fix_count['综合']['计划'] += $item['count'];
//        }
//
//        #铁路沿线
//        $stationPolyline = config('monitor.stationPolyline');
//        #设备种类
//        $categories = TextHelper::parseJson(file_get_contents(storage_path("app/台账/种类.json")));
//        #资产管理
//        $properties = TextHelper::parseJson(file_get_contents(storage_path("app/资产管理/总数-种类.json")));
//        #设备状态统计
//
//        $deviceDB = DB::table("entire_instances")
//            ->where("deleted_at", null)
//            ->where("category_unique_code", request('categoryUniqueCode', 'S03')
//            );
//        $using = $deviceDB->whereIn("status", ["INSTALLING", "INSTALLED"])->count("id");
//        $fixed = $deviceDB->where("status", "FIXED")->count("id");
//        $returnFactory = $deviceDB->where("status", "RETURN_FACTORY")->count("id");
//        $fixing = $deviceDB->whereIn("status", ["FIXING", "FACTORY_RETURN", "BUY_IN"])->count("id");
//        $total = $deviceDB->where("status", "<>", "SCRAP")->count("id");
//
//        $deviceDynamics = [
//            'total' => $total,
//            'status' => [
//                ["name" => "上道", "value" => $using],
//                ["name" => "维修", "value" => $fixing],
//                ["name" => "送检", "value" => $returnFactory],
//                ["name" => "成品", "value" => $fixed]
//            ]
//        ];
//
//
//        return view('Index.monitor', [
//            'nearly_three_days_as_json' => TextHelper::toJson($nearly_three_days),
//            'fix_count' => $fix_count,
//            'fix_count_as_json' => TextHelper::toJson($fix_count),
//            'cycle_fix_count_as_json' => TextHelper::toJson($cycle_fix_count),
//            'stationPolyline' => TextHelper::toJson($stationPolyline),
//            'categories' => TextHelper::toJson(array_flip($categories)),
//            'properties' => TextHelper::toJson($properties),
//            'deviceDynamics' => TextHelper::toJson($deviceDynamics)
//        ]);
//    }


    /**
     * 监控大屏
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Foundation\Application|\Illuminate\Http\Response|\Illuminate\View\View
     */
    final public function monitor(Request $request)
    {
        try {

            $categories = DB::table('categories')->get(['name', 'id', 'unique_code'])->toArray();
            $maintains = DB::table('maintains as sc')
                ->selectRaw('sc.name as scene_workshop_name, sc.unique_code as scene_workshop_unique_code, s.unique_code as station_unique_code, s.name as station_name')
                ->leftJoin(DB::raw('maintains s'), 'sc.unique_code', '=', 's.parent_unique_code')
                ->where('sc.type', 'SCENE_WORKSHOP')
                ->where('s.type', 'STATION')
                ->where('sc.parent_unique_code', env('ORGANIZATION_CODE'))
                ->get();
            $maintainStatistics = [];
            foreach ($maintains as $maintain) {
                if (!array_key_exists($maintain->scene_workshop_unique_code, $maintainStatistics)) {
                    $sceneWorkshops[$maintain->scene_workshop_unique_code] = $maintain->scene_workshop_name;
                    $maintainStatistics[$maintain->scene_workshop_unique_code] = [
                        'unique_code' => $maintain->scene_workshop_unique_code,
                        'name' => $maintain->scene_workshop_name,
                        'stations' => [],
                    ];
                }
                $maintainStatistics[$maintain->scene_workshop_unique_code]['stations'][$maintain->station_unique_code] = [
                    'unique_code' => $maintain->station_unique_code,
                    'name' => $maintain->station_name
                ];
            }
            # 现场车间标点
            $sceneWorkshopPoints = config('monitor.sceneWorkshopPoint');
            # 车站连线
            $stationPolylines = config('monitor.stationPolyline');
            $stationPoints = config('monitor.stationPoint');

            $categories_iframe = TextHelper::parseJson(file_get_contents(storage_path("app/台账/种类.json")));
            #资产管理
            $properties_iframe = TextHelper::parseJson(file_get_contents(storage_path("app/资产管理/总数-种类.json")));

            $deviceDB = DB::table("entire_instances")
                ->where("deleted_at", null)
                ->where("category_unique_code", request('categoryUniqueCode', 'S03')
                );
            $using = $deviceDB->whereIn("status", ["INSTALLING", "INSTALLED"])->count("id");
            $fixed = $deviceDB->where("status", "FIXED")->count("id");
            $returnFactory = $deviceDB->where("status", "RETURN_FACTORY")->count("id");
            $fixing = $deviceDB->whereIn("status", ["FIXING", "FACTORY_RETURN", "BUY_IN"])->count("id");
            $total = $deviceDB->where("status", "<>", "SCRAP")->count("id");

            $deviceDynamics_iframe = [
                'total' => $total,
                'status' => [
                    ["name" => "上道", "value" => $using],
                    ["name" => "维修", "value" => $fixing],
                    ["name" => "送检", "value" => $returnFactory],
                    ["name" => "成品", "value" => $fixed]
                ]
            ];

            return view('Index.monitor', [
                'categories' => $categories,
                'sceneWorkshopPoints' => TextHelper::toJson($sceneWorkshopPoints),
                'stationPolylines' => TextHelper::toJson($stationPolylines),
                'stationPoints' => TextHelper::toJson($stationPoints),
                'categories_iframe' => TextHelper::toJson(array_flip($categories_iframe)),
                'properties_iframe' => TextHelper::toJson($properties_iframe),
                'deviceDynamics_iframe' => TextHelper::toJson($deviceDynamics_iframe),
                'maintainStatistics' => json_encode($maintainStatistics)
            ]);
        } catch (\Exception $exception) {
            return Response::make($exception->getMessage(), 500);
        }
    }

    /**
     * 监控大屏-左上-设备状态统计
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    final public function monitorWithLeftTop(Request $request)
    {
        try {
            $categoryId = $request->get('categoryId', '');
            $sceneWorkshopUniqueCode = $request->get('sceneWorkshopUniqueCode', '');
            $stationUniqueCode = $request->get('stationUniqueCode', '');
            $sceneWorkshopUniqueCode = DB::table('maintains')->where('unique_code', $sceneWorkshopUniqueCode)->value('name');
            $stationUniqueCode = DB::table('maintains')->where('unique_code', $stationUniqueCode)->value('name');
            $materialStatistics = DB::table('entire_instances as e')
                ->selectRaw('distinct count(e.id) as count , e.status')
//                ->leftJoin(DB::raw('part_models pm'), 'e.sub_model_unique_code', 'pm.unique_code')
//                ->leftJoin(DB::raw('entire_models em'), 'pm.entire_model_id', 'em.id')
//                ->leftJoin(DB::raw('categories c'), 'em.category_id', 'c.id')
                ->where('e.deleted_at', null)
                ->when(
                    !empty($categoryId),
                    function ($query) use ($categoryId) {
                        return $query->where('e.category_unique_code', $categoryId);
                    }
                )
                ->when(
                    !empty($sceneWorkshopUniqueCode),
                    function ($query) use ($sceneWorkshopUniqueCode) {
                        return $query->where('e.maintain_workshop_name', $sceneWorkshopUniqueCode);
                    }
                )
                ->when(
                    !empty($stationUniqueCode),
                    function ($query) use ($stationUniqueCode) {
                        return $query->where('e.maintain_station_name', $stationUniqueCode);
                    }
                )
                ->groupBy(['e.status'])
                ->pluck('count', 'status')
                ->toArray();
            return HttpResponseHelper::data([
                'materialStates' => EntireInstance::$STATUSS,
                'materialStateNames' => array_flip(EntireInstance::$STATUSS),
                'materialStatistics' => $materialStatistics
            ]);
        } catch (\Exception $exception) {
            return HttpResponseHelper::error($exception->getMessage());
        }
    }

    /**
     * 监控大屏-左中-资产统计
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    final public function monitorWithLeftMiddle(Request $request)
    {
        try {
            $sceneWorkshopUniqueCode = $request->get('sceneWorkshopUniqueCode', '');
            $stationUniqueCode = $request->get('stationUniqueCode', '');
            $sceneWorkshopUniqueCode = DB::table('maintains')->where('unique_code', $sceneWorkshopUniqueCode)->value('name');
            $stationUniqueCode = DB::table('maintains')->where('unique_code', $stationUniqueCode)->value('name');
            $properties = DB::table('entire_instances as e')
                ->selectRaw('distinct count(e.id) as count , c.name as category_name , c.id as category_id')
//                ->leftJoin(DB::raw('sub_models sm'), 'e.sub_model_unique_code', 'sm.unique_code')
//                ->leftJoin(DB::raw('entire_models em'), 'sm.entire_model_id', 'em.id')
                ->leftJoin(DB::raw('categories c'), 'e.category_unique_code', 'c.unique_code')
                ->where('e.deleted_at', null)
                ->when(
                    !empty($sceneWorkshopUniqueCode),
                    function ($query) use ($sceneWorkshopUniqueCode) {
                        return $query->where('e.maintain_workshop_name', $sceneWorkshopUniqueCode);
                    }
                )
                ->when(
                    !empty($stationUniqueCode),
                    function ($query) use ($stationUniqueCode) {
                        return $query->where('e.maintain_station_name', $stationUniqueCode);
                    }
                )
                ->groupBy(['c.name', 'c.id'])
                ->get();
            return HttpResponseHelper::data([
                'properties' => $properties
            ]);
        } catch (\Exception $exception) {
            return HttpResponseHelper::error($exception->getMessage());
        }
    }

    /**
     * 监控大屏-左下-出入所统计
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    final public function monitorWithLeftBottom(Request $request)
    {
        try {
            $sceneWorkshopUniqueCode = $request->get('sceneWorkshopUniqueCode', '');
            $stationUniqueCode = $request->get('stationUniqueCode', '');
            $maintain_workshop_name = DB::table('maintains')->where('unique_code', $sceneWorkshopUniqueCode)->value('name');
            $maintain_station_name = DB::table('maintains')->where('unique_code', $stationUniqueCode)->value('name');
            if ($sceneWorkshopUniqueCode || $stationUniqueCode) {
                $dateList = [];
                for ($i = 6; $i >= 0; $i--) {
                    $time = Carbon::today()->subDay($i);
                    $time = $time->format('Y-m-d');
                    $dateList[] = $time;  # 当前时间标记
                }

                $originTime = array_first($dateList) . ' 00:00:00';
                $finishTime = array_last($dateList) . ' 23:59:59';

                $statistics = DB::table('entire_instances as e')
                    ->selectRaw("count(c.name) as t, c.name as c,e.status as d ,DATE_FORMAT(e.updated_at, '%Y-%m-%d') as time")
                    ->join(DB::raw('categories c'), 'c.unique_code', '=', 'e.category_unique_code')
                    ->whereBetween('e.updated_at', [$originTime, $finishTime])
                    ->when(
                        !empty($sceneWorkshopUniqueCode),
                        function ($query) use ($maintain_workshop_name) {
                            return $query->where('e.maintain_workshop_name', $maintain_workshop_name);
                        }
                    )
                    ->when(
                        !empty($stationUniqueCode),
                        function ($query) use ($maintain_station_name) {
                            return $query->where('e.maintain_station_name', $maintain_station_name);
                        }
                    )
                    ->groupBy(DB::raw('c,d,time'))
                    ->get();
                $statistics2 = $statistics->groupBy('time')->all();

                # 空数据
                $statistics_for_warehouse = [];
                foreach ($dateList as $date) {
                    $statistics_for_warehouse["转辙机(下道)"][$date] = 0;
                    $statistics_for_warehouse["转辙机(上道)"][$date] = 0;
                    $statistics_for_warehouse["继电器(下道)"][$date] = 0;
                    $statistics_for_warehouse["继电器(上道)"][$date] = 0;
                    $statistics_for_warehouse["综合(下道)"][$date] = 0;
                    $statistics_for_warehouse["综合(上道)"][$date] = 0;
                }
                foreach ($dateList as $date) {
                    if (!array_key_exists($date, $statistics2)) continue;
                    foreach ($statistics2[$date] as $val) {
                        if ($val) {
                            if ($val->c == '转辙机' || $val->c == '继电器') {
                                if ($val->d == 'UNINSTALLED') {
                                    $statistics_for_warehouse["{$val->c}(下道)"][$val->time] += $val->t;
                                } elseif ($val->d == 'INSTALLED') {
                                    $statistics_for_warehouse["{$val->c}(上道)"][$val->time] = $val->t;
                                }
                            } else {
                                if ($val->d == 'UNINSTALLED') {
                                    $statistics_for_warehouse["综合(下道)"][$val->time] = $val->t;
                                } elseif ($val->d == 'INSTALLED') {
                                    $statistics_for_warehouse["综合(上道)"][$val->time] = $val->t;
                                }
                            }
                        }
                    }
                }

                return HttpResponseHelper::data([
                    'dateList' => $dateList,
                    'statistics' => $statistics_for_warehouse,
                    'type' => 2
                ]);
            } else {
                $dateList = [];
                for ($i = 6; $i >= 0; $i--) {
                    $time = Carbon::today()->subDay($i);
                    $time = $time->format('Y-m-d');
                    $dateList[] = $time;  # 当前时间标记
                }

                $originTime = array_first($dateList) . ' 00:00:00';
                $finishTime = array_last($dateList) . ' 23:59:59';

                $statistics = DB::table('warehouse_report_entire_instances as wrei')
                    ->selectRaw("count(c.name) as t,c.name as c,wr.direction as d,DATE_FORMAT(wr.created_at, '%Y-%m-%d') as time")
                    ->join(DB::raw('entire_instances ei'), 'ei.identity_code', '=', 'wrei.entire_instance_identity_code')
                    ->join(DB::raw('categories c'), 'c.unique_code', '=', 'ei.category_unique_code')
                    ->join(DB::raw('warehouse_reports wr'), 'wr.serial_number', '=', 'wrei.warehouse_report_serial_number')
                    ->whereBetween('wr.updated_at', [$originTime, $finishTime])
                    ->groupBy(DB::raw('c,d,time'))
                    ->get();

                $statistics2 = $statistics->groupBy('time')->all();

                # 空数据
                $statistics_for_warehouse = [];
                foreach ($dateList as $date) {
                    $statistics_for_warehouse["转辙机(入所)"][$date] = 0;
                    $statistics_for_warehouse["转辙机(出所)"][$date] = 0;
                    $statistics_for_warehouse["继电器(入所)"][$date] = 0;
                    $statistics_for_warehouse["继电器(出所)"][$date] = 0;
                    $statistics_for_warehouse["综合(入所)"][$date] = 0;
                    $statistics_for_warehouse["综合(出所)"][$date] = 0;
                }

                foreach ($dateList as $date) {
                    if (!array_key_exists($date, $statistics2)) continue;
                    foreach ($statistics2[$date] as $val) {
                        if ($val) {
                            if ($val->c == '转辙机' || $val->c == '继电器') {
                                if ($val->d == 'IN') {
                                    $statistics_for_warehouse["{$val->c}(入所)"][$val->time] += $val->t;
                                } else {
                                    $statistics_for_warehouse["{$val->c}(出所)"][$val->time] = $val->t;
                                }
                            } else {
                                if ($val->d == 'IN') {
                                    $statistics_for_warehouse["综合(入所)"][$val->time] = $val->t;
                                } else {
                                    $statistics_for_warehouse["综合(出所)"][$val->time] = $val->t;
                                }
                            }
                        }
                    }
                }

                return HttpResponseHelper::data([
                    'dateList' => $dateList,
                    'statistics' => $statistics_for_warehouse,
                    'type' => 1
                ]);
            }

        } catch (\Exception $exception) {
            return HttpResponseHelper::error($exception->getMessage());
        }
    }

    /**
     * 监控大屏-右上-周期修
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    final public function monitorWithRightTop(Request $request)
    {
        try {

            $root_dir = storage_path("app/周期修");
            $file = FileSystem::init(__FILE__);
            $year = request("cycleFixYear", date("Y"));
            $categories = $file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson();

            if (request("cycleFixDateType", "year") == "year") {
                $cycle_fix_date_list = $file->setPath($root_dir)->join("yearList.json")->fromJson();
                $month = date("e");

                $missions = $file->setPath($root_dir)->joins([$year, "列-任务-种类.json"])->fromJson();
                $plans = $file->setPath($root_dir)->joins([$year, "列-计划.json"])->fromJson();
                $plans2 = [];
                foreach ($plans as $category_name => $plan) $plans2[$category_name] = $plan["count"];
                $reals = $file->setPath($root_dir)->joins([$year, "列-实际-种类.json"])->fromJson();
            } else {
                $cycle_fix_date_list = $file->setPath($root_dir)->join("dateList.json")->fromJson();
                list($year, $month) = explode("-", request("cycleFixDate", date("Y-m")));

                $missions = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "任务-种类.json"])->fromJson();
                $plans = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "计划.json"])->fromJson();
                $plans2 = [];
                foreach ($plans as $category_name => $plan) $plans2[$category_name] = $plan["count"];
                $reals = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "实际-种类.json"])->fromJson();
            }

            foreach ($categories as $category_unique_code => $category_name)
                if ($missions[$category_name] == 0 && $plans2[$category_name] == 0 && $reals[$category_name] == 0)
                    unset($missions[$category_name], $plans2[$category_name], $reals[$category_name], $categories[$category_unique_code]);

            return HttpResponseHelper::data([
                'cycleFixCategories' => array_flip($categories),
                'cycleFixMissions' => $missions,
                'cycleFixPlans' => $plans2,
                'cycleFixReals' => $reals,
                'year' => $year,
                'cycle_fix_date_list' => $cycle_fix_date_list,
                "{$year}-{$month}",
            ]);
        } catch (\Exception $exception) {
            return HttpResponseHelper::error($exception->getMessage());
        }
    }

    /**
     * 监控大屏-右中-超期使用
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    final public function monitorWithRightMiddle(Request $request)
    {
        try {
            $sceneWorkshopUniqueCode = $request->get('sceneWorkshopUniqueCode', '');
            $stationUniqueCode = $request->get('stationUniqueCode', '');
            $sceneWorkshopUniqueCode = DB::table('maintains')->where('unique_code', $sceneWorkshopUniqueCode)->value('name');
            $stationUniqueCode = DB::table('maintains')->where('unique_code', $stationUniqueCode)->value('name');
            $materialStatistics = DB::table('entire_instances as e')
                ->selectRaw('distinct count(e.id) as count , c.name as category_name , c.unique_code, c.id as category_id')
//                ->leftJoin(DB::raw('sub_models sm'), 'e.sub_model_unique_code', 'sm.unique_code')
//                ->leftJoin(DB::raw('entire_models em'), 'sm.entire_model_id', 'em.id')
                ->leftJoin(DB::raw('categories c'), 'e.category_unique_code', 'c.unique_code')
                ->where('e.deleted_at', null)
                ->when(
                    !empty($sceneWorkshopUniqueCode),
                    function ($query) use ($sceneWorkshopUniqueCode) {
                        return $query->where('e.maintain_workshop_name', $sceneWorkshopUniqueCode);
                    }
                )
                ->when(
                    !empty($stationUniqueCode),
                    function ($query) use ($stationUniqueCode) {
                        return $query->where('e.maintain_station_name', $stationUniqueCode);
                    }
                )
                ->groupBy(['c.name', 'c.id'])
                ->get()
                ->toArray();
            $overdueStatistics = DB::table('entire_instances as e')
                ->selectRaw('distinct count(e.id) as count , c.name as category_name , c.id as category_id')
//                ->leftJoin(DB::raw('sub_models sm'), 'e.sub_model_unique_code', 'sm.unique_code')
//                ->leftJoin(DB::raw('entire_models em'), 'sm.entire_model_id', 'em.id')
                ->leftJoin(DB::raw('categories c'), 'e.category_unique_code', 'c.unique_code')
                ->where('e.scarping_at', "<", date('Y-m-d H:i:s'))
                ->where('e.deleted_at', null)
                ->when(
                    !empty($sceneWorkshopUniqueCode),
                    function ($query) use ($sceneWorkshopUniqueCode) {
                        return $query->where('e.maintain_workshop_name', $sceneWorkshopUniqueCode);
                    }
                )
                ->when(
                    !empty($stationUniqueCode),
                    function ($query) use ($stationUniqueCode) {
                        return $query->where('e.maintain_station_name', $stationUniqueCode);
                    }
                )
                ->groupBy(['c.name', 'c.id'])
                ->pluck('count', 'category_name')
                ->toArray();

            return HttpResponseHelper::data([
                'materialStatistics' => $materialStatistics,
                'overdueStatistics' => $overdueStatistics
            ]);
        } catch (\Exception $exception) {
            return HttpResponseHelper::error($exception->getMessage());
        }
    }

    /**
     * 监控大屏-右下-现场车间列表/车站列表
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    final public function monitorWithRightBottom(Request $request)
    {
        try {
            $sceneWorkshopUniqueCode = $request->get('sceneWorkshopUniqueCode', '');
            $stationUniqueCode = $request->get('stationUniqueCode', '');
            $sceneWorkshopStatistics = [];
            $stationStatistics = [];
            if (empty($sceneWorkshopUniqueCode) && empty($stationUniqueCode)) {
                $sceneWorkshops = DB::table('maintains')->where('type', 'SCENE_WORKSHOP')->where('is_show', 1)->select('name', 'unique_code')->get()->toArray();
                $materials = DB::table('entire_instances as ei')
                    ->selectRaw('count(ei.id) as count, mt.unique_code as scene_workshop_unique_code')
                    ->join(DB::raw('maintains mt'), 'ei.maintain_workshop_name', 'mt.name')
                    ->where('ei.deleted_at', null)
                    ->where('ei.status', 'INSTALLING')
                    ->groupBy(['ei.maintain_workshop_name'])
                    ->pluck('count', 'scene_workshop_unique_code')
                    ->toArray();
                foreach ($sceneWorkshops as $sceneWorkshop) {
                    $sceneWorkshopStatistics[] = [
                        'name' => $sceneWorkshop->name,
                        'unique_code' => $sceneWorkshop->unique_code,
                        'count' => $materials[$sceneWorkshop->unique_code] ?? 0,
                    ];
                }

            }
            if (!empty($sceneWorkshopUniqueCode) && empty($stationUniqueCode)) {
                $stations = DB::table('maintains')->where('type', 'STATION')->where('parent_unique_code', $sceneWorkshopUniqueCode)->where('is_show', 1)->select('name', 'unique_code')->get()->toArray();
                $materials = DB::table('entire_instances as ei')
                    ->selectRaw('count(ei.id) as count, mt.unique_code as station_unique_code')
                    ->join(DB::raw('maintains mt'), 'ei.maintain_station_name', 'mt.name')
                    ->where('ei.deleted_at', null)
                    ->where('ei.status', 'INSTALLING')
                    ->where('mt.parent_unique_code', $sceneWorkshopUniqueCode)
                    ->groupBy(['ei.maintain_station_name'])
                    ->pluck('count', 'station_unique_code')
                    ->toArray();
                foreach ($stations as $station) {
                    $stationStatistics[] = [
                        'name' => $station->name,
                        'unique_code' => $station->unique_code,
                        'count' => $materials[$station->unique_code] ?? 0,
                    ];
                }
            }
            return HttpResponseHelper::data([
                'sceneWorkshops' => array_chunk($sceneWorkshopStatistics, 3),
                'stations' => array_chunk($stationStatistics, 3)
            ]);
        } catch (\Exception $exception) {
            return HttpResponseHelper::error($exception->getMessage());
        }
    }


//    /**
//     * 监控大屏台账图
//     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Foundation\Application|\Illuminate\Http\Response|\Illuminate\View\View
//     */
//    final public function makeMaintain()
//    {
//        try {
//            $currentStationName = request('stationName', '');
//            $currentWorkshopName = '';
//            $currentWorkshopCode = '';
//            $currentMaintain = [];
//            if ($currentStationName) {
//                //台账数据
//                $fileDir = storage_path("app/台账");
//                $workshop = array_flip(TextHelper::parseJson(file_get_contents("{$fileDir}/现场车间.json")));
//                $maintains = TextHelper::parseJson(file_get_contents("{$fileDir}/状态统计-车站.json"));
//                foreach ($maintains as $workshopName => $maintain) {
//                    foreach ($maintain as $stationName => $value) {
//                        $tmpStationName = $currentStationName;
//                        if (mb_substr($stationName, -1) == '站') $tmpStationName .= '站';
//                        if ($stationName == $tmpStationName) {
//                            $currentWorkshopName = $workshopName;
//                            $currentWorkshopCode = $workshop[$workshopName];
//                            $currentMaintain = $maintain[$tmpStationName];
//                        }
//                    }
//                }
//            }
//            return view('Index.make_maintain', [
//                'currentStationName' => $currentStationName,
//                'currentWorkshopName' => $currentWorkshopName,
//                'currentWorkshopCode' => $currentWorkshopCode,
//                'currentMaintain' => TextHelper::toJson($currentMaintain),
//            ]);
//        } catch (\Exception $exception) {
//            return Response::make("意外错误", 500);
//        }
//    }

}
