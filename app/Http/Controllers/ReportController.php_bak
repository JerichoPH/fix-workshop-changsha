<?php

namespace App\Http\Controllers;

use App\Facades\CycleFixFacade;
use App\Facades\QueryFacade;
use App\Model\EntireInstance;
use Carbon\Carbon;
use Chumper\Zipper\Facades\Zipper;
use Exception;
use Illuminate\Contracts\View\Factory;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Response;
use Illuminate\View\View;
use Jericho\Excel\ExcelWriteHelper;
use Jericho\FileSystem;
use Jericho\HttpResponseHelper;
use Jericho\TextHelper;
use function request;

class ReportController extends Controller
{
    private $_organizationCode = null;
    private $_organizationName = null;

    public function __construct()
    {
        $this->_organizationCode = env('ORGANIZATION_CODE');
        $this->_organizationName = env('ORGANIZATION_NAME');
    }

    /**
     * Display a listing of the resource.
     *
     * @return Response
     */
    final public function index()
    {
    }

    /**
     * 现场车间
     * @return Factory|View
     */
    final public function workshop()
    {
        try {
            # 型号总计数
            $entireModelUniqueCodes = [];
            foreach (DB::table('hengyang')->select('entire_model_unique_code')->where('entire_model_unique_code', '<>', null)->groupBy('entire_model_unique_code')->get() as &$entireModelUniqueCode) {
                $entireModelUniqueCodes[$entireModelUniqueCode->entire_model_unique_code] = DB::table('hengyang')->where('entire_model_unique_code', $entireModelUniqueCode->entire_model_unique_code)->count('id');
            }

            $stationNames = DB::table('hengyang')->select('station_name')->where('station_name', '<>', null)->groupBy('station_name')->get();

            return view($this->view())
                ->with('entireModelUniqueCodes', $entireModelUniqueCodes)
                ->with('stationNames', $stationNames);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    final private function view($viewName = null)
    {
        try {
            $viewName = $viewName ?: request()->route()->getActionMethod();
            return "Report.{$viewName}";
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 车站页面
     * @return Factory|View
     */
    final public function station(string $stationName)
    {
        try {
            # 型号总计数
            $entireModelUniqueCodes = [];
            foreach (DB::table('hengyang')->select('entire_model_unique_code')
                         ->where('entire_model_unique_code', '<>', null)
                         ->groupBy('entire_model_unique_code')
                         ->where('station_name', $stationName)
                         ->get()
                     as &$entireModelUniqueCode) {
                $entireModelUniqueCodes[$entireModelUniqueCode->entire_model_unique_code] = DB::table('hengyang')->where('entire_model_unique_code', $entireModelUniqueCode->entire_model_unique_code)->count('id');
            }
            return view($this->view())
                ->with('stationName', $stationName)
                ->with('entireModelUniqueCodes', $entireModelUniqueCodes);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 质量报告 年度
     * @return Factory|RedirectResponse|\Illuminate\Routing\Redirector|View|string
     * @throws Exception
     */
    final public function qualityYear()
    {
        try {
            $file = FileSystem::init(__FILE__);
            $year = request("year") ?: date("Y");
            $root_dir = $file->setPath(storage_path("app/质量报告"))->current();

            if (request("download") == 1) {
                # 下载质量报告Excel
                $organization_code = env("ORGANIZATION_NAME");
                $filename = "{$year}年{$organization_code}质量报告.xlsx";
                if (is_file(public_path($filename))) unlink(public_path($filename));
                if (!is_file("{$root_dir}/{$year}/{$filename}")) return "<script>alert('excel文件不存在：{$root_dir}/{$year}/{$filename}');</script>";
                copy("{$root_dir}/{$year}/{$filename}", public_path("{$filename}"));
                return redirect(url("/{$filename}"));
            } elseif (request('download') == 2) {
                # 下载质量报告Excel
                $organization_code = env("ORGANIZATION_NAME");
                $filename = "{$year}年{$organization_code}质量报告-现场车间-站场.xlsx";
                if (is_file(public_path($filename))) unlink(public_path($filename));
                if (!is_file("{$root_dir}/{$year}/{$filename}")) return "<script>alert('excel文件不存在：{$root_dir}/{$year}/{$filename}');</script>";
                copy("{$root_dir}/{$year}/{$filename}", public_path("{$filename}"));
                return redirect(url("/{$filename}"));
            }

            # 获取基本信息
            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $categories = array_flip($file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson());

            $statistics = [
                "设备" => [],
                "检修" => [],
                "故障类型" => [],
            ];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "检修数.json"])->fromJson();
            foreach ($fixed as $factory_name => $fixed_item) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($fixed_item as $category_name => $item) {
                    if ($category_name !== "count") {
                        if (!array_key_exists($category_name, $statistics["检修"])) $statistics["检修"][$category_name] = 0;
                        $statistics["检修"][$category_name] += $item["count"];
                    }
                }
            }

            # 格式化设备数
            $device = $file->setPath($root_dir)->joins([$year, "{$year}-12", "设备数-种类-供应商.json"])->fromJson();
            foreach ($device as $category_name => $device_item) if ($category_name !== "count") $statistics["设备"][$category_name] = $device_item["count"];

            # 格式化故障类型
            $breakdown_type = $file->setPath($root_dir)->joins([$year, "故障类型.json"])->fromJson();
            foreach ($breakdown_type as $factory_name => $item1) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($item1 as $category_name => $item2) {
                    foreach ($item2 as $entire_model_name => $item3) {
                        foreach ($item3 as $sub_model_name => $item4) {
                            foreach ($item4 as $breakdown_type_name => $breakdown_type_count) {
                                if (!array_key_exists($category_name, $statistics["故障类型"])) $statistics["故障类型"][$category_name] = [];
                                if (!array_key_exists($breakdown_type_name, $statistics["故障类型"][$category_name])) $statistics["故障类型"][$category_name][$breakdown_type_name] = 0;
                                $statistics["故障类型"][$category_name][$breakdown_type_name] += $breakdown_type_count;
                            }
                        }
                    }
                }
            }

            # 现场车间-站场
            $device_station = $file->setPath($root_dir)->joins([$year, "设备总数-现场车间-站场.json"])->fromJson();
            $fixed_station = $file->setPath($root_dir)->joins([$year, "检修数-现场车间-站场.json"])->fromJson();

            return view("Report.qualityYear", [
                "years" => $years,
                "categories_as_json" => TextHelper::toJson($categories),
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "device_station" => $device_station,
                "fixed_station" => $fixed_station,
            ]);
        } catch (Exception $e) {
            return back()->with("info", '暂无数据');
        }
    }

    /**
     * 质量报告 季度
     * @throws Exception
     */
    final public function qualityQuarter()
    {
        try {
            $file = FileSystem::init(__FILE__);
            $root_dir = $file->setPath(storage_path("app/质量报告"))->current();

            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $year = request("year") ?: date("Y");
            $categories = array_flip($file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson());
            $quarters = ["1季度", "2季度", "3季度", "4季度"];
            $months = ["1季度" => [1, 4], "2季度" => [4, 7], "3季度" => [7, 10], "4季度" => [10, 13]];
            $month = intval(date("m"));
            $quarter = request("quarter") ?: $quarters[floor($month / 3) - 1];

            $statistics = [
                "设备" => [],
                "检修" => [],
                "故障类型" => [],
            ];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-检修数.json"])->fromJson();
            foreach ($fixed as $factory_name => $fixed_item) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($fixed_item as $category_name => $item) {
                    if ($category_name !== "count") {
                        if (!array_key_exists($category_name, $statistics["检修"])) $statistics["检修"][$category_name] = 0;
                        $statistics["检修"][$category_name] = $item["count"];
                    }
                }
            }

            # 格式化设备数
            for ($i = $months[$quarter][0]; $i < $months[$quarter][1]; $i++) {
                $I = str_pad(strval($i), 2, '0', STR_PAD_LEFT);
                $device = $file->setPath($root_dir)->joins([$year, "{$year}-{$I}", "设备数-种类-供应商.json"])->fromJson();
                foreach ($device as $category_name => $item)
                    if ($category_name !== "count") {
                        if (!array_key_exists($category_name, $statistics["设备"])) $statistics["设备"][$category_name] = 0;
                        $statistics["设备"][$category_name] = $item["count"];
                    }
            }

            # 格式化故障类型
            $breakdown_type = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-故障类型.json"])->fromJson();
            foreach ($breakdown_type as $factory_name => $item1) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($item1 as $category_name => $item2) {
                    foreach ($item2 as $entire_model_name => $item3) {
                        foreach ($item3 as $sub_model_name => $item4) {
                            foreach ($item4 as $breakdown_type_name => $breakdown_type_count) {
                                if (!array_key_exists($category_name, $statistics["故障类型"])) $statistics["故障类型"][$category_name] = [];
                                if (!array_key_exists($breakdown_type_name, $statistics["故障类型"][$category_name])) $statistics["故障类型"][$category_name][$breakdown_type_name] = 0;
                                $statistics["故障类型"][$category_name][$breakdown_type_name] += $breakdown_type_count;
                            }
                        }
                    }
                }
            }

            $device_station = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-设备总数-现场车间-站场.json"])->fromJson();
            $fixed_station = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-检修数-现场车间-站场.json"])->fromJson();

            return view("Report.qualityQuarter", [
                "year" => $year,
                "years" => $years,
                "quarters" => $quarters,
                "categories_as_json" => TextHelper::toJson($categories),
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "device_station" => $device_station,
                "fixed_station" => $fixed_station,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 质量报告 月度
     * @throws Exception
     */
    final public function qualityMonth()
    {
        try {
            $file = FileSystem::init(__FILE__);
            $year = request("year") ?: date("Y");
            $month = request("month") ?: date("m");
            $root_dir = $file->setPath(storage_path("app/质量报告"))->current();
            $categories = array_flip($file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson());

            # 获取基本信息
            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];

            $statistics = [
                "设备" => [],
                "检修" => [],
                "故障类型" => [],
            ];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "检修数.json"])->fromJson();
            foreach ($fixed as $factory_name => $fixed_item) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($fixed_item as $category_name => $item) {
                    if ($category_name !== "count") {
                        if (!array_key_exists($category_name, $statistics["检修"])) $statistics["检修"][$category_name] = 0;
                        $statistics["检修"][$category_name] = $item["count"];
                    }
                }
            }

            # 格式化设备
            $device = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "设备数-种类-供应商.json"])->fromJson();
            foreach ($device as $category_name => $item) {
                if ($category_name !== "count") {
                    if (!array_key_exists($category_name, $statistics["设备"])) $statistics["设备"][$category_name] = 0;
                    $statistics["设备"][$category_name] = $item["count"];
                }
            }

            # 故障类型
            $breakdown_type = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "故障类型.json"])->fromJson();
            foreach ($breakdown_type as $factory_name => $item1) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($item1 as $category_name => $item2) {
                    foreach ($item2 as $entire_model_name => $item3) {
                        foreach ($item3 as $sub_model_name => $item4) {
                            foreach ($item4 as $breakdown_type_name => $breakdown_type_count) {
                                if (!array_key_exists($category_name, $statistics["故障类型"])) $statistics["故障类型"][$category_name] = [];
                                if (!array_key_exists($breakdown_type_name, $statistics["故障类型"][$category_name])) $statistics["故障类型"][$category_name][$breakdown_type_name] = 0;
                                $statistics["故障类型"][$category_name][$breakdown_type_name] += $breakdown_type_count;
                            }
                        }
                    }
                }
            }

            # 现场车间-站场
            $device_station = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "设备总数-现场车间-站场.json"])->fromJson();
            $fixed_station = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "检修数-现场车间-站场.json"])->fromJson();

            return view("Report.qualityMonth", [
                "years" => $years,
                "months" => $months,
                "categories_as_json" => TextHelper::toJson($categories),
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "device_station" => $device_station,
                "fixed_station" => $fixed_station,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 质量报告 种类 年度
     * @param string $category_unique_code
     * @return Factory|RedirectResponse|View
     * @throws Exception
     */
    final public function qualityCategoryYear(string $category_unique_code)
    {
        $file = FileSystem::init(__FILE__);
        $year = request("year") ?: date("Y");
        $root_dir = $file->setPath(storage_path("app/质量报告"))->current();

        # 获取基本信息
        $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
        $categories = $file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson();

        try {
            $statistics = [];
            $statistic = [
                "设备" => 0,
                "检修" => 0,
                "故障类型" => [],
            ];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "检修数.json"])->fromJson();
            foreach ($fixed as $factory_name => $fixed_item) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                if (array_key_exists($categories[$category_unique_code], $fixed_item)) $statistics[$factory_name]["检修"] = $fixed_item[$categories[$category_unique_code]]["count"];
            }

            # 格式化设备数
            $device = $file->setPath($root_dir)->joins([$year, "{$year}-12", "设备数-供应商-种类.json"])->fromJson();
            foreach ($device as $factory_name => $device_item) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                if ($factory_name !== "count") {
                    if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                    if (array_key_exists($categories[$category_unique_code], $device_item)) $statistics[$factory_name]["设备"] = $device_item[$categories[$category_unique_code]];
                }
            }

            # 格式化故障类型
            $breakdown_type = $file->setPath($root_dir)->joins([$year, "故障类型.json"])->fromJson();
            foreach ($breakdown_type as $factory_name => $item1) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($item1 as $category_name => $item2) {
                    if ($category_name === $categories[$category_unique_code]) {
                        foreach ($item2 as $entire_model_name => $item3) {
                            foreach ($item3 as $sub_model_name => $item4) {
                                foreach ($item4 as $breakdown_type_name => $breakdown_type_count) {
                                    if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                                    if (!array_key_exists($breakdown_type_name, $statistics[$factory_name]["故障类型"])) $statistics[$factory_name]["故障类型"][$breakdown_type_name] = 0;
                                    $statistics[$factory_name]["故障类型"][$breakdown_type_name] = $breakdown_type_count;
                                }
                            }
                        }
                    }
                }
            }

            return view("Report.qualityCategoryYear", [
                "years" => $years,
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "current_category_unique_code" => $category_unique_code,
                "current_category_name" => $categories[$category_unique_code],
            ]);
        } catch (Exception $e) {
            return back()->with("info", '暂无数据');
        }
    }

    /**
     * 质量报告 种类 季度
     * @param string $category_unique_code
     * @return Factory|\Illuminate\Foundation\Application|RedirectResponse|View
     */
    final public function qualityCategoryQuarter(string $category_unique_code)
    {
        try {
            $file = FileSystem::init(__FILE__);
            $root_dir = $file->setPath(storage_path("app/质量报告"))->current();

            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $year = request("year") ?: date("Y");
            $quarters = ["1季度", "2季度", "3季度", "4季度"];
            $months = ["1季度" => [1, 4], "2季度" => [4, 7], "3季度" => [7, 10], "4季度" => [10, 13]];
            $month = request("month") ? intval(request("month")) : intval(date("m"));
            $quarter = request("quarter") ?: $quarters[intval(floor($month / 3))];
            $categories = $file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson();

            $statistics = [];
            $statistic = [
                "设备" => 0,
                "检修" => 0,
                "故障类型" => [],
            ];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-检修数.json"])->fromJson();
            foreach ($fixed as $factory_name => $fixed_item) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                if (array_key_exists($categories[$category_unique_code], $fixed_item)) $statistics[$factory_name]["检修"] = $fixed_item[$categories[$category_unique_code]]["count"];
            }

            # 格式化设备数
            for ($i = $months[$quarter][0]; $i < $months[$quarter][1]; $i++) {
                $I = str_pad(strval($i), 2, '0', STR_PAD_LEFT);
                $device = $file->setPath($root_dir)->joins([$year, "{$year}-{$I}", "设备数-种类-供应商.json"])->fromJson();
                foreach ($device as $category_name => $item)
                    if ($category_name === $categories[$category_unique_code]) {
                        foreach ($item as $factory_name => $item2) {
                            if ($factory_name == 'null' or $factory_name == '') continue;
                            if ($factory_name !== "count") {
                                if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                                $statistics[$factory_name]["设备"] = $item2;
                            }
                        }
                    }
            }

            # 格式化故障类型
            $breakdown_type = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-故障类型.json"])->fromJson();
            foreach ($breakdown_type as $factory_name => $item1) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($item1 as $category_name => $item2) {
                    foreach ($item2 as $entire_model_name => $item3) {
                        foreach ($item3 as $sub_model_name => $item4) {
                            foreach ($item4 as $breakdown_type_name => $breakdown_type_count) {
                                if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                                if ($category_name === $categories[$category_unique_code]) {
                                    if (!array_key_exists($breakdown_type_name, $statistics[$factory_name]["故障类型"])) $statistics[$factory_name]["故障类型"][$breakdown_type_name] = 0;
                                    $statistics[$factory_name]["故障类型"][$breakdown_type_name] += $breakdown_type_count;
                                }
                            }
                        }
                    }
                }
            }

            return view("Report.qualityCategoryQuarter", [
                "year" => $year,
                "years" => $years,
                "quarters" => $quarters,
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "current_category_unique_code" => $category_unique_code,
                "current_category_name" => $categories[$category_unique_code],
                "current_quarter" => $quarter,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 质量报告 种类 月度
     * @param string $category_unique_code
     * @return Factory|\Illuminate\Foundation\Application|RedirectResponse|View
     */
    final public function qualityCategoryMonth(string $category_unique_code)
    {
        try {
            $file = FileSystem::init(__FILE__);
            $year = request("year") ?: date("Y");
            $month = request("month") ?: date("m");
            $root_dir = $file->setPath(storage_path("app/质量报告"))->current();
            $categories = $file->setPath($root_dir)->joins([$year, "种类.json"])->fromJson();

            # 获取基本信息
            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];

            $statistics = [];
            $statistic = [
                "设备" => 0,
                "检修" => 0,
                "故障类型" => [],
            ];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "检修数.json"])->fromJson();
            foreach ($fixed as $factory_name => $fixed_item) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                if (array_key_exists($categories[$category_unique_code], $fixed_item)) $statistics[$factory_name]["检修"] = $fixed_item[$categories[$category_unique_code]]["count"];
            }

            # 格式化设备
            $device = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "设备数-种类-供应商.json"])->fromJson();
            foreach ($device as $category_name => $item) {
                if ($category_name === $categories[$category_unique_code]) {
                    foreach ($item as $factory_name => $item2) {
                        if ($factory_name == 'null' or $factory_name == '') continue;
                        if ($factory_name !== "count") {
                            if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                            $statistics[$factory_name]["设备"] = $item2;
                        }
                    }
                }
            }

            # 故障类型
            $breakdown_type = $file->setPath($root_dir)->joins([$year, "{$year}-{$month}", "故障类型.json"])->fromJson();
            foreach ($breakdown_type as $factory_name => $item1) {
                if ($factory_name == 'null' or $factory_name == '') continue;
                foreach ($item1 as $category_name => $item2) {
                    foreach ($item2 as $entire_model_name => $item3) {
                        foreach ($item3 as $sub_model_name => $item4) {
                            foreach ($item4 as $breakdown_type_name => $breakdown_type_count) {
                                if (!array_key_exists($factory_name, $statistics)) $statistics[$factory_name] = $statistic;
                                if ($category_name === $categories[$category_unique_code]) {
                                    if (!array_key_exists($breakdown_type_name, $statistics[$factory_name]["故障类型"])) $statistics[$factory_name]["故障类型"][$breakdown_type_name] = 0;
                                    $statistics[$factory_name]["故障类型"][$breakdown_type_name] += $breakdown_type_count;
                                }
                            }
                        }
                    }
                }
            }

            return view("Report.qualityCategoryMonth", [
                "years" => $years,
                "months" => $months,
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "current_category_unique_code" => $category_unique_code,
                "current_category_name" => $categories[$category_unique_code],
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 质量报告 现场车间 年度
     * @param string $workshop_name
     * @return Factory|RedirectResponse|View
     * @throws Exception
     */
    final public function qualityWorkshopYear(string $workshop_name)
    {
        $file = FileSystem::init(__FILE__);
        $year = request("year") ?: date("Y");
        $root_dir = $file->setPath(storage_path("app/质量报告"))->current();

        # 获取基本信息
        $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();

        try {
            $statistics = [];

            # 格式化设备数
            $device = $file->setPath($root_dir)->joins([$year, '设备总数-现场车间-站场.json'])->fromJson();
            if (array_key_exists($workshop_name, $device)) $device = $device[$workshop_name]['sub'];
            foreach ($device as $station_name => $count) $statistics[$station_name] = ['设备' => $count, '检修' => 0];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "检修数-现场车间-站场.json"])->fromJson();
            if (array_key_exists($workshop_name, $fixed)) $fixed = $fixed[$workshop_name]['sub'];
            foreach ($fixed as $station_name => $count) $statistics[$station_name]['检修'] = $count;

            return view("Report.qualityWorkshopYear", [
                "years" => $years,
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                'current_workshop_name' => $workshop_name,
            ]);
        } catch (Exception $e) {
            return back()->with("info", '暂无数据');
        }
    }

    /**
     * 质量报告 现场车间 季度
     * @param string $workshop_name
     * @return Factory|RedirectResponse|View
     * @throws Exception
     */
    final public function qualityWorkshopQuarter(string $workshop_name)
    {
        try {
            $file = FileSystem::init(__FILE__);
            $root_dir = $file->setPath(storage_path("app/质量报告"))->current();

            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $year = request("year") ?: date("Y");
            $quarters = ["1季度", "2季度", "3季度", "4季度"];
            $month = request("month") ? intval(request("month")) : intval(date("m"));
            $quarter = request("quarter") ?: $quarters[intval(floor($month / 3))];

            $statistics = [];

            # 格式化设备数
            $device = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-设备总数-现场车间-站场.json"])->fromJson();
            if (array_key_exists($workshop_name, $device)) $device = $device[$workshop_name]['sub'];
            foreach ($device as $station_name => $count) $statistics[$station_name] = ['设备' => $count, '检修' => 0];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "{$year}年 {$quarter}-检修数-现场车间-站场.json"])->fromJson();
            if (array_key_exists($workshop_name, $fixed)) $fixed = $fixed[$workshop_name]['sub'];
            foreach ($fixed as $station_name => $count) $statistics[$station_name]['检修'] = $count;

            return view("Report.qualityWorkshopQuarter", [
                "year" => $year,
                "years" => $years,
                "quarters" => $quarters,
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "current_workshop_name" => $workshop_name,
                "current_quarter" => $quarter,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 质量报告 现场车间 月度
     * @param string $workshop_name
     * @return Factory|RedirectResponse|View
     */
    final public function qualityWorkshopMonth(string $workshop_name)
    {
        try {
            $file = FileSystem::init(__FILE__);
            $year = request("year") ?: date("Y");
            $month = request("month") ?: date("m");
            $root_dir = $file->setPath(storage_path("app/质量报告"))->current();

            # 获取基本信息
            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];

            $statistics = [];

            # 格式化设备数
            $device = $file->setPath($root_dir)->joins([$year, "{$year}-{$months[intval($month) - 1]}", "设备总数-现场车间-站场.json"])->fromJson();
            if (array_key_exists($workshop_name, $device)) $device = $device[$workshop_name]['sub'];
            foreach ($device as $station_name => $count) $statistics[$station_name] = ['设备' => $count, '检修' => 0];

            # 格式化检修数
            $fixed = $file->setPath($root_dir)->joins([$year, "{$year}-{$months[intval($month) - 1]}", "检修数-现场车间-站场.json"])->fromJson();
            if (array_key_exists($workshop_name, $fixed)) $fixed = $fixed[$workshop_name]['sub'];
            foreach ($fixed as $station_name => $count) $statistics[$station_name]['检修'] = $count;

            return view("Report.qualityWorkshopMonth", [
                "years" => $years,
                "months" => $months,
                "statistics" => $statistics,
                "statistics_as_json" => TextHelper::toJson($statistics),
                "current_workshop_name" => $workshop_name,
            ]);
        } catch (Exception $exception) {
            dd($exception->getMessage());
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 质量报告 检修单
     * @return Factory|RedirectResponse|View
     */
    final public function qualityEntireInstance()
    {
        try {
            $file = FileSystem::init(__FILE__);
            $root_dir = storage_path("app/质量报告");
            $year = request("Year", date("Y"));

            $query_condition = QueryFacade::init($root_dir)
                ->setCategoriesWithFile([$year, "种类.json"])
                ->setEntireModelsWithFile([$year, "类型.json"])
                ->setSubModelsWithFile([$year, "型号和子类.json"]);

            if (request('workshop_name')) {
                $scene_workshop_unique_code = DB::table('maintains')
                    ->where('deleted_at', null)
                    ->where('name', request('workshop_name'))
                    ->where('type', 'SCENE_WORKSHOP')
                    ->first();
            }

            $query_condition->make(
                strval(request("category_unique_code")),
                strval(request("entire_model_unique_code")),
                strval(request("sub_model_unique_code")),
                strval(request("factory_name")),
                strval(request("scene_workshop_unique_code", request('workshop_name') ? $scene_workshop_unique_code ? $scene_workshop_unique_code->unique_code : '' : '')),
                strval(request("station_name")),
                strval(request("status_unique_code"))
            );

            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $quarters = ["1季度" => [1, 3], "2季度" => [4, 6], "3季度" => [7, 9], "4季度" => [9, 12]];
            $months = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

            switch (request("type")) {
                case "year":
                default:
                    $origin_at = Carbon::create($year, 1, 1)->startOfYear()->toDateTimeString();
                    $finish_at = Carbon::create($year, 1, 1)->endOfYear()->toDateTimeString();
                    break;
                case "quarter":
                    list($origin_month, $finish_month) = $quarters[request("quarter")];
                    $origin_at = Carbon::create($year, $origin_month, 1)->startOfMonth()->toDateTimeString();
                    $finish_at = Carbon::create(request("month"), $finish_month, 1)->endOfMonth()->toDateTimeString();
                    break;
                case "month":
                    $origin_at = Carbon::create($year, request("month"), 1)->startOfMonth()->toDateTimeString();
                    $finish_at = Carbon::create($year, request("month"), 1)->endOfMonth()->toDateTimeString();
                    break;
            }

            switch (substr($query_condition->get("current_category_unique_code"), 0, 1)) {
                case "S":
                    $entire_instances = DB::table('entire_instances as ei')
                        ->select([
                            'ei.identity_code',
                            'ei.factory_name',
                            'fw.created_at as fw_created_at',
                            'ei.status',
                            'ei.maintain_station_name',
                            'ei.open_direction',
                            'ei.said_rod',
                            'ei.crossroad_number',
                            'ei.line_name',
                            'ei.maintain_location_code',
                            'ei.category_name',
                            'ei.model_name',
                        ])
                        ->join(DB::raw('fix_workflows fw'), 'fw.entire_instance_identity_code', '=', 'ei.identity_code')
                        ->join(DB::raw('entire_models as sm'), 'sm.unique_code', '=', 'ei.model_unique_code')
                        ->join(DB::raw('entire_models as em'), 'em.unique_code', '=', 'sm.parent_unique_code')
                        ->join(DB::raw('categories as c'), 'c.unique_code', '=', 'em.category_unique_code')
                        ->where('fw.deleted_at', null)
                        ->where('sm.deleted_at', null)
                        ->where('em.deleted_at', null)
                        ->where('c.deleted_at', null)
                        ->where('ei.deleted_at', null)
                        ->where('ei.factory_name', '<>', null)
                        ->where('ei.factory_name', '<>', '')
                        ->where('fw.status', 'FIXED')
                        ->whereNotBetween('ei.created_at', [Carbon::now()->startOfMonth()->format('Y-m-d H:i:s'), Carbon::now()->endOfMonth()->format('Y-m-d H:i:s')])
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get('current_category_unique_code'),
                            function ($query) use ($query_condition) {
                                return $query->where('c.unique_code', $query_condition->get('current_category_unique_code'));
                            }
                        )
                        ->when(
                            $query_condition->get("current_entire_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("em.unique_code", $query_condition->get("current_entire_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_sub_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("pm.unique_code", $query_condition->get("current_sub_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->groupBy('ei.factory_name', 'sm.name', 'em.name', 'c.name', 'ei.identity_code')
                        ->paginate();
                    break;
                case "Q":
                    $entire_instances = DB::table('entire_instances as ei')
                        ->select([
                            'ei.factory_name',
                            'sm.name as sm',
                            'em.name as em',
                            'c.name',
                            'ei.identity_code',
                            'fw.created_at as fw_created_at',
                            'ei.status',
                            'ei.maintain_station_name',
                            'ei.open_direction',
                            'ei.said_rod',
                            'ei.crossroad_number',
                            'ei.line_name',
                            'ei.maintain_location_code',
                            'ei.category_name',
                            'ei.model_name',
                        ])
                        ->join(DB::raw('fix_workflows fw'), 'fw.entire_instance_identity_code', '=', 'ei.identity_code')
                        ->join(DB::raw('entire_models as sm'), 'sm.unique_code', '=', 'ei.model_unique_code')
                        ->join(DB::raw('entire_models as em'), 'em.unique_code', '=', 'sm.parent_unique_code')
                        ->join(DB::raw('categories as c'), 'c.unique_code', '=', 'em.category_unique_code')
                        ->where('fw.deleted_at', null)
                        ->where('sm.deleted_at', null)
                        ->where('em.deleted_at', null)
                        ->where('c.deleted_at', null)
                        ->where('ei.deleted_at', null)
                        ->where('ei.factory_name', '<>', null)
                        ->where('ei.factory_name', '<>', '')
                        ->where('fw.status', 'FIXED')
                        ->whereNotBetween('ei.created_at', [Carbon::now()->startOfMonth()->format('Y-m-d H:i:s'), Carbon::now()->endOfMonth()->format('Y-m-d H:i:s')])
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get('current_category_unique_code'),
                            function ($query) use ($query_condition) {
                                return $query->where('c.unique_code', $query_condition->get('current_category_unique_code'));
                            }
                        )
                        ->when(
                            $query_condition->get("current_entire_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("em.unique_code", $query_condition->get("current_entire_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_sub_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("sm.unique_code", $query_condition->get("current_sub_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->groupBy('ei.factory_name', 'sm.name', 'em.name', 'c.name', 'ei.identity_code')
                        ->paginate();
                    break;
                default:
                    $entire_instances = DB::table('entire_instances as ei')
                        ->select([
                            'ei.identity_code',
                            'ei.factory_name',
                            'fw.created_at as fw_created_at',
                            'ei.status',
                            'ei.maintain_station_name',
                            'ei.open_direction',
                            'ei.said_rod',
                            'ei.crossroad_number',
                            'ei.line_name',
                            'ei.maintain_location_code',
                            'ei.category_name',
                            'ei.model_name',
                        ])
                        ->join(DB::raw('fix_workflows fw'), 'fw.entire_instance_identity_code', '=', 'ei.identity_code')
                        ->join(DB::raw('entire_models as sm'), 'sm.unique_code', '=', 'ei.model_unique_code')
                        ->join(DB::raw('entire_models as em'), 'em.unique_code', '=', 'sm.parent_unique_code')
                        ->join(DB::raw('categories as c'), 'c.unique_code', '=', 'em.category_unique_code')
                        ->where('fw.deleted_at', null)
                        ->where('ei.deleted_at', null)
                        ->where('ei.factory_name', '<>', null)
                        ->where('ei.factory_name', '<>', '')
                        ->where('fw.status', 'FIXED')
                        ->whereNotBetween('ei.created_at', [Carbon::now()->startOfMonth()->format('Y-m-d H:i:s'), Carbon::now()->endOfMonth()->format('Y-m-d H:i:s')])
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get('current_category_unique_code'),
                            function ($query) use ($query_condition) {
                                return $query->where('c.unique_code', $query_condition->get('current_category_unique_code'));
                            }
                        )
                        ->when(
                            $query_condition->get("current_entire_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("em.unique_code", $query_condition->get("current_entire_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_sub_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("pm.unique_code", $query_condition->get("current_sub_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->groupBy('ei.factory_name', 'sm.name', 'em.name', 'c.name', 'ei.identity_code')
                        ->paginate();
                    break;
            }

            return view("Report.qualityEntireInstance", [
                "years" => $years,
                "quarters" => $quarters,
                "months" => $months,
                "queryConditions" => $query_condition->toJson(),
                "statuses" => $query_condition->get("statuses"),
                "entireInstances" => $entire_instances,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 年度
     * @throws Exception
     */
    final public function ripeYear()
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file = FileSystem::init(__FILE__);
            $file_dir = storage_path("app/一次过检");

            if (request('download') == '1') {
                # 下载一次过检Excel
                $organization_code = env("ORGANIZATION_NAME");
                $filename = "{$year}年{$organization_code}一次过检.xlsx";
                if (is_file(public_path($filename))) unlink(public_path($filename));
                if (!is_file("{$file_dir}/{$year}/{$filename}")) return "<script>alert('excel文件不存在：{$file_dir}/{$year}/{$filename}');</script>";
                copy("{$file_dir}/{$year}/{$filename}", public_path("{$filename}"));
                return redirect(url("/{$filename}"));
            }

            $years = $file->setPath($file_dir)->joins(["yearList.json"])->fromJson();
            $categories = array_flip($file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson());

            $statistics_with_category = $file->setPath($file_dir)->joins([$year, "年-种类.json"])->fromJson();
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "年-人员.json"])->fromJson();

            return view('Report.ripeYear', [
                'years' => $years,
                'categories' => $categories,
                'categories_as_json' => TextHelper::toJson($categories),
                'statistics_with_category' => $statistics_with_category,
                'statistics_with_category_as_json' => TextHelper::toJson($statistics_with_category),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 季度
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeQuarter()
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file = FileSystem::init(__FILE__);
            $file_dir = storage_path("app/一次过检");

            $years = $file->setPath($file_dir)->joins(["yearList.json"])->fromJson();
            $quarters = ["1季度", "2季度", "3季度", "4季度"];
            $month = intval(date("m"));
            $quarter = request("quarter", $quarters[floor($month / 3) - 1]);
            $categories = array_flip($file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson());

            $statistics_with_category = $file->setPath($file_dir)->joins([$year, "{$quarter}-种类.json"])->fromJson();
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "{$quarter}-人员.json"])->fromJson();

            return view('Report.ripeQuarter', [
                'years' => $years,
                'quarters' => $quarters,
                'categories' => $categories,
                'categories_as_json' => TextHelper::toJson($categories),
                'statistics_with_category' => $statistics_with_category,
                'statistics_with_category_as_json' => TextHelper::toJson($statistics_with_category),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 月度
     * @throws Exception
     */
    final public function ripeMonth()
    {
        try {
            $file = FileSystem::init(__FILE__);
            $year = request("year") ?: date("Y");
            $month = request("month") ?: date("m");
            $file_dir = $file->setPath(storage_path("app/一次过检"))->current();
            $categories = array_flip($file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson());

            # 获取基本信息
            $years = $file->setPath($file_dir)->join("yearList.json")->fromJson();
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];

            $statistics_with_category = $file->setPath($file_dir)->joins([$year, "{$year}-{$month}", "月-种类.json"])->fromJson();
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "{$year}-{$month}", "月-人员.json"])->fromJson();

            return view('Report.ripeMonth', [
                'years' => $years,
                'months' => $months,
                'categories' => $categories,
                'categories_as_json' => TextHelper::toJson($categories),
                'statistics_with_category' => $statistics_with_category,
                'statistics_with_category_as_json' => TextHelper::toJson($statistics_with_category),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 指定种类 年度
     * @param string $category_unique_code
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeCategoryYear(string $category_unique_code)
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file = FileSystem::init(__FILE__);
            $file_dir = storage_path("app/一次过检");

            $years = $file->setPath($file_dir)->joins(["yearList.json"])->fromJson();
            $categories = $file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson();
            $current_category_name = $categories[$category_unique_code];
            $entire_models = $file->setPath($file_dir)->joins([$year, "类型.json"])->fromJson()[$current_category_name];
            $current_work_area = $category_unique_code == 'S03' ? '1' : $category_unique_code == 'Q01' ? '2' : '3';
            $current_work_area_name = $category_unique_code == 'S03' ? '转辙机' : $category_unique_code == 'Q01' ? '继电器' : '综合';


            $statistics_with_entire_model = $file->setPath($file_dir)->joins([$year, "年-类型.json"])->fromJson()[$current_category_name];
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "年-人员.json"])->fromJson()[$current_work_area];

            return view('Report.ripeCategoryYear', [
                'years' => $years,
                'categories' => array_flip($categories),
                'current_category_unique_code' => $category_unique_code,
                'current_category_name' => $current_category_name,
                'current_work_area_name' => $current_work_area_name,
                'categories_as_json' => TextHelper::toJson(array_flip($categories)),
                'entire_models' => array_flip($entire_models),
                'entire_models_as_json' => TextHelper::toJson(array_flip($entire_models)),
                'statistics_with_entire_model' => $statistics_with_entire_model,
                'statistics_with_entire_model_as_json' => TextHelper::toJson($statistics_with_entire_model),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 指定种类 季度
     * @param string $category_unique_code
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeCategoryQuarter(string $category_unique_code)
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file = FileSystem::init(__FILE__);
            $file_dir = storage_path("app/一次过检");

            $years = $file->setPath($file_dir)->joins(["yearList.json"])->fromJson();
            $quarters = ["1季度", "2季度", "3季度", "4季度"];
            $month = intval(date("m"));
            $quarter = request("quarter", $quarters[floor($month / 3) - 1]);
            $categories = $file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson();
            $current_category_name = $categories[$category_unique_code];
            $entire_models = $file->setPath($file_dir)->joins([$year, "类型.json"])->fromJson()[$current_category_name];
            $current_work_area = $category_unique_code == 'S03' ? '1' : $category_unique_code == 'Q01' ? '2' : '3';
            $current_work_area_name = $category_unique_code == 'S03' ? '转辙机' : $category_unique_code == 'Q01' ? '继电器' : '综合';

            $statistics_with_entire_models = $file->setPath($file_dir)->joins([$year, "{$quarter}-类型.json"])->fromJson()[$current_category_name];
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "{$quarter}-人员.json"])->fromJson()[$current_work_area];

            return view('Report.ripeCategoryQuarter', [
                'years' => $years,
                'quarters' => $quarters,
                'categories' => array_flip($categories),
                'categories_as_json' => TextHelper::toJson(array_flip($categories)),
                'current_category_unique_code' => $category_unique_code,
                'current_category_name' => $current_category_name,
                'current_work_area_name' => $current_work_area_name,
                'entire_models' => array_flip($entire_models),
                'entire_models_as_json' => TextHelper::toJson(array_flip($entire_models)),
                'statistics_with_entire_models' => $statistics_with_entire_models,
                'statistics_with_entire_models_as_json' => TextHelper::toJson($statistics_with_entire_models),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 指定种类 月度
     * @param string $category_unique_code
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeCategoryMonth(string $category_unique_code)
    {
        try {
            $file = FileSystem::init(__FILE__);
            $year = request("year") ?: date("Y");
            $month = request("month") ?: date("m");
            $file_dir = $file->setPath(storage_path("app/一次过检"))->current();
            $categories = $file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson();
            $current_category_name = $categories[$category_unique_code];
            $entire_models = $file->setPath($file_dir)->joins([$year, "类型.json"])->fromJson()[$current_category_name];
            $current_work_area = $category_unique_code == 'S03' ? '1' : $category_unique_code == 'Q01' ? '2' : '3';
            $current_work_area_name = $category_unique_code == 'S03' ? '转辙机' : $category_unique_code == 'Q01' ? '继电器' : '综合';

            # 获取基本信息
            $years = $file->setPath($file_dir)->join("yearList.json")->fromJson();
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];

            $statistics_with_entire_models = $file->setPath($file_dir)->joins([$year, "{$year}-{$month}", "月-类型.json"])->fromJson()[$current_category_name];
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "{$year}-{$month}", "月-人员.json"])->fromJson()[$current_work_area];

            return view('Report.ripeCategoryMonth', [
                'years' => $years,
                'months' => $months,
                'categories' => array_flip($categories),
                'categories_as_json' => TextHelper::toJson(array_flip($categories)),
                'current_category_unique_code' => $category_unique_code,
                'current_category_name' => $current_category_name,
                'current_work_area_name' => $current_work_area_name,
                'entire_models' => array_flip($entire_models),
                'entire_models_as_json' => TextHelper::toJson(array_flip($entire_models)),
                'statistics_with_entire_models' => $statistics_with_entire_models,
                'statistics_with_entire_models_as_json' => TextHelper::toJson($statistics_with_entire_models),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 指定类型 年度
     * @param string $entire_model_unique_code
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeEntireModelYear(string $entire_model_unique_code)
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file = FileSystem::init(__FILE__);
            $file_dir = storage_path("app/一次过检");

            $years = $file->setPath($file_dir)->joins(["yearList.json"])->fromJson();
            $categories = $file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson();
            $category_unique_code = substr($entire_model_unique_code, 0, 3);
            $current_category_name = $categories[$category_unique_code];
            $entire_models = $file->setPath($file_dir)->joins([$year, "类型.json"])->fromJson()[$current_category_name];
            $current_entire_model_name = $entire_models[$entire_model_unique_code];
            $sub_models = $file->setPath($file_dir)->joins([$year, "型号和子类.json"])->fromJson()[$current_entire_model_name];
            $current_work_area = $category_unique_code == 'S03' ? '1' : $category_unique_code == 'Q01' ? '2' : '3';
            $current_work_area_name = $category_unique_code == 'S03' ? '转辙机' : $category_unique_code == 'Q01' ? '继电器' : '综合';

            $statistics_with_sub_model = $file->setPath($file_dir)->joins([$year, "年-型号和子类.json"])->fromJson()[$current_entire_model_name];
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "年-人员.json"])->fromJson()[$current_work_area];

            return view('Report.ripeEntireModelYear', [
                'years' => $years,
                'categories' => array_flip($categories),
                'current_category_unique_code' => $category_unique_code,
                'current_category_name' => $current_category_name,
                'current_work_area_name' => $current_work_area_name,
                'categories_as_json' => TextHelper::toJson(array_flip($categories)),
                'entire_models' => array_flip($entire_models),
                'entire_models_as_json' => TextHelper::toJson(array_flip($entire_models)),
                'current_entire_model_unique_code' => $entire_model_unique_code,
                'current_entire_model_name' => $current_entire_model_name,
                'sub_models' => array_flip($sub_models),
                'sub_models_as_json' => TextHelper::toJson(array_flip($sub_models)),
                'statistics_with_sub_model' => $statistics_with_sub_model,
                'statistics_with_sub_model_as_json' => TextHelper::toJson($statistics_with_sub_model),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 指定类型 季度
     * @param string $entire_model_unique_code
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeEntireModelQuarter(string $entire_model_unique_code)
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file = FileSystem::init(__FILE__);
            $file_dir = storage_path("app/一次过检");

            $years = $file->setPath($file_dir)->joins(["yearList.json"])->fromJson();
            $quarters = ["1季度", "2季度", "3季度", "4季度"];
            $month = intval(date("m"));
            $quarter = request("quarter", $quarters[floor($month / 3) - 1]);
            $category_unique_code = substr($entire_model_unique_code, 0, 3);
            $categories = $file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson();
            $current_category_name = $categories[$category_unique_code];
            $entire_models = $file->setPath($file_dir)->joins([$year, "类型.json"])->fromJson()[$current_category_name];
            $current_entire_model_name = $entire_models[$entire_model_unique_code];
            $sub_models = $file->setPath($file_dir)->joins([$year, "型号和子类.json"])->fromJson()[$current_entire_model_name];
            $current_work_area = $category_unique_code == 'S03' ? '1' : $category_unique_code == 'Q01' ? '2' : '3';
            $current_work_area_name = $category_unique_code == 'S03' ? '转辙机' : $category_unique_code == 'Q01' ? '继电器' : '综合';

            $statistics_with_sub_models = $file->setPath($file_dir)->joins([$year, "{$quarter}-型号和子类.json"])->fromJson()[$current_entire_model_name];
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "{$quarter}-人员.json"])->fromJson()[$current_work_area];

            return view('Report.ripeEntireModelQuarter', [
                'years' => $years,
                'quarters' => $quarters,
                'categories' => array_flip($categories),
                'categories_as_json' => TextHelper::toJson(array_flip($categories)),
                'current_category_unique_code' => $category_unique_code,
                'current_category_name' => $current_category_name,
                'current_work_area_name' => $current_work_area_name,
                'entire_models' => array_flip($entire_models),
                'entire_models_as_json' => TextHelper::toJson(array_flip($entire_models)),
                'current_entire_model_unique_code' => $entire_model_unique_code,
                'current_entire_model_name' => $current_entire_model_name,
                'sub_models' => array_flip($sub_models),
                'sub_model_as_json' => TextHelper::toJson(array_flip($sub_models)),
                'statistics_with_sub_models' => $statistics_with_sub_models,
                'statistics_with_sub_models_as_json' => TextHelper::toJson($statistics_with_sub_models),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 指定类型 月度
     * @param string $entire_model_unique_code
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeEntireModelMonth(string $entire_model_unique_code)
    {
        try {
            $file = FileSystem::init(__FILE__);
            $year = request("year") ?: date("Y");
            $month = request("month") ?: date("m");
            $file_dir = $file->setPath(storage_path("app/一次过检"))->current();
            $categories = $file->setPath($file_dir)->joins([$year, "种类.json"])->fromJson();
            $category_unique_code = substr($entire_model_unique_code, 0, 3);
            $current_category_name = $categories[$category_unique_code];
            $entire_models = $file->setPath($file_dir)->joins([$year, "类型.json"])->fromJson()[$current_category_name];
            $current_entire_model_name = $entire_models[$entire_model_unique_code];
            $sub_models = $file->setPath($file_dir)->joins([$year, "型号和子类.json"])->fromJson()[$current_entire_model_name];
            $current_work_area = $category_unique_code == 'S03' ? '1' : $category_unique_code == 'Q01' ? '2' : '3';
            $current_work_area_name = $category_unique_code == 'S03' ? '转辙机' : $category_unique_code == 'Q01' ? '继电器' : '综合';

            # 获取基本信息
            $years = $file->setPath($file_dir)->join("yearList.json")->fromJson();
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];

            $statistics_with_sub_models = $file->setPath($file_dir)->joins([$year, "{$year}-{$month}", "月-类型.json"])->fromJson()[$current_category_name];
            $statistics_with_account = $file->setPath($file_dir)->joins([$year, "{$year}-{$month}", "月-人员.json"])->fromJson()[$current_work_area];

            return view('Report.ripeEntireModelMonth', [
                'years' => $years,
                'months' => $months,
                'categories' => array_flip($categories),
                'categories_as_json' => TextHelper::toJson(array_flip($categories)),
                'current_category_unique_code' => $category_unique_code,
                'current_category_name' => $current_category_name,
                'current_work_area_name' => $current_work_area_name,
                'entire_models' => array_flip($entire_models),
                'entire_models_as_json' => TextHelper::toJson(array_flip($entire_models)),
                'current_entire_model_unique_code' => $entire_model_unique_code,
                'current_entire_model_name' => $current_entire_model_name,
                'sub_models' => array_flip($sub_models),
                'sub_models_as_json' => TextHelper::toJson(array_flip($sub_models)),
                'statistics_with_sub_models' => $statistics_with_sub_models,
                'statistics_with_sub_models_as_json' => TextHelper::toJson($statistics_with_sub_models),
                'statistics_with_account' => $statistics_with_account,
                'statistics_with_account_as_json' => TextHelper::toJson($statistics_with_account),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 一次过检 设备列表
     * @return Factory|View
     * @throws Exception
     */
    final public function ripeEntireInstance()
    {
        try {
            $file = FileSystem::init(__FILE__);
            $root_dir = storage_path("app/一次过检");
            $year = request("Year", date("Y"));

            $query_condition = QueryFacade::init($root_dir)
                ->setCategoriesWithFile([$year, "种类.json"])
                ->setEntireModelsWithFile([$year, "类型.json"])
                ->setSubModelsWithFile([$year, "型号和子类.json"]);

            $query_condition->make(
                strval(request("category_unique_code")),
                strval(request("entire_model_unique_code")),
                strval(request("sub_model_unique_code")),
                strval(request("factory_name")),
                strval(request("scene_workshop_unique_code")),
                strval(request("station_name")),
                strval(request("status_unique_code"))
            );

            $years = $file->setPath($root_dir)->join("yearList.json")->fromJson();
            $quarters = ["1季度" => [1, 3], "2季度" => [4, 6], "3季度" => [7, 9], "4季度" => [9, 12]];
            $months = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

            switch (request("type")) {
                case "year":
                default:
                    $origin_at = Carbon::create($year, 1, 1)->startOfYear()->toDateTimeString();
                    $finish_at = Carbon::create($year, 1, 1)->endOfYear()->toDateTimeString();
                    break;
                case "quarter":
                    list($origin_month, $finish_month) = $quarters[request("quarter")];
                    $origin_at = Carbon::create($year, $origin_month, 1)->startOfMonth()->toDateTimeString();
                    $finish_at = Carbon::create(request("month"), $finish_month, 1)->endOfMonth()->toDateTimeString();
                    break;
                case "month":
                    $origin_at = Carbon::create($year, request("month"), 1)->startOfMonth()->toDateTimeString();
                    $finish_at = Carbon::create($year, request("month"), 1)->endOfMonth()->toDateTimeString();
                    break;
            }

            switch (substr($query_condition->get("current_category_unique_code"), 0, 1)) {
                case "S":
                    $entire_instances = DB::table("fix_workflow_processes as fwp")
                        ->distinct()
                        ->select([
                            "fw.serial_number",
                            "ei.identity_code",
                            "ei.factory_name",
                            "fw.created_at as fw_created_at",
                            "ei.status",
                            "ei.maintain_station_name",
                            "ei.open_direction",
                            "ei.said_rod",
                            "ei.crossroad_number",
                            "ei.line_name",
                            "ei.maintain_location_code",
                            "ei.category_name",
                            "ei.model_name",
                        ])
                        ->join(DB::raw("fix_workflows fw"), "fw.serial_number", "=", "fwp.fix_workflow_serial_number")
                        ->join(DB::raw("entire_instances ei"), "ei.identity_code", "=", "fw.entire_instance_identity_code")
                        ->join(DB::raw("part_instances pi"), "pi.entire_instance_identity_code", "=", "ei.identity_code")
                        ->join(DB::raw("part_models pm"), "pm.unique_code", "=", "pi.part_model_unique_code")
                        ->join(DB::raw("entire_models em"), "em.unique_code", "=", "pm.entire_model_unique_code")
                        ->join(DB::raw("categories c"), "c.unique_code", "=", "ei.category_unique_code")
                        ->where("fwp.stage", "FIX_AFTER")
                        ->where("fw.status", "FIXED")
                        ->whereBetween("fw.created_at", [$origin_at, $finish_at])
                        ->where("fwp.deleted_at", null)
                        ->where("ei.deleted_at", null)
                        ->where("c.deleted_at", null)
                        ->where("em.deleted_at", null)
                        ->where("pm.deleted_at", null)
                        ->groupBy("fwp.serial_number")
                        ->having(DB::raw("count(fwp.serial_number)"), 1)
                        ->where("ei.category_unique_code", $query_condition->get("current_category_unique_code"))
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_entire_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("em.unique_code", $query_condition->get("current_entire_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_sub_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("pm.unique_code", $query_condition->get("current_sub_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->paginate();
                    break;
                case "Q":
                    $entire_instances = DB::table("fix_workflow_processes as fwp")
                        ->distinct()
                        ->select([
                            "fw.serial_number",
                            "ei.identity_code",
                            "ei.factory_name",
                            "fw.created_at as fw_created_at",
                            "ei.status",
                            "ei.maintain_station_name",
                            "ei.open_direction",
                            "ei.said_rod",
                            "ei.crossroad_number",
                            "ei.line_name",
                            "ei.maintain_location_code",
                            "ei.category_name",
                            "ei.model_name",
                        ])
                        ->join(DB::raw("fix_workflows fw"), "fw.serial_number", "=", "fwp.fix_workflow_serial_number")
                        ->join(DB::raw("entire_instances ei"), "ei.identity_code", "=", "fw.entire_instance_identity_code")
                        ->join(DB::raw("categories c"), "c.unique_code", "=", "ei.category_unique_code")
                        ->join(DB::raw("entire_models sm"), "sm.unique_code", "=", "ei.entire_model_unique_code")
                        ->join(DB::raw("entire_models em"), "em.unique_code", "=", "sm.parent_unique_code")
                        ->where("fwp.stage", "FIX_AFTER")
                        ->where("fw.status", "FIXED")
                        ->whereBetween("fw.created_at", [$origin_at, $finish_at])
                        ->where("fwp.deleted_at", null)
                        ->where("ei.deleted_at", null)
                        ->where("c.deleted_at", null)
                        ->where("em.deleted_at", null)
                        ->where("sm.deleted_at", null)
                        ->groupBy("fwp.serial_number")
                        ->having(DB::raw("count(fwp.serial_number)"), 1)
                        ->where("ei.category_unique_code", $query_condition->get("current_category_unique_code"))
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_entire_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("em.unique_code", $query_condition->get("current_entire_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_sub_model_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->where("sm.unique_code", $query_condition->get("current_sub_model_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->paginate();
                    break;
                default:
                    $fix_workflow_serial_numbers = DB::table("fix_workflow_processes as fwp")
                        ->distinct()
                        ->select(["fw.serial_number"])
                        ->join(DB::raw("fix_workflows fw"), "fw.serial_number", "=", "fwp.fix_workflow_serial_number")
                        ->join(DB::raw("entire_instances ei"), "ei.identity_code", "=", "fw.entire_instance_identity_code")
                        ->where("fw.deleted_at", null)
                        ->where("fw.status", "FIXED")
                        ->whereBetween("fw.created_at", [$origin_at, $finish_at])
                        ->where("ei.deleted_at", null)
                        ->where("ei.status", "<>", "SCRAP")
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->pluck("fw.serial_number");

                    $entire_instances = DB::table("fix_workflow_processes as fwp")
                        ->distinct()
                        ->select([
                            "fw.serial_number",
                            "fw.entire_instance_identity_code as identity_code",
                            "ei.factory_name",
                            "fw.created_at as fw_created_at",
                            "ei.status",
                            "ei.maintain_station_name",
                            "ei.open_direction",
                            "ei.said_rod",
                            "ei.crossroad_number",
                            "ei.line_name",
                            "ei.maintain_location_code",
                            "ei.category_name",
                            "ei.model_name",
                        ])
                        ->join(DB::raw("fix_workflows fw"), "fw.serial_number", "=", "fwp.fix_workflow_serial_number")
                        ->join(DB::raw("entire_instances ei"), "ei.identity_code", "=", "fw.entire_instance_identity_code")
                        ->where("fw.deleted_at", null)
                        ->where("fw.status", "FIXED")
                        ->whereBetween("fw.created_at", [$origin_at, $finish_at])
                        ->where("ei.deleted_at", null)
                        ->where("ei.status", "<>", "SCRAP")
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->whereIn("fw.serial_number", $fix_workflow_serial_numbers)
                        ->limit(15)->offset((request('page', 1) - 1) * 15)->get();

                    $entire_instances = new LengthAwarePaginator(
                        $entire_instances,
                        count($fix_workflow_serial_numbers),
                        15,
                        request('page', 1),
                        ['path' => url('/query'), 'pageName' => 'page',]
                    );
                    break;
            }

            return view("Report.ripeEntireInstance", [
                "years" => $years,
                "quarters" => $quarters,
                "months" => $months,
                "queryConditions" => $query_condition->toJson(),
                "statuses" => $query_condition->get("statuses"),
                "entireInstances" => $entire_instances,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 临时生产任务（全部）
     */
    final public function getTemporaryTaskProductionMain()
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file_dir = storage_path("app/临时检修任务/{$year}");

            if (request('download') == '1') {
                $filename = "{$year}年{$this->_organizationName}临时生产任务统计";
                # 文件复制式
                if (is_file(public_path("{$filename}.xlsx"))) unlink(public_path("{$filename}.xlsx"));
                if (!is_file("{$file_dir}/{$filename}.xlsx")) return "<script>alert('excel文件不存在：{$file_dir}/{$filename}.xlsx');</script>";
                copy("{$file_dir}/{$filename}.xlsx", public_path("{$filename}.xlsx"));
                return redirect(url("/{$filename}.xlsx"));
            }

            $ttpm_date_list = is_file(storage_path('app/临时生产任务/dateList.json')) ? Texthelper::parseJson(file_get_contents(storage_path('app/临时生产任务/dateList.json'))) : [];

            # 获取种类统计
            $ttpm_categories = TextHelper::parseJson(file_get_contents("{$file_dir}/种类.json"));
            $ttpm_categories_flip = array_flip($ttpm_categories);
            $ttpm_mission_with_year = json_decode(file_get_contents("{$file_dir}/任务-种类.json"), true);
            $ttpm_fixed_with_year = json_decode(file_get_contents("{$file_dir}/检修-种类.json"), true);
            $ttpm_mission_with_month = [];
            $ttpm_fixed_with_month = [];
            for ($i = 1; $i < 13; $i++) {
                $m = str_pad(strval($i), 2, '0', STR_PAD_LEFT);
                $ttpm_mission_with_month[] = json_decode(file_get_contents("{$file_dir}/{$year}-{$m}/任务-种类.json"), true);
                $ttpm_fixed_with_month[] = json_decode(file_get_contents("{$file_dir}/{$year}-{$m}/检修-种类.json"), true);
            }

            return view("Report.TemporaryTask.Production.Main.index", [
                'year' => $year,
                'date' => request('date', Carbon::now()->format('Y-m')),
                'ttpm_date_list' => $ttpm_date_list,
                'ttpm_categories' => $ttpm_categories,
                'ttpm_categories_flip' => $ttpm_categories_flip,
                'ttpm_categories_flip_as_json' => json_encode($ttpm_categories_flip),
                'ttpm_mission_with_year' => $ttpm_mission_with_year,
                'ttpm_fixed_with_year' => $ttpm_fixed_with_year,
                'ttpm_mission_with_month' => $ttpm_mission_with_month,
                'ttpm_fixed_with_month' => $ttpm_fixed_with_month,
                'ttpm_mission_with_year_as_json' => json_encode($ttpm_mission_with_year),
                'ttpm_fixed_with_year_as_json' => json_encode($ttpm_fixed_with_year),
                'ttpm_mission_with_month_as_json' => json_encode($ttpm_mission_with_month),
                'ttpm_fixed_with_month_as_json' => json_encode($ttpm_fixed_with_month),
            ]);
        } catch (\Exception $e) {
            return back()->with('danger', '暂无任务');
        }
    }

    /**
     * 临时生产任务 指定种类
     */
    final public function getTemporaryTaskProductionMainWithCategory(string $category_unique_code)
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file_dir = storage_path("app/临时检修任务/{$year}");

            if (request('download') == '1') {
                $filename = "{$year}年{$this->_organizationName}临时生产任务统计";
                # 文件复制式
                if (is_file(public_path("{$filename}.xlsx"))) unlink(public_path("{$filename}.xlsx"));
                if (!is_file("{$file_dir}/{$filename}.xlsx")) return "<script>alert('excel文件不存在：{$file_dir}/{$filename}.xlsx');</script>";
                copy("{$file_dir}/{$filename}.xlsx", public_path("{$filename}.xlsx"));
                return redirect(url("/{$filename}.xlsx"));
            }

            $ttpm_date_list = is_file(storage_path('app/临时生产任务/dateList.json')) ? Texthelper::parseJson(file_get_contents(storage_path('app/临时生产任务/dateList.json'))) : [];

            # 获取种类
            $ttpm_categories = json_decode(file_get_contents("{$file_dir}/种类.json"), true);
            $ttpm_categories_flip = array_flip($ttpm_categories);
            $current_category_name = $ttpm_categories[$category_unique_code];

            # 获取类型统计
            $ttpm_entire_models = json_decode(file_get_contents("{$file_dir}/类型-种类.json"), true)[$current_category_name];
            $ttpm_entire_models_flip = array_flip($ttpm_entire_models);
            $ttpm_mission_with_year = json_decode(file_get_contents("{$file_dir}/任务-类型.json"), true);
            $ttpm_fixed_with_year = json_decode(file_get_contents("{$file_dir}/检修-类型.json"), true);
            $ttpm_mission_with_month = [];
            $ttpm_fixed_with_month = [];
            for ($i = 1; $i < 13; $i++) {
                $m = str_pad(strval($i), 2, '0', STR_PAD_LEFT);
                $ttpm_mission_with_month[] = json_decode(file_get_contents("{$file_dir}/{$year}-{$m}/任务-类型.json"), true);
                $ttpm_fixed_with_month[] = json_decode(file_get_contents("{$file_dir}/{$year}-{$m}/检修-类型.json"), true);
            }

            return view("Report.TemporaryTask.Production.Main.withCategory", [
                'year' => $year,
                'date' => request('date', Carbon::now()->format('Y-m')),
                'ttpm_date_list' => $ttpm_date_list,
                'ttpm_categories' => $ttpm_categories,
                'ttpm_categories_flip' => $ttpm_categories_flip,
                'ttpm_categories_flip_as_json' => json_encode($ttpm_categories_flip),
                'current_category_name' => $current_category_name,
                'current_category_unique_code' => $category_unique_code,
                'ttpm_entire_models' => $ttpm_entire_models,
                'ttpm_entire_models_flip' => $ttpm_entire_models_flip,
                'ttpm_entire_models_flip_as_json' => json_encode($ttpm_entire_models_flip),
                'ttpm_mission_with_year' => $ttpm_mission_with_year,
                'ttpm_fixed_with_year' => $ttpm_fixed_with_year,
                'ttpm_mission_with_month' => $ttpm_mission_with_month,
                'ttpm_fixed_with_month' => $ttpm_fixed_with_month,
                'ttpm_mission_with_year_as_json' => json_encode($ttpm_mission_with_year),
                'ttpm_fixed_with_year_as_json' => json_encode($ttpm_fixed_with_year),
                'ttpm_mission_with_month_as_json' => json_encode($ttpm_mission_with_month),
                'ttpm_fixed_with_month_as_json' => json_encode($ttpm_fixed_with_month),
            ]);
        } catch (\Exception $e) {
            return back()->with('danger', '暂无任务');
        }
    }

    /**
     * 临时生产任务 指定类型
     */
    final public function getTemporaryTaskProductionMainWithEntireModel(string $entire_model_unique_code)
    {
        $current_category_unique_code = substr($entire_model_unique_code, 0, 3);
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $file_dir = storage_path("app/临时检修任务/{$year}");

            if (request('download') == '1') {
                $filename = "{$year}年{$this->_organizationName}临时生产任务统计";
                # 文件复制式
                if (is_file(public_path("{$filename}.xlsx"))) unlink(public_path("{$filename}.xlsx"));
                if (!is_file("{$file_dir}/{$filename}.xlsx")) return "<script>alert('excel文件不存在：{$file_dir}/{$filename}.xlsx');</script>";
                copy("{$file_dir}/{$filename}.xlsx", public_path("{$filename}.xlsx"));
                return redirect(url("/{$filename}.xlsx"));
            }

            $ttpm_date_list = is_file(storage_path('app/临时生产任务/dateList.json')) ? Texthelper::parseJson(file_get_contents(storage_path('app/临时生产任务/dateList.json'))) : [];

            # 获取种类
            $ttpm_categories = json_decode(file_get_contents("{$file_dir}/种类.json"), true);
            $ttpm_categories_flip = array_flip($ttpm_categories);
            $current_category_name = $ttpm_categories[$current_category_unique_code];

            # 获取类型
            $ttpm_entire_models = json_decode(file_get_contents("{$file_dir}/类型-种类.json"), true)[$current_category_name];
            $ttpm_entire_models_flip = array_flip($ttpm_entire_models);
            $current_entire_model_name = $ttpm_entire_models[$entire_model_unique_code];

            # 获取子类和型号统计
            $ttpm_sub_models = json_decode(file_get_contents("{$file_dir}/子类和型号-类型.json"), true)[$current_entire_model_name];
            $ttpm_sub_models_flip = array_flip($ttpm_sub_models);
            $ttpm_mission_with_year = json_decode(file_get_contents("{$file_dir}/任务-子类和型号.json"), true);
            $ttpm_fixed_with_year = json_decode(file_get_contents("{$file_dir}/检修-子类和型号.json"), true);
            $ttpm_mission_with_month = [];
            $ttpm_fixed_with_month = [];
            for ($i = 1; $i < 13; $i++) {
                $m = str_pad(strval($i), 2, '0', STR_PAD_LEFT);
                $ttpm_mission_with_month[] = json_decode(file_get_contents("{$file_dir}/{$year}-{$m}/任务-子类和型号.json"), true);
                $ttpm_fixed_with_month[] = json_decode(file_get_contents("{$file_dir}/{$year}-{$m}/检修-子类和型号.json"), true);
            }

            return view("Report.TemporaryTask.Production.Main.withCategory", [
                'year' => $year,
                'date' => request('date', Carbon::now()->format('Y-m')),
                'ttpm_date_list' => $ttpm_date_list,
                'ttpm_categories' => $ttpm_categories,
                'ttpm_categories_flip' => $ttpm_categories_flip,
                'ttpm_categories_flip_as_json' => json_encode($ttpm_categories_flip),
                'current_category_name' => $current_category_name,
                'current_category_unique_code' => $current_category_unique_code,
                'ttpm_entire_models' => $ttpm_entire_models,
                'ttpm_entire_models_flip' => $ttpm_entire_models_flip,
                'ttpm_entire_models_flip_as_json' => json_encode($ttpm_entire_models_flip),
                'current_entire_model_name' => $current_entire_model_name,
                'current_entire_unique_code' => $entire_model_unique_code,
                'ttpm_sub_models' => $ttpm_sub_models,
                'ttpm_sub_models_flip' => $ttpm_sub_models_flip,
                'ttpm_sub_models_flip_as_json' => json_encode($ttpm_sub_models_flip),
                'ttpm_mission_with_year' => $ttpm_mission_with_year,
                'ttpm_fixed_with_year' => $ttpm_fixed_with_year,
                'ttpm_mission_with_month' => $ttpm_mission_with_month,
                'ttpm_fixed_with_month' => $ttpm_fixed_with_month,
                'ttpm_mission_with_year_as_json' => json_encode($ttpm_mission_with_year),
                'ttpm_fixed_with_year_as_json' => json_encode($ttpm_fixed_with_year),
                'ttpm_mission_with_month_as_json' => json_encode($ttpm_mission_with_month),
                'ttpm_fixed_with_month_as_json' => json_encode($ttpm_fixed_with_month),
            ]);
        } catch (\Exception $e) {
            return back()->with('danger', '暂无任务');
        }
    }

    /**
     * 周期修（全部）
     */
    final public function cycleFix()
    {
        try {
            $a = explode('-', request('date'));
            if (count($a) == 2) {
                $year = Carbon::createFromFormat('Y-m', request('date', date('Y-m')))->year;
            } else {
                $year = request('date', date("Y"));
            }

            $fileDir = storage_path("app/周期修/{$year}");

            if (request('download') == '1') {
                $filename = "{$year}年{$this->_organizationName}周期修统计";
                # 文件复制式
                if (is_file(public_path("{$filename}.xlsx"))) unlink(public_path("{$filename}.xlsx"));
                if (!is_file("{$fileDir}/{$filename}.xlsx")) return "<script>alert('excel文件不存在：{$fileDir}/{$filename}.xlsx');</script>";
                copy("{$fileDir}/{$filename}.xlsx", public_path("{$filename}.xlsx"));
                return redirect(url("/{$filename}.xlsx"));
            }
            if (request('download') == '2') {
                $filename = "{$year}年{$this->_organizationName}人员工作量统计";
                # 文件复制式
                if (is_file(public_path("{$filename}.xlsx"))) unlink(public_path("{$filename}.xlsx"));
                if (!is_file("{$fileDir}/{$filename}.xlsx")) return "<script>alert('excel文件不存在');</script>";
                copy("{$fileDir}/{$filename}.xlsx", public_path("{$filename}.xlsx"));
                return redirect(url("/{$filename}.xlsx"));
            }

            $cycleFixDateList = is_file(storage_path('app/周期修/dateList.json')) ? Texthelper::parseJson(file_get_contents(storage_path('app/周期修/dateList.json'))) : [];

            # 根据种类统计
            $cycleFixCategories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $missionWithCategoryAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-任务-种类.json"));
            $fixedWithCategoryAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-完成-种类.json"));
            $realWithCategoryAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-实际-种类.json"));
            $planWithCategoryAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-计划.json"));
            $planWithCategoryAsColumnSerial = [];
            foreach ($planWithCategoryAsColumn as $categoryName => $item) $planWithCategoryAsColumnSerial[$categoryName] = $item['count'];

            $missionWithCategoryAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-任务-种类.json"));
            $fixedWithCategoryAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-完成-种类.json"));
            $realWithCategoryAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-实际-种类.json"));
            $planWithCategoryAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-计划.json"))['statistics'];

            $missionWithCategoryAsMonth = [];
            $fixedWithCategoryAsMonth = [];
            $realWithCategoryAsMonth = [];
            $planWithCategoryAsMonth = [];
            for ($m = 1; $m <= 12; $m++) {
                $m = str_pad($m, 2, '0', STR_PAD_LEFT);
                $missionWithCategoryAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/任务-种类.json"));
                $fixedWithCategoryAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/完成-种类.json"));
                $realWithCategoryAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/实际-种类.json"));
                $planWithCategoryAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/计划.json"));
            }

            # 根据人员统计
            $accounts = TextHelper::parseJson(file_get_contents("{$fileDir}/人员.json"));
            $statisticsAsAccount = TextHelper::parseJson(file_get_contents("{$fileDir}/行-人员-计划.json"));
            $statisticsWithMonthAsAccount = [];
            for ($i = 1; $i <= 12; $i++) {
                $month = str_pad($i, 2, '0', STR_PAD_LEFT);
                $statisticsWithMonthAsAccount[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$month}/行-人员-计划.json"));
            }

            return view("Report.cycleFix", [
                'year' => $year,
                'date' => request('date', Carbon::now()->format('Y-m')),
                'cycleFixDateList' => $cycleFixDateList,
                'cycleFixCategories' => $cycleFixCategories,
                'cycleFixCategoryAsNames' => TextHelper::toJson(array_values($cycleFixCategories)),
                'missionWithCategoryAsColumn' => $missionWithCategoryAsColumn,
                'fixedWithCategoryAsColumn' => $fixedWithCategoryAsColumn,
                'realWithCategoryAsColumn' => $realWithCategoryAsColumn,
                'planWithCategoryAsColumn' => $planWithCategoryAsColumnSerial,
                'missionWithCategoryAsRow' => $missionWithCategoryAsRow,
                'fixedWithCategoryAsRow' => $fixedWithCategoryAsRow,
                'realWithCategoryAsRow' => $realWithCategoryAsRow,
                'planWithCategoryAsRow' => $planWithCategoryAsRow,
                'missionWithCategoryAsMonth' => $missionWithCategoryAsMonth,
                'fixedWithCategoryAsMonth' => $fixedWithCategoryAsMonth,
                'realWithCategoryAsMonth' => $realWithCategoryAsMonth,
                'planWithCategoryAsMonth' => $planWithCategoryAsMonth,
                'accounts' => $accounts,
                'statisticsAsAccount' => $statisticsAsAccount,
                'statisticsWithMonthAsAccount' => $statisticsWithMonthAsAccount,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 周期修（种类视角）
     * @param string $categoryUniqueCode
     * @return mixed
     */
    final public function cycleFixWithCategory(string $categoryUniqueCode = null)
    {
        try {
            $year = request('year');
            $fileDir = storage_path("app/周期修");

            $cycleFixDateList = is_file(storage_path('app/周期修/dateList.json')) ? Texthelper::parseJson(file_get_contents(storage_path('app/周期修/dateList.json'))) : [];

            $cycleFixWithCategories = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/种类.json"));
            $currentCategoryName = $cycleFixWithCategories[$categoryUniqueCode];
            $cycleFixEntireModels = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/类型-种类.json"));
            $missionWithEntireModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/列-任务-类型.json"))[$cycleFixWithCategories[$categoryUniqueCode]];
            $fixedWithEntireModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/列-完成-类型.json"))[$cycleFixWithCategories[$categoryUniqueCode]];
            $realWithEntireModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/列-实际-类型.json"))[$cycleFixWithCategories[$categoryUniqueCode]];
            $planWithEntireModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/列-计划.json"))[$cycleFixWithCategories[$categoryUniqueCode]];
            $planWithEntireModelAsColumnSerial = [];
            foreach ($planWithEntireModelAsColumn['sub'] as $entireModelName => $item) $planWithEntireModelAsColumnSerial[$entireModelName] = $item['count'];

            $missionWithEntireModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/行-任务-类型.json"))[$cycleFixWithCategories[$categoryUniqueCode]];
            $fixedWithEntireModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/行-完成-类型.json"))[$cycleFixWithCategories[$categoryUniqueCode]];
            $realWithEntireModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/行-实际-类型.json"))[$cycleFixWithCategories[$categoryUniqueCode]];
            $planWithEntireModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/行-计划.json"))['sub'][$cycleFixWithCategories[$categoryUniqueCode]]['statistics'];

            $missionWithEntireModelAsNames = array_keys($missionWithEntireModelAsColumn);
            $missionWithEntireModelAsMonth = [];
            $fixedWithEntireModelAsMonth = [];
            $realWithEntireModelAsMonth = [];
            $planWithEntireModelAsMonth = [];
            for ($m = 1; $m <= 12; $m++) {
                $m = str_pad($m, 2, '0', STR_PAD_LEFT);
                $missionWithEntireModelAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/{$year}-{$m}/任务-类型.json"))[$currentCategoryName];
                $fixedWithEntireModelAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/{$year}-{$m}/完成-类型.json"))[$currentCategoryName];
                $realWithEntireModelAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/{$year}-{$m}/实际-类型.json"))[$currentCategoryName];
                $tmp = [];
                foreach (TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/{$year}-{$m}/计划.json"))[$currentCategoryName]['sub'] as $entireModelName => $item) $tmp[$entireModelName] = $item['count'];
                $planWithEntireModelAsMonth[] = $tmp;
            }

            # 根据人员统计
            switch (substr($categoryUniqueCode, 0, 3)) {
                case 'S03':
                    # 转辙机工区
                    $workArea = 1;
                    $currentWorkAreaName = '转辙机';
                    break;
                case 'Q01':
                    $workArea = 2;
                    $currentWorkAreaName = '继电器';
                    break;
                default:
                    $workArea = 3;
                    $currentWorkAreaName = '综合';
                    break;
            }
            $accounts = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/人员.json"))[$workArea];
            $statisticsAsAccount = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/行-人员-计划.json"));
            $statisticsWithMonthAsAccount = [];
            for ($i = 1; $i <= 12; $i++) {
                $month = str_pad($i, 2, '0', STR_PAD_LEFT);
                $statisticsWithMonthAsAccount[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/{$year}-{$month}/行-人员-计划.json"));
            }

            return view('Report.cycleFixWithCategory', [
                'year' => $year,
                'date' => Carbon::now()->format('Y-m'),
                'currentCategoryName' => $currentCategoryName,
                'currentWorkAreaName' => $currentWorkAreaName,
                'cycleFixDateList' => $cycleFixDateList,
                'cycleFixWithCategories' => $cycleFixWithCategories,
                'cycleFixEntireModels' => $cycleFixEntireModels[$cycleFixWithCategories[$categoryUniqueCode]],
                'missionWithEntireModelAsColumn' => $missionWithEntireModelAsColumn,
                'fixedWithEntireModelAsColumn' => $fixedWithEntireModelAsColumn,
                'realWithEntireModelAsColumn' => $realWithEntireModelAsColumn,
                'planWithEntireModelAsColumn' => $planWithEntireModelAsColumnSerial,
                'missionWithEntireModelAsRow' => $missionWithEntireModelAsRow,
                'fixedWithEntireModelAsRow' => $fixedWithEntireModelAsRow,
                'realWithEntireModelAsRow' => $realWithEntireModelAsRow,
                'planWithEntireModelAsRow' => $planWithEntireModelAsRow,
                'missionWithEntireModelAsMonth' => $missionWithEntireModelAsMonth,
                'fixedWithEntireModelAsMonth' => $fixedWithEntireModelAsMonth,
                'realWithEntireModelAsMonth' => $realWithEntireModelAsMonth,
                'planWithEntireModelAsMonth' => $planWithEntireModelAsMonth,
                'missionWithEntireModelAsNames' => TextHelper::toJson($missionWithEntireModelAsNames),
                'accounts' => $accounts,
                'statisticsAsAccount' => $statisticsAsAccount,
                'statisticsWithMonthAsAccount' => $statisticsWithMonthAsAccount,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 周期修（类型视角）
     * @param string $entireModelUniqueCode
     * @return Factory|RedirectResponse|\Illuminate\Http\Response|\Illuminate\Routing\Redirector|View
     */
    final public function cycleFixWithEntireModelAsMission(string $entireModelUniqueCode)
    {
        try {
            $year = request('year', Carbon::now()->year);
            $fileDir = storage_path("app/周期修/{$year}");

            if (request('download') == '1') {
                $filename = "{$year}年{$this->_organizationName}周期修统计";
                if (is_file(public_path("{$filename}.xlsx"))) unlink(public_path("{$filename}.xlsx"));
                if (!is_file("{$fileDir}/{$filename}.xlsx")) return response()->make("<script>alert('excel文件不存在');</script>");
                copy("{$fileDir}/{$filename}.xlsx", public_path("{$filename}.xlsx"));
                return redirect(url("/{$filename}.xlsx"));
            }

            $cycleFixCategories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $currentCategoryName = $cycleFixCategories[substr($entireModelUniqueCode, 0, 3)];
            $currentEntireModelsWithCategoryName = TextHelper::parseJson(file_get_contents("{$fileDir}/类型2.json"))[$currentCategoryName];
            $cycleFixEntireModels = TextHelper::parseJson(file_get_contents("{$fileDir}/类型.json"));
            $currentEntireModelName = $cycleFixEntireModels[$entireModelUniqueCode];
            $cycleFixValues = TextHelper::parseJson(file_get_contents("{$fileDir}/检修周期年限-型号和子类-类型.json"))[$currentEntireModelName];
            $cycleFixSubModels = TextHelper::parseJson(file_get_contents("{$fileDir}/型号和子类-类型.json"));
            $missionWithSubModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-任务-型号和子类.json"))[$currentEntireModelName];
            $fixedWithSubModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-完成-型号和子类.json"))[$currentEntireModelName];
            $realWithSubModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-实际-型号和子类.json"))[$currentEntireModelName];
            $planWithSubModelAsColumn = TextHelper::parseJson(file_get_contents("{$fileDir}/列-计划.json"))[$currentCategoryName]['sub'][$currentEntireModelName]['sub'];
            $planWithSubModelAsColumnSerial = [];
            foreach ($planWithSubModelAsColumn as $subModelName => $item) $planWithSubModelAsColumnSerial[$subModelName] = $item['count'];

            $missionWithSubModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-任务-型号和子类.json"))[$currentEntireModelName];
            $fixedWithSubModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-完成-型号和子类.json"))[$currentEntireModelName];
            $realWithSubModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-实际-型号和子类.json"))[$currentEntireModelName];
            $planWithSubModelAsRow = TextHelper::parseJson(file_get_contents("{$fileDir}/行-计划.json"))['sub'][$currentCategoryName]['sub'][$currentEntireModelName]['statistics'];

            $cycleFixTotal = TextHelper::parseJson(file_get_contents("{$fileDir}/总数-型号和子类.json"))[$currentEntireModelName];
            $cycleFixFixedTotal = TextHelper::parseJson(file_get_contents("{$fileDir}/成品-型号和子类.json"))[$currentEntireModelName];
            $missionWithSubModelAsNames = array_keys($missionWithSubModelAsColumn);
            $missionWithSubModelAsMonth = [];
            $fixedWithSubModelAsMonth = [];
            $realWithSubModelAsMonth = [];
            $planWithSubModelAsMonth = [];
            $missionWithSubModelAsMonthForStation = [];

            for ($m = 1; $m <= 12; $m++) {
                $m = str_pad($m, 2, '0', STR_PAD_LEFT);
                $missionWithSubModelAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/任务-型号和子类.json"))[$currentEntireModelName];
                $fixedWithSubModelAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/完成-型号和子类.json"))[$currentEntireModelName];
                $realWithSubModelAsMonth[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/实际-型号和子类.json"))[$currentEntireModelName];

                $tmp = [];
                foreach (TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/计划.json"))[$currentCategoryName]['sub'][$currentEntireModelName]['sub'] as $subModelName => $item) $tmp[$subModelName] = $item['count'];
                $planWithSubModelAsMonth[] = $tmp;

                $missionWithSubModelAsMonthForStation[] = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}-{$m}/任务-型号和子类-车站.json"))[$currentEntireModelName];
            }

            return view('Report.cycleFixWithEntireModelAsMission', [
                'year' => $year,
                'date' => Carbon::now()->format('Y-m'),
                'currentEntireModelsWithCategoryName' => $currentEntireModelsWithCategoryName,
                'cycleFixEntireModels' => $cycleFixEntireModels,
                'cycleFixSubModels' => $cycleFixSubModels[$cycleFixEntireModels[$entireModelUniqueCode]],
                'currentEntireModelUniqueCode' => $entireModelUniqueCode,
                'missionWithSubModelAsColumn' => $missionWithSubModelAsColumn,
                'fixedWithSubModelAsColumn' => $fixedWithSubModelAsColumn,
                'realWithSubModelAsColumn' => $realWithSubModelAsColumn,
                'planWithSubModelAsColumn' => $planWithSubModelAsColumnSerial,
                'missionWithSubModelAsRow' => $missionWithSubModelAsRow,
                'fixedWithSubModelAsRow' => $fixedWithSubModelAsRow,
                'realWithSubModelAsRow' => $realWithSubModelAsRow,
                'planWithSubModelAsRow' => $planWithSubModelAsRow,
                'missionWithSubModelAsNames' => TextHelper::toJson($missionWithSubModelAsNames),
                'missionWithSubModelAsMonth' => $missionWithSubModelAsMonth,
                'fixedWithSubModelAsMonth' => $fixedWithSubModelAsMonth,
                'realWithSubModelAsMonth' => $realWithSubModelAsMonth,
                'planWithSubModelAsMonth' => $planWithSubModelAsMonth,
                'cycleFixTotal' => $cycleFixTotal,
                'cycleFixFixedTotal' => $cycleFixFixedTotal,
                'missionWithSubModelAsMonthForStation' => $missionWithSubModelAsMonthForStation,
                'cycleFixValues' => $cycleFixValues,
            ]);
        } catch (\Exception $exception) {
            return back()->with('info', '下级无数据');
        }
    }

    final public function cycleFixWithEntireModelAsPlan_bak(string $entire_model_unique_code)
    {
        try {
            if (request('date')) {
                list($year, $month) = explode('-', request('date'));
            } else {
                $now = Carbon::now();
                $year = $now->year;
                $month = str_pad($now->month, 2, '0', STR_PAD_LEFT);
            }
            $file_dir = storage_path("app/周期修");

            $date_list = json_decode(file_get_contents("{$file_dir}/dateList.json"), true);

            $cycle_fix_categories = json_decode(file_get_contents("{$file_dir}/{$year}/种类.json"), true);
            $current_category_name = $cycle_fix_categories[substr($entire_model_unique_code, 0, 3)];

            $entire_models = json_decode(file_get_contents("{$file_dir}/{$year}/类型2.json"), true);
            $current_entire_models_with_category_name = $entire_models[$current_category_name];
            $cycle_fix_entire_models = json_decode(file_get_contents("{$file_dir}/{$year}/类型.json"), true);
            $current_entire_model_name = $cycle_fix_entire_models[$entire_model_unique_code];

//            $cycleFixValues = TextHelper::parseJson(file_get_contents("{$fileDir}/{$year}/检修周期年限-型号和子类-类型.json"))[$currentEntireModelName];
            $cycle_fix_sub_models = json_decode(file_get_contents("{$file_dir}/{$year}/型号和子类-类型.json"), true);

            $mission_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-任务-型号和子类.json"), true)[$current_entire_model_name];
            $fixed_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-完成-型号和子类.json"), true)[$current_entire_model_name];
            $real_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-实际-型号和子类.json"), true)[$current_entire_model_name];
            $plan_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-计划.json"), true)[$current_category_name]['sub'][$current_entire_model_name]['sub'];
            $plan_with_sub_model_as_column_serial = [];
            foreach ($plan_with_sub_model_as_column as $sub_model_name => $item) $plan_with_sub_model_as_column_serial[$sub_model_name] = $item['count'];

            $mission_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-任务-型号和子类.json"), true)[$current_entire_model_name];
            $fixed_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-完成-型号和子类.json"), true)[$current_entire_model_name];
            $real_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-实际-型号和子类.json"), true)[$current_entire_model_name];
            $plan_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-计划.json"), true)['sub'][$current_category_name]['sub'][$current_entire_model_name]['statistics'];

            $cycle_fix_total = json_decode(file_get_contents("{$file_dir}/{$year}/总数-型号和子类.json"), true)[$cycle_fix_entire_models[$entire_model_unique_code]];
            $cycle_fix_fixed_total = json_decode(file_get_contents("{$file_dir}/{$year}/成品-型号和子类.json"), true)[$cycle_fix_entire_models[$entire_model_unique_code]];
            $mission_with_sub_model_as_names = array_keys($mission_with_sub_model_as_column);
            $mission_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/任务-型号和子类.json"), true)[$cycle_fix_entire_models[$entire_model_unique_code]];
            $fixed_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/完成-型号和子类.json"), true)[$cycle_fix_entire_models[$entire_model_unique_code]];
            $real_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/实际-型号和子类.json"), true)[$cycle_fix_entire_models[$entire_model_unique_code]];
            $plan_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/计划.json"), true)[$current_category_name]['sub'][$current_entire_model_name]['sub'];
            $mission_with_sub_model_as_month_for_station = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/任务-型号和子类-车站.json"), true)[$cycle_fix_entire_models[$entire_model_unique_code]];
            $whole_station_names = [];
            foreach ($mission_with_sub_model_as_month_for_station as $sub_model_name => $mission) if (!empty($mission)) foreach ($mission as $stationName => $missionCount) $whole_station_names[] = $stationName;
            $whole_station_names = array_unique($whole_station_names);

            $plan_with_month_as_account = json_decode(file_get_contents("{$file_dir}/{$year}/行-人员-计划.json"), true);

            $substr = substr($entire_model_unique_code, 0, 3);
            switch (substr($entire_model_unique_code, 0, 3)) {
                case 'S03';
                    $work_area = '1';
                    break;
                case 'Q01':
                    $work_area = '2';
                    break;
                default:
                    $work_area = '3';
                    break;
            }
            $accounts = TextHelper::parseJson(file_get_contents("{$file_dir}/{$year}/人员.json"))[$work_area];

            return view("Report.cycleFixWithEntireModelAsPlan", [
                'year' => $year,
                'date' => "{$year}-{$month}",
                'cycleFixCategories' => $cycle_fix_categories,
                'cycleFixCategoriesFlip' => json_encode(array_flip($cycle_fix_categories), 256),
                'currentCategoryName' => $current_category_name,
                'currentEntireModelsWithCategoryName' => $current_entire_models_with_category_name,
                'entireModelsAsJson' => json_encode($entire_models),
                'cycleFixEntireModels' => $cycle_fix_entire_models,
                'cycleFixSubModels' => $cycle_fix_sub_models[$cycle_fix_entire_models[$entire_model_unique_code]],
                'currentEntireModelUniqueCode' => $entire_model_unique_code,
                'currentEntireModelName' => $cycle_fix_entire_models[$entire_model_unique_code],
                'missionWithSubModelAsColumn' => $mission_with_sub_model_as_column,
                'fixedWithSubModelAsColumn' => $fixed_with_sub_model_as_column,
                'realWithSubModelAsColumn' => $real_with_sub_model_as_column,
                'planWithSubModelAsColumn' => $plan_with_sub_model_as_column,
                'missionWithSubModelAsRow' => $mission_with_sub_model_as_row,
                'fixedWithSubModelAsRow' => $fixed_with_sub_model_as_row,
                'realWithSubModelAsRow' => $real_with_sub_model_as_row,
                'planWithSubModelAsRow' => $plan_with_sub_model_as_row,
                'missionWithSubModelAsNames' => TextHelper::toJson($mission_with_sub_model_as_names),
                'missionWithSubModelAsMonth' => $mission_with_sub_model_as_month,
                'fixedWithSubModelAsMonth' => $fixed_with_sub_model_as_month,
                'realWithSubModelAsMonth' => $real_with_sub_model_as_month,
                'planWithSubModelAsMonth' => $plan_with_sub_model_as_month,
                'cycleFixTotal' => $cycle_fix_total,
                'cycleFixFixedTotal' => $cycle_fix_fixed_total,
                'missionWithSubModelAsMonthForStation' => $mission_with_sub_model_as_month_for_station,
//                'cycleFixValues' => $cycleFixValues,
                'accounts' => $accounts,
                'wholeStationNames' => $whole_station_names,
                'planWithMonthAsAccount' => $plan_with_month_as_account,
                'dateList' => $date_list,
            ]);
        } catch (Exception $e) {
            $msg = $e->getMessage();
            $line = $e->getLine();
            $file = $e->getFile();
            dd($msg, $line, $file);
            return back()->with('info', '该型号下没有周期修数据');
        }
    }

    /**
     * 周期修（任务分配）
     * @param string $category_unique_code
     * @param string $entire_model_unique_code
     * @return Factory|RedirectResponse|View
     */
    final public function cycleFixWithEntireModelAsPlan(string $category_unique_code)
    {
        try {
            if (request('date')) {
                list($year, $month) = explode('-', request('date'));
            } else {
                $now = Carbon::now();
                $year = $now->year;
                $month = str_pad($now->month, 2, '0', STR_PAD_LEFT);
            }
            $file_dir = storage_path("app/周期修");

            $date_list = json_decode(file_get_contents("{$file_dir}/dateList.json"), true);

            $cycle_fix_categories = json_decode(file_get_contents("{$file_dir}/{$year}/种类.json"), true);
            $current_category_name = $cycle_fix_categories[$category_unique_code];
            $entire_models = json_decode(file_get_contents("{$file_dir}/{$year}/类型2.json"), true);
            $have_cycle_fix_categories = array_keys($entire_models);
            if (!array_key_exists($current_category_name, $entire_models)) return back()->with('danger', '该种类下没有周期修设备');
            $entire_models = $entire_models[$current_category_name];
            $entire_model_names = array_values($entire_models);

            $mission_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-任务-型号和子类.json"), true);
            $mission_with_sub_model_as_column2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($mission_with_sub_model_as_column[$entire_model_name] as $sub_model_name => $value)
                    $mission_with_sub_model_as_column2[$sub_model_name] = $value;
            }
            $fixed_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-完成-型号和子类.json"), true);
            $fixed_with_sub_model_as_column2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($fixed_with_sub_model_as_column[$entire_model_name] as $sub_model_name => $value)
                    $fixed_with_sub_model_as_column2[$sub_model_name] = $value;
            }
            $real_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-实际-型号和子类.json"), true);
            $real_with_sub_model_as_column2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($real_with_sub_model_as_column[$entire_model_name] as $sub_model_name => $value)
                    $real_with_sub_model_as_column2[$sub_model_name] = $value;
            }
            $plan_with_sub_model_as_column = json_decode(file_get_contents("{$file_dir}/{$year}/列-计划.json"), true)[$current_category_name]['sub'];
            $plan_with_sub_model_as_column2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($plan_with_sub_model_as_column[$entire_model_name]['sub'] as $sub_model_name => $value)
                    $plan_with_sub_model_as_column2[$sub_model_name] = $value;
            }
            $plan_with_sub_model_as_column_serial = [];
            foreach ($plan_with_sub_model_as_column2 as $sub_model_name => $item) $plan_with_sub_model_as_column_serial[$sub_model_name] = $item['count'];

            $mission_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-任务-型号和子类.json"), true);
            $mission_with_sub_model_as_row2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($mission_with_sub_model_as_row[$entire_model_name] as $sub_model_name => $value)
                    $mission_with_sub_model_as_row2[$sub_model_name] = $value;
            }
            $fixed_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-完成-型号和子类.json"), true);
            $fixed_with_sub_model_as_row2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($fixed_with_sub_model_as_row[$entire_model_name] as $sub_model_name => $value)
                    $fixed_with_sub_model_as_row2[$sub_model_name] = $value;
            }
            $real_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-实际-型号和子类.json"), true);
            $real_with_sub_model_as_row2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($real_with_sub_model_as_row[$entire_model_name] as $sub_model_name => $value)
                    $real_with_sub_model_as_row2[$sub_model_name] = $value;
            }
            $plan_with_sub_model_as_row = json_decode(file_get_contents("{$file_dir}/{$year}/行-计划.json"), true)['sub'][$current_category_name]['sub'];
            $plan_with_sub_model_as_row2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($plan_with_sub_model_as_row[$entire_model_name]['sub'] as $sub_model_name => $value)
                    $plan_with_sub_model_as_row2[$sub_model_name] = $value['statistics'];
            }

            $mission_with_sub_model_as_names = array_keys($mission_with_sub_model_as_column2);

            $mission_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/任务-型号和子类.json"), true);
            $mission_with_sub_model_as_month2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($mission_with_sub_model_as_month[$entire_model_name] as $sub_model_name => $value)
                    $mission_with_sub_model_as_month2[$sub_model_name] = $value;
            }
            $fixed_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/完成-型号和子类.json"), true);
            $fixed_with_sub_model_as_month2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($fixed_with_sub_model_as_month[$entire_model_name] as $sub_model_name => $value)
                    $fixed_with_sub_model_as_month2[$sub_model_name] = $value;
            }
            $real_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/实际-型号和子类.json"), true);
            $real_with_sub_model_as_month2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($real_with_sub_model_as_month[$entire_model_name] as $sub_model_name => $value)
                    $real_with_sub_model_as_month2[$sub_model_name] = $value;
            }
            $plan_with_sub_model_as_month = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/计划.json"), true)[$current_category_name]['sub'];
            $plan_with_sub_model_as_month2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($plan_with_sub_model_as_month[$entire_model_name]['sub'] as $sub_model_name => $value)
                    $plan_with_sub_model_as_month2[$sub_model_name] = $value;
            }
            $mission_with_sub_model_as_month_for_station = json_decode(file_get_contents("{$file_dir}/{$year}/{$year}-{$month}/任务-型号和子类-车站.json"), true);
            $mission_with_sub_model_as_month_for_station2 = [];
            foreach ($entire_model_names as $entire_model_name) {
                foreach ($mission_with_sub_model_as_month_for_station[$entire_model_name] as $sub_model_name => $value)
                    $mission_with_sub_model_as_month_for_station2[$sub_model_name] = $value;
            }
            $whole_station_names = [];
            foreach ($mission_with_sub_model_as_month_for_station2 as $sub_model_name => $mission) if (!empty($mission)) foreach ($mission as $stationName => $missionCount) $whole_station_names[] = $stationName;
            $whole_station_names = array_unique($whole_station_names);

            $plan_with_month_as_account = json_decode(file_get_contents("{$file_dir}/{$year}/行-人员-计划.json"), true);

            $work_area = '3';
            if ($category_unique_code === 'S03') $work_area = '1';
            if ($category_unique_code === 'Q01') $work_area = '2';

            $accounts = json_decode(file_get_contents("{$file_dir}/{$year}/人员.json"), true)[$work_area];

            return view("Report.cycleFixWithEntireModelAsPlan", [
                'year' => $year,
                'date' => "{$year}-{$month}",
                'cycleFixCategories' => $cycle_fix_categories,
                'cycleFixCategoriesAsJson' => json_encode($cycle_fix_categories),
                'haveCycleFixCategoriesAsJson' => json_encode($have_cycle_fix_categories),
                'cycleFixCategoriesFlipAsJson' => json_encode(array_flip($cycle_fix_categories)),
                'currentCategoryUniqueCode' => $category_unique_code,
                'currentCategoryName' => $current_category_name,
                'entireModelsAsJson' => json_encode($entire_models),
                'missionWithSubModelAsColumn' => $mission_with_sub_model_as_column2,
                'fixedWithSubModelAsColumn' => $fixed_with_sub_model_as_column2,
                'realWithSubModelAsColumn' => $real_with_sub_model_as_column2,
                'planWithSubModelAsColumn' => $plan_with_sub_model_as_column2,
                'missionWithSubModelAsRow' => $mission_with_sub_model_as_row2,
                'fixedWithSubModelAsRow' => $fixed_with_sub_model_as_row2,
                'realWithSubModelAsRow' => $real_with_sub_model_as_row2,
                'planWithSubModelAsRow' => $plan_with_sub_model_as_row2,
                'missionWithSubModelAsNames' => TextHelper::toJson($mission_with_sub_model_as_names),
                'missionWithSubModelAsMonth' => $mission_with_sub_model_as_month2,
                'fixedWithSubModelAsMonth' => $fixed_with_sub_model_as_month2,
                'realWithSubModelAsMonth' => $real_with_sub_model_as_month2,
                'planWithSubModelAsMonth' => $plan_with_sub_model_as_month2,
                'missionWithSubModelAsMonthForStation' => $mission_with_sub_model_as_month_for_station2,
                'accounts' => $accounts,
                'wholeStationNames' => $whole_station_names,
                'planWithMonthAsAccount' => $plan_with_month_as_account,
                'dateList' => $date_list,
            ]);
        } catch (Exception $e) {
            $msg = $e->getMessage();
            $line = $e->getLine();
            $file = $e->getFile();
            dd($msg, $line, $file);
            return back()->with('info', '该型号下没有周期修数据');
        }
    }

    /**
     * 保存任务分配值
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    final public function savePlan(Request $request)
    {
        try {
            $year = $request->get('year');
            $date = $request->get('date');
            $category_name = $request->get('categoryName');
            $entire_model_name = $request->get('entireModelName');
            $fileDir = storage_path("app/周期修/{$year}");
            $file = json_decode(file_get_contents("{$fileDir}/{$date}/计划.json"), true);
            foreach ($file[$category_name]['sub'] as $entire_model_name => $item) {
                foreach ($request->get('planWithSubModelAsMonth') as $sub_model_name => $statistics) {
                    if (array_key_exists($sub_model_name, $item['sub'])) $file[$category_name]['sub'][$entire_model_name]['sub'][$sub_model_name] = array_merge($statistics, ['sub' => []]);
                }
            }
            $saveFileRet = file_put_contents("{$fileDir}/{$date}/计划.json", json_encode($file, 256));

            if ($saveFileRet == 0) return HttpResponseHelper::errorForbidden('无变化');

            # 重新统计全年数据
            CycleFixFacade::refreshPlanColumn($year);
            CycleFixFacade::refreshPlanRow($year);

            return HttpResponseHelper::created('保存成功');
        } catch (\Throwable $e) {
            return HttpResponseHelper::errorForbidden('意外错误', [$e->getMessage(), $e->getFile(), $e->getLine()]);
        }
    }

    /**
     * 生成计划Excel
     */
    final public function makeExcelWithPlan()
    {
        try {
            $cell_key = [
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM',
                'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ'
            ];

            $current_work_area = '3';
            if (request('category_unique_code') == 'S03') $current_work_area = '1';
            if (request('category_unique_code') == 'Q01') $current_work_area = '2';

            $date = request('date', date('Y-m'));
            $work_area = session('account.work_area');
            $filename = "周期修{$work_area}：工作分配({$date})";

            ExcelWriteHelper::download(
                function ($excel) use ($cell_key, $current_work_area) {
                    $excel->setActiveSheetIndex(0);
                    $current_sheet = $excel->getActiveSheet();

                    list($year, $month) = explode('-', request('date', date('Y-m')));
                    $fs = FileSystem::init(__FILE__);

                    # 加载基础数据
                    $accounts = [];
                    foreach ($fs->setPath(storage_path("app/周期修/{$year}/人员.json"))->fromJson() as $key => $value) if ($key == $current_work_area) $accounts = $value;

                    # 定义首行
                    $col = 2;
                    $current_sheet->setCellValue("A1", "型号/人员");
                    $current_sheet->setCellValue("B1", "合计");
                    $current_sheet->getColumnDimension('A')->setWidth(20);
                    foreach ($accounts as $account) {
                        $current_sheet->setCellValue("{$cell_key[$col]}1", $account);
                        $current_sheet->getColumnDimension("{$cell_key[$col]}")->setWidth(15);
                        $col++;
                    }

                    # 获取当月计划
                    $row = 2;
                    $plan_with_month = $fs->setPath(storage_path("app/周期修/{$year}/{$year}-{$month}/计划.json"))->fromJson();
                    switch ($current_work_area) {
                        case "1":
                            $current_plan_with_month = $plan_with_month["转辙机"];
                            break;
                        case "2":
                            $current_plan_with_month = $plan_with_month["继电器"];
                            break;
                        case "3":
                            unset($plan_with_month["转辙机"], $plan_with_month["继电器"]);
                            $current_plan_with_month['sub'] = array_collapse(array_pluck($plan_with_month, 'sub'));
                            break;
                        default:
                            $current_plan_with_month = [];
                            break;
                    }
                    unset($plan_with_month);

                    foreach ($current_plan_with_month['sub'] as $entire_model_name => $sub_models) {
                        foreach ($sub_models['sub'] as $sub_model_name => $statistics) {
                            # 首列
                            $current_sheet->setCellValue("A{$row}", $sub_model_name);  # 型号名称
                            $current_sheet->setCellValue("B{$row}", $statistics['count']);  # 合计
                            $col = 2;
                            foreach ($statistics['accounts'] as $account) {
                                $current_sheet->setCellValue("{$cell_key[$col]}{$row}", $account);  # 人员分配数量
                                $col += 1;
                            }
                            $row += 1;
                        }
                    }
                    return $excel;
                },
                $filename
            );
        } catch (Exception $e) {
            \App\Facades\CommonFacade::ddExceptionWithAppDebug($e);
            return back()->with('info', '无数据');
        }
    }

    /**
     * 获取现场车间下全部种类
     * @param string $sceneWorkshopUniqueCode
     * @return Factory|RedirectResponse|View
     */
    final public function sceneWorkshopWithAllCategory2(string $sceneWorkshopUniqueCode)
    {
        try {
            $fileDir = storage_path('app/台账');
            if (!is_dir($fileDir)) return back()->with('danger', '数据不存在');
            $sceneWorkshops = TextHelper::parseJson(file_get_contents("{$fileDir}/现场车间.json"));
            $statistics = TextHelper::parseJson(file_get_contents("{$fileDir}/状态统计-种类型-{$sceneWorkshops[$sceneWorkshopUniqueCode]}.json"));
            $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $categoryNames = collect($categories)->except('statistics')->flip()->keys()->toArray();

            $legendSelected = ['上道' => true, '成品' => true, '在修' => true, '送修' => true, '备品' => true];
            if (request('status', null) != null) foreach ($legendSelected as $key => $item) if ($key != request('status')) $legendSelected[$key] = false;

            return view('Report.sceneWorkshopWithAllCategory', [
                'sceneWorkshopUniqueCode' => $sceneWorkshopUniqueCode,
                'sceneWorkshopName' => $sceneWorkshops[$sceneWorkshopUniqueCode],
                'legendSelected' => TextHelper::toJson($legendSelected),
                'categories' => TextHelper::toJson(array_flip($categories)),
                'categoryNames' => TextHelper::toJson($categoryNames),
                'statistics' => TextHelper::toJson($statistics),
            ]);
        } catch (Exception $exception) {
            return back()->with('danger', $exception->getMessage() . ':' . $exception->getFile() . ':' . $exception->getLine());
        }
    }

    /**
     * 获取全部种类
     * @param string $sceneWorkshopUniqueCode
     * @return Factory|RedirectResponse|View
     */
    final public function sceneWorkshopWithAllCategory(string $sceneWorkshopUniqueCode)
    {
        try {
            # 获取所有该现场车间下所有车站
            $stations = DB::table('maintains')
                ->where('deleted_at', null)
                ->where('type', 'STATION')
                ->where('parent_unique_code', $sceneWorkshopUniqueCode)
                ->get();
            $stationNames = $stations->pluck('name')->toArray();
            $stationNameStr = "";
            foreach ($stationNames as $stationName) $stationNameStr .= "'{$stationName}',";
            $stationNameStr = rtrim($stationNameStr, ',');

            $legendSelected = ['上道' => true, '成品' => true, '在修' => true, '送修' => true, '备品' => true];
            if (request('status', null) != null) foreach ($legendSelected as $key => $item) if ($key != request('status')) $legendSelected[$key] = false;

            # 获取当前现场车间数据
            $sceneWorkshop = DB::table('maintains')->where('deleted_at', null)->where('unique_code', $sceneWorkshopUniqueCode)->first();

            # 获取所有种类的统计
            $categoryStatistics = [];

            # 获取所有种类
            $categories = DB::table('categories')->where('deleted_at', null)->get();
            foreach ($categories as $category) $categoryStatistics[$category->name] = [0, 0, 0, 0, 0];  # 制作空数据

            # 获取统计模型
            $getBuilderWithCategory = function (array $status) use ($stationNameStr): array {
                $statusStr = "";
                foreach ($status as $item) $statusStr .= "'{$item}',";
                $statusStr = rtrim($statusStr, ',');

                return collect(DB::select("
select c.name, count(c.name) as count
from entire_instances ei
         join categories c on ei.category_unique_code = c.unique_code
where ei.deleted_at is null
  and ei.status in ({$statusStr})
  and ei.maintain_station_name in ({$stationNameStr})
group by c.name"))
                    ->pluck('count', 'name')
                    ->toArray();
            };

            # 统计：上道
            foreach ($getBuilderWithCategory(['INSTALLED']) as $key => $item) $categoryStatistics[$key][0] = $item;
            # 统计：成品
            foreach ($getBuilderWithCategory(['FIXED']) as $key => $item) $categoryStatistics[$key][1] = $item;
            # 统计：在修
            foreach ($getBuilderWithCategory(['FIXING', 'FACTORY_RETURN']) as $key => $item) $categoryStatistics[$key][2] = $item;
            # 统计：返厂
            foreach ($getBuilderWithCategory(['RETURN_FACTORY']) as $key => $item) $categoryStatistics[$key][3] = $item;
            # 统计：备品
            foreach ($getBuilderWithCategory(['INSTALLING']) as $key => $item) $categoryStatistics[$key][4] = $item;

            return view('Report.sceneWorkshopWithAllCategory', [
                'sceneWorkshopUniqueCode' => $sceneWorkshopUniqueCode,
                'legendSelected' => TextHelper::toJson($legendSelected),
                'sceneWorkshop' => $sceneWorkshop,
                'categoryStatistics' => $categoryStatistics,
                'categoryNames' => collect($categories)->pluck('name')->toJson(),
                'categories' => collect($categories)->pluck('unique_code', 'name')->toJson()
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '下级无数据');
        }
    }

    /**
     * 获取现场车间下某一种类的统计数据
     * @param string $sceneWorkshopUniqueCode
     * @return Factory|RedirectResponse|View
     */
    final public function sceneWorkshop2(string $sceneWorkshopUniqueCode)
    {
        try {
            $fileDir = storage_path('app/台账');
            if (!is_dir($fileDir)) return back()->with('danger', '数据不存在');
            $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $currentCategory = $categories[request('categoryUniqueCode')];
            $categoryNames = collect($categories)->except('statistics')->flip()->keys()->toArray();
            $sceneWorkshops = TextHelper::parseJson(file_get_contents("{$fileDir}/现场车间.json"));
            $currentSceneWorkshop = $sceneWorkshops[$sceneWorkshopUniqueCode];
            $stationsWithSceneWorkshop = TextHelper::parseJson(file_get_contents("{$fileDir}/车站-现场车间.json"));
            $entireModels = TextHelper::parseJson(file_get_contents("{$fileDir}/类型-种类.json"))[$currentCategory];
            $entireModelNames = collect($entireModels)->flip()->keys()->toArray();
            $currentEntireModel = request('entireModelUniqueCode') ? $entireModels[request('entireModelUniqueCode')] : $currentEntireModel = array_first($entireModels);
            $sceneWorkshopName = $sceneWorkshops[$sceneWorkshopUniqueCode];
            $subModels = [];
            $subModelNames = [];
            $subModelAlls = TextHelper::parseJson(file_get_contents("{$fileDir}/型号和子类-类型.json"));
            if (array_key_exists($currentEntireModel, $subModelAlls)) {
                $subModels = $subModelAlls[$currentEntireModel];
                $subModelNames = array_keys(array_flip($subModels));
            }
            $currentSubModel = request('subModelUniqueCode') ? $subModels[request('subModelUniqueCode')] : array_first($subModels);
            $stations = request('station', null) ? [request('station')] : $stationsWithSceneWorkshop[$sceneWorkshopName];
            $statistics = TextHelper::parseJson(file_get_contents("{$fileDir}/状态统计-种类型-{$sceneWorkshops[$sceneWorkshopUniqueCode]}.json"));
            $currentCategoryUniqueCode = array_flip($categories)[$currentCategory];
            $currentEntireModelUniqueCode = array_flip($entireModels)[$currentEntireModel];
            $currentSubModelUniqueCode = '';
            if (!empty($subModels) && !empty($currentSubModel)) $currentSubModelUniqueCode = array_flip($subModels)[$currentSubModel];
            $statuses = ['INSTALLED' => '上道', 'INSTALLING' => '备品', 'FIXED' => '成品', 'FIXING' => '在修', 'RETURN_FACTORY' => '送修'];
            switch (substr($currentSubModelUniqueCode, 0, 1)) {
                case 'S':
                    $entireInstances = DB::table('entire_instances as ei')
                        ->select([
                            'ei.identity_code',
                            'ei.category_name',
                            'em.name as entire_model_name',
                            'pm.name as sub_model_name',
                            'ei.status',
                            'ei.maintain_station_name',
                            'ei.maintain_location_code',
                            'ei.crossroad_number',
                            'ei.open_direction',
                            'ei.to_direction',
                            'ei.line_name',
                            'ei.said_rod',
                            'ei.next_fixing_day',
                        ])
                        ->join(DB::raw('part_instances pi'), 'pi.entire_instance_identity_code', '=', 'ei.identity_code')
                        ->join(DB::raw('part_models pm'), 'pm.unique_code', '=', 'pi.part_model_unique_code')
                        ->join(DB::raw('entire_models em'), 'em.unique_code', '=', 'pm.entire_model_unique_code')
                        ->where('ei.deleted_at', null)
                        ->whereIn('ei.maintain_station_name', $stations)
                        ->where('ei.category_unique_code', $currentCategoryUniqueCode)
                        ->where('em.is_sub_model', false)
                        ->where('em.unique_code', $currentEntireModelUniqueCode)
                        ->where('pm.unique_code', $currentSubModelUniqueCode)
                        ->when(
                            request('status', null),
                            function ($query) use ($statuses) {
                                return $query->where('ei.status', array_flip($statuses)[request('status')]);
                            },
                            function ($query) use ($statuses) {
                                return $query->whereIn('ei.status', $statuses);
                            }
                        )
                        ->paginate();
                    break;
                case 'Q':
                    $entireInstances = DB::table('entire_instances as ei')
                        ->select([
                            'ei.identity_code',
                            'ei.category_name',
                            'em.name as entire_model_name',
                            'sm.name as sub_model_name',
                            'ei.status',
                            'ei.maintain_station_name',
                            'ei.maintain_location_code',
                            'ei.crossroad_number',
                            'ei.open_direction',
                            'ei.to_direction',
                            'ei.line_name',
                            'ei.said_rod',
                            'ei.next_fixing_day',
                        ])
                        ->join(DB::raw('entire_models sm'), 'sm.unique_code', '=', 'ei.entire_model_unique_code')
                        ->leftJoin(DB::raw('entire_models em'), 'em.unique_code', '=', 'sm.parent_unique_code')
                        ->where('ei.deleted_at', null)
                        ->whereIn('ei.maintain_station_name', $stations)
                        ->where('ei.category_unique_code', $currentCategoryUniqueCode)
                        ->where('em.is_sub_model', false)
                        ->where('em.unique_code', $currentEntireModelUniqueCode)
                        ->where('sm.is_sub_model', true)
                        ->where('sm.unique_code', $currentSubModelUniqueCode)
                        ->when(
                            request('status', null),
                            function ($query) use ($statuses) {
                                return $query->where('ei.status', array_flip($statuses)[request('status')]);
                            },
                            function ($query) use ($statuses) {
                                return $query->whereIn('ei.status', $statuses);
                            }
                        )
                        ->paginate();
                    break;
                default:
                    $entireInstances = [];
                    break;
            }

            $legendSelected = ['上道' => true, '成品' => true, '在修' => true, '送修' => true, '备品' => true];
            if (request('status', null) != null) foreach ($legendSelected as $key => $item) if ($key != request('status')) $legendSelected[$key] = false;

            return view('Report.sceneWorkshop', [
                'sceneWorkshopUniqueCode' => $sceneWorkshopUniqueCode,
                'sceneWorkshops' => $sceneWorkshops,
                'sceneWorkshopName' => $sceneWorkshops[$sceneWorkshopUniqueCode],
                'currentSceneWorkshop' => $currentSceneWorkshop,
                'currentCategory' => $currentCategory,
                'currentEntireModel' => $currentEntireModel,
                'currentSubModel' => $currentSubModel,
                'currentCategoryUniqueCode' => $currentCategoryUniqueCode,
                'currentEntireModelUniqueCode' => $currentEntireModelUniqueCode,
                'currentSubModelUniqueCode' => $currentSubModelUniqueCode,
                'categories' => $categories,
                'categoryNames' => TextHelper::toJson($categoryNames),
                'entireModels' => TextHelper::toJson(array_flip($entireModels)),
                'entireModelNames' => TextHelper::toJson($entireModelNames),
                'subModels' => TextHelper::toJson(array_flip($subModels)),
                'subModelNames' => TextHelper::toJson($subModelNames),
                'stationsWithSceneWorkshop' => $stationsWithSceneWorkshop[$sceneWorkshopName],
                'currentStation' => request('station'),
                'statistics' => TextHelper::toJson($statistics),
                'legendSelected' => TextHelper::toJson($legendSelected),
                'entireInstances' => $entireInstances,
                'statuses' => $statuses,
            ]);
        } catch (\Exception $exception) {
            $msg = $exception->getMessage();
            $line = $exception->getLine();
            $file = $exception->getFile();
            dd($msg, $line, $file);
            return back()->with('danger', '下级无数据');
        }
    }

    /**
     * 现场车间统计
     * @param string $sceneWorkshopUniqueCode
     * @return mixed
     * @throws Exception
     * INSTALLED 上道
     * FIXED 成品
     * FIXING FACTORY_RETURN 在修
     * RETURN_FACTORY 送修
     * INSTALLING 备用
     */
    final public function sceneWorkshop(string $sceneWorkshopUniqueCode)
    {
        try {
            # 获取所有该现场车间下所有车站
            $stations = DB::table('maintains')
                ->where('deleted_at', null)
                ->where('type', 'STATION')
                ->where('parent_unique_code', $sceneWorkshopUniqueCode)
                ->get();
            $stationNames = $stations->pluck('name')->toArray();
            $stationNameStr = "";
            foreach ($stationNames as $stationName) $stationNameStr .= "'{$stationName}',";
            $stationNameStr = rtrim($stationNameStr, ',');

            $legendSelected = ['上道' => true, '成品' => true, '在修' => true, '送修' => true, '备品' => true];
            if (request('status', null) != null) foreach ($legendSelected as $key => $item) if ($key != request('status')) $legendSelected[$key] = false;

            # 获取当前现场车间数据
            $sceneWorkshops = DB::table('maintains')->where('deleted_at', null)->where('unique_code', $sceneWorkshopUniqueCode)->first();

            # 获取所有种类
            $categories = DB::table('categories')->where('deleted_at', null)->get();

            # 当前选中的种类
            $currentCategoryUniqueCode = request('categoryUniqueCode') ? request('categoryUniqueCode') : $categories->first()->unique_code;

            # 当前选中的类型
            if (request('entireModelUniqueCode')) {
                $currentEntireModelName = DB::table('entire_models')->where('deleted_at', null)->where('unique_code', request('entireModelUniqueCode'))->where('is_sub_model', false)->first(['name'])->name;
            } else {
                $currentEntireModelName = DB::table('entire_models')->where('deleted_at', null)->where('category_unique_code', $currentCategoryUniqueCode)->where('is_sub_model', false)->first(['name'])->name;
            }
            $entireModels = DB::table('entire_models')->where('deleted_at', null)->where('category_unique_code', $currentCategoryUniqueCode)->pluck('unique_code', 'name');

            # 制作类型空数据
            $entireModelsStatistics = [];
            # 制作型号和子类空数据
            $subModelsStatistics = [];
            foreach (DB::table('entire_models')
                         ->where('deleted_at', null)
                         ->where('is_sub_model', false)
                         ->where('category_unique_code', $currentCategoryUniqueCode)
                         ->pluck('name', 'unique_code') as $parentUniqueCode => $parentName) {
                $entireModelsStatistics[$parentName] = [0, 0, 0, 0, 0];
            }

            foreach (DB::select("
select em.name, em2.name as parent_name
from entire_models em
         join entire_models em2 on em2.unique_code = em.parent_unique_code
where em.deleted_at is null
  and em.category_unique_code = '{$currentCategoryUniqueCode}'") as $item) {
                $entireModelsStatistics[$item->parent_name] = [0, 0, 0, 0, 0];
                $subModelsStatistics[$item->parent_name][$item->name] = [0, 0, 0, 0, 0];
            }

            foreach (DB::select("
select pm.name, em.name as parent_name
from part_models pm
         join entire_models em on em.unique_code = pm.entire_model_unique_code
where em.deleted_at is null
  and pm.deleted_at is null
  and pm.category_unique_code = '{$currentCategoryUniqueCode}'") as $item) {
                $entireModelsStatistics[$item->parent_name] = [0, 0, 0, 0, 0];
                $subModelsStatistics[$item->parent_name][$item->name] = [0, 0, 0, 0, 0];
            }

            $getBuilder = function ($status) use ($currentCategoryUniqueCode, $stationNameStr) {
                $statusStr = "";
                foreach ($status as $s) $statusStr .= "'{$s}',";
                $statusStr = rtrim($statusStr, ',');

                # 统计型号
                $a = DB::select("
select pm.name as name, count(pm.name) as count, em.name as parent_name
from entire_instances ei
         join part_instances pi on pi.entire_instance_identity_code = ei.identity_code
         join part_models pm on pm.unique_code = pi.part_model_unique_code
         join entire_models em on em.unique_code = pm.entire_model_unique_code
where ei.category_unique_code = '{$currentCategoryUniqueCode}'
  and ei.maintain_station_name in ({$stationNameStr})
  and ei.status in ({$statusStr})
  and pm.deleted_at is null
  and em.name is not null
  and em.name <> ''
group by pm.name, pm.unique_code, em.name");

                # 统计子类
                $b = DB::select("select em.name as name, count(em.name) as count, em2.name as parent_name
from entire_instances ei
         join entire_models em on em.unique_code = ei.entire_model_unique_code
         left join entire_models em2 on em2.unique_code = em.parent_unique_code
where ei.category_unique_code = '{$currentCategoryUniqueCode}'
  and ei.maintain_station_name in ({$stationNameStr})
  and ei.status in ({$statusStr})
  and em.is_sub_model is true
  and em.deleted_at is null
  and em2.name is not null
  and em2.name <> ''
group by em.name, em.unique_code, em2.name");

                return array_merge($a, $b);
            };

            # 获取上道统计
            $installedStatistics = $getBuilder(['INSTALLED']);  # 统计上道
            $fixedStatistics = $getBuilder(['FIXED']);  # 统计成品
            $fixingAndFactoryReturnStatistics = $getBuilder(['FIXING', 'FACTORY_RETURN']);  # 统计在修
            $returnFactoryStatistics = $getBuilder(['RETURN_FACTORY']);  # 统计送修
            $installingStatistics = $getBuilder(['INSTALLING']);  # 统计备品

            foreach ($installedStatistics as $installedStatistic) {
                $entireModelsStatistics[$installedStatistic->parent_name][0] += $installedStatistic->count;
                $subModelsStatistics[$installedStatistic->parent_name][$installedStatistic->name][0] += $installedStatistic->count;
            }
            foreach ($fixedStatistics as $fixedStatistic) {
                $entireModelsStatistics[$fixedStatistic->parent_name][1] += $fixedStatistic->count;
                $subModelsStatistics[$fixedStatistic->parent_name][$fixedStatistic->name][1] += $fixedStatistic->count;
            }
            foreach ($fixingAndFactoryReturnStatistics as $fixingAndFactoryReturnStatistic) {
                $entireModelsStatistics[$fixingAndFactoryReturnStatistic->parent_name][2] += $fixingAndFactoryReturnStatistic->count;
                $subModelsStatistics[$fixingAndFactoryReturnStatistic->parent_name][$fixingAndFactoryReturnStatistic->name][2] += $fixingAndFactoryReturnStatistic->count;
            }
            foreach ($returnFactoryStatistics as $returnFactoryStatistic) {
                $entireModelsStatistics[$returnFactoryStatistic->parent_name][3] += $returnFactoryStatistic->count;
                $subModelsStatistics[$returnFactoryStatistic->parent_name][$returnFactoryStatistic->name][3] += $returnFactoryStatistic->count;
            }
            foreach ($installingStatistics as $installingStatistic) {
                $entireModelsStatistics[$installingStatistic->parent_name][4] += $installingStatistic->count;
                $subModelsStatistics[$installingStatistic->parent_name][$installingStatistic->name][4] += $installingStatistic->count;
            }

            $series = [
                ['name' => '上道', 'type' => 'bar', 'data' => []],
                ['name' => '成品', 'type' => 'bar', 'data' => []],
                ['name' => '在修', 'type' => 'bar', 'data' => []],
                ['name' => '送修', 'type' => 'bar', 'data' => []],
                ['name' => '备品', 'type' => 'bar', 'data' => []],
            ];

            $subModelNames = [];
            if ($subModelsStatistics != []) {
                if (key_exists($currentEntireModelName, $subModelsStatistics)) {
                    foreach ($subModelsStatistics[$currentEntireModelName] as $subModelName => $subModelsStatistic) {
                        $subModelNames[] = $subModelName;
                        $series[0]['data'][] = $subModelsStatistic[0];
                        $series[1]['data'][] = $subModelsStatistic[1];
                        $series[2]['data'][] = $subModelsStatistic[2];
                        $series[3]['data'][] = $subModelsStatistic[3];
                        $series[4]['data'][] = $subModelsStatistic[4];
                    }
                }
            }

            # 获取设备列表

            return view('Report.sceneWorkshop', [
                'sceneWorkshop' => $sceneWorkshops,
                'categories' => $categories,
                'categoryNames' => collect($categories)->pluck('name')->toJson(),
                'currentEntireModelName' => $currentEntireModelName,
                'entireModels' => $entireModels,
                'entireModelsStatistics' => $entireModelsStatistics,
                'subModelNames' => TextHelper::toJson($subModelNames),
                'subModelsStatistics' => key_exists($currentEntireModelName, $subModelsStatistics) ? $subModelsStatistics[$currentEntireModelName] : [],
                'series' => TextHelper::toJson($series),
                'legendSelected' => TextHelper::toJson($legendSelected)
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 获取现场车间具体设备列表
     * @param string $sceneWorkshopUniqueCode
     * @return Factory|RedirectResponse|View
     */
    public function sceneWorkshopEntireInstances(string $sceneWorkshopUniqueCode)
    {
        try {
            $fileDir = storage_path("app/台账");
            if (!is_dir($fileDir)) return back()->with('danger', '数据不存在');
            $sceneWorkshops = TextHelper::parseJson(file_get_contents("{$fileDir}/现场车间.json"));
            $stationsWithSceneWorkshop = TextHelper::parseJson(file_get_contents("{$fileDir}/车站-现场车间.json"));
            $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $currentCategory = $categories[request('categoryUniqueCode')];
            $entireModels = TextHelper::parseJson(file_get_contents("{$fileDir}/类型-种类.json"))[$currentCategory];
            $currentEntireModel = $entireModels[request('entireModelUniqueCode')];
            $subModels = TextHelper::parseJson(file_get_contents("{$fileDir}/型号和子类-类型.json"))[$currentEntireModel];
            $currentSubModel = $subModels[request('subModelUniqueCode')];
            $entireInstanceStatuses = EntireInstance::$STATUS;
            $currentStatus = array_flip($entireInstanceStatuses)[request('status')];

            $sceneWorkshopName = $sceneWorkshops[$sceneWorkshopUniqueCode];
            $stations = $stationsWithSceneWorkshop[$sceneWorkshopName];

            $getDB = function () use ($stations, $currentStatus): array {
                $stationNames = '';
                foreach ($stations as $station) $stationNames .= "'{$station}',";
                $stationNames = rtrim($stationNames, ',');

                $categoryUniqueCode = request('categoryUniqueCode') ? "and ei.category_unique_code = '" . request('categoryUniqueCode') . "'" : '';
                $entireModelUniqueCode = request('entireModelUniqueCode') ? "and em.unique_code = '" . request('entireModelUniqueCode') . "'" : '';
                $subModelUniqueCode = request('subModelUniqueCode') ? "and sm.unique_code = '" . request('subModelUniqueCode') . "'" : '';
                $status = request('status') ? "and ei.status = '{$currentStatus}'" : '';

                $sqlSm = "
select ei.identity_code,
       ei.category_name,
       em.name as entire_model_name,
       sm.name as sub_model_name,
       ei.status,
       ei.maintain_station_name,
       ei.maintain_location_code,
       ei.crossroad_number,
       ei.open_direction,
       ei.to_direction,
       ei.line_name,
       ei.said_rod,
       ei.next_fixing_day
from entire_instances ei
         inner join entire_models sm on sm.unique_code = ei.entire_model_unique_code
         left join entire_models em on em.unique_code = sm.parent_unique_code
where ei.deleted_at is null
  and ei.maintain_station_name in ({$stationNames})
  {$categoryUniqueCode}
  {$entireModelUniqueCode}
  {$subModelUniqueCode}
  {$status}";

                $subModelUniqueCode = request('subModelUniqueCode') ? "and pm.unique_code = '" . request('subModelUniqueCode') . "'" : '';

                $sqlPm = "
select ei.identity_code,
       ei.category_name,
       em.name as entire_model_name,
       pm.name as sub_model_name,
       ei.status,
       ei.maintain_station_name,
       ei.maintain_location_code,
       ei.crossroad_number,
       ei.open_direction,
       ei.to_direction,
       ei.line_name,
       ei.said_rod,
       ei.next_fixing_day
from entire_instances ei
inner join part_instances pi on pi.entire_instance_identity_code = ei.identity_code
inner join part_models pm on pm.unique_code = pi.part_model_unique_code
inner join entire_models em on em.unique_code = pm.entire_model_unique_code
where ei.deleted_at is null
  and ei.maintain_station_name in ({$stationNames})
  {$categoryUniqueCode}
  {$entireModelUniqueCode}
  {$subModelUniqueCode}
  {$status}";

                return array_merge(DB::select($sqlSm), DB::select($sqlPm));
            };

            return view('Report.sceneWorkshopEntireInstances', [
                'entireInstances' => $getDB(),
                'sceneWorkshops' => $sceneWorkshops,
                'currentSceneWorkshop' => $sceneWorkshopUniqueCode,
                'statuses' => EntireInstance::$STATUS,
                'currentStatus' => $currentStatus,
                'categories' => $categories,
                'currentCategory' => $currentCategory,
                'entire_models' => $entireModels,
                'currentEntireModel' => $currentEntireModel,
                'subModels' => $subModels,
                'currentSubModel' => $currentSubModel,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 根据种类获取类型列表（现场车间-设备列表）
     * @param string $categoryUniqueCode
     * @return \Illuminate\Http\JsonResponse|\Illuminate\Http\Response
     */
    final public function entireModelsWithSceneWorkshopEntireInstances(string $categoryUniqueCode)
    {
        try {
            $fileDir = storage_path('app/台账');
            if (!is_dir($fileDir)) return response()->make('数据不存在', 404);

            $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $currentCategory = $categories[$categoryUniqueCode];
            $entireModels = TextHelper::parseJson(file_get_contents("{$fileDir}/类型-种类.json"))[$currentCategory];
            return response()->json($entireModels);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 根据类型获取型号和子类列表（现场车间-设备列表）
     * @param string $entireModelUniqueCode
     * @return \Illuminate\Http\JsonResponse|\Illuminate\Http\Response
     */
    final public function subModelsWithSceneWorkshopEntireInstances(string $entireModelUniqueCode)
    {
        try {
            $fileDir = storage_path('app/台账');
            if (!is_dir($fileDir)) return response()->make('数据不存在', 404);

            $categoryUniqueCode = substr($entireModelUniqueCode, 0, 3);
            $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $currentCategory = $categories[$categoryUniqueCode];
            $entireModels = TextHelper::parseJson(file_get_contents("{$fileDir}/类型-种类.json"))[$currentCategory];
            $currentEntireModel = $entireModels[$entireModelUniqueCode];
            $subModels = TextHelper::parseJson(file_get_contents("{$fileDir}/型号和子类-类型.json"))[$currentEntireModel];
            return response()->json($subModels);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 超期使用
     * @return Factory|RedirectResponse|\Illuminate\Routing\Redirector|View
     */
    final public function scraped()
    {
        try {
            $year = Carbon::now()->format('Y');
            if (request('download') == '1') {
                $zipName = "{$year}年{$this->_organizationName}超期使用.zip";
                Zipper::make(public_path($zipName))->add(storage_path("app/超期使用/{$year}年{$this->_organizationName}超期使用.xlsx"))->close();
                return redirect(url("/{$zipName}"));
            }

            $categories = TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/种类.json')));
            $scrapedWithCategory = TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/统计-种类.json')));

            return view('Report.scraped')
                ->with('categories', $categories)
                ->with('categoryNames', collect($categories)->values()->toJson())
                ->with('scrapedWithCategory', $scrapedWithCategory);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 超期使用（指定种类）
     * @param string $categoryUniqueCode
     * @return Factory|RedirectResponse|View
     */
    final public function scrapedWithCategory(string $categoryUniqueCode)
    {
        try {
            $categoryName = TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/种类.json')))[$categoryUniqueCode];
            $entireModels = TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/类型.json')))[$categoryName];
            $scrapedWithEntireModel = TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/统计-类型.json')))[$categoryName];

            return view('Report.scrapedWithCategory')
                ->with('entireModels', $entireModels)
                ->with('entireModelNames', collect($entireModels)->values()->toJson())
                ->with('scrapedWithEntireModel', $scrapedWithEntireModel);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 超期使用（指定类型）
     * @param string $entireModelUniqueCode
     * @return Factory|View
     */
    final public function scrapedWithEntireModel(string $entireModelUniqueCode)
    {
        $entireModelName = DB::table('entire_models')->where('is_sub_model', false)->where('unique_code', $entireModelUniqueCode)->first(['name'])->name;
        $subModels = TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/型号和子类.json')))[$entireModelName];
        $scrapedWithSubModel = TextHelper::parseJson(file_get_contents(storage_path('app/超期使用/统计-型号和子类.json')))[$entireModelName];

        return view('Report.scrapedWithEntireModel')
            ->with('subModels', $subModels)
            ->with('subModelNames', collect($subModels)->values()->toJson())
            ->with('scrapedWithSubModel', $scrapedWithSubModel);
    }

    /**
     * 超期使用（指定型号）
     * @param string $modelUniqueCode
     * @return Factory|RedirectResponse|View
     */
    final public function scrapedWithSub(string $modelUniqueCode)
    {
        try {
            $now = Carbon::now()->format('Y-m-d');
            $root_dir = storage_path('app/超期使用');
            if (!is_dir($root_dir)) return back()->with('danger', '数据不存在');
            list($dateMadeAtOrigin, $dateMadeAtFinish) = explode('~', request('date_made_at', "{$now}~{$now}"));
            list($dateCreatedAtOrigin, $dateCreatedAtFinish) = explode('~', request('date_created_at', "{$now}~{$now}"));
            list($dateScarpingAtOrigin, $dateScarpingAtFinish) = explode('~', request('date_scarping_at', "{$now}~{$now}"));

            $query_condition = QueryFacade::init($root_dir)
                ->setCategoriesWithFile(["种类.json"])
                ->setEntireModelsWithFile(["类型.json"])
                ->setSubModelsWithFile(["型号和子类.json"]);

            $category_unique_code = "";
            $entire_model_unique_code = "";
            $sub_model_unique_code = "";

            if ($modelUniqueCode !== "NONE") {
                $category_unique_code = substr($modelUniqueCode, 0, 3);
                $entire_model_unique_code = strlen($modelUniqueCode) > 4 ? substr($modelUniqueCode, 0, 5) : "";
                $sub_model_unique_code = strlen($modelUniqueCode) > 5 ? $modelUniqueCode : "";
            }

            $query_condition->make(
                strval($category_unique_code),
                strval($entire_model_unique_code),
                strval($sub_model_unique_code),
                strval(request("factory_name")),
                strval(request("scene_workshop_unique_code")),
                strval(request("station_name")),
                strval(request("status_unique_code"))
            );

            switch (substr($modelUniqueCode, 0, 1)) {
                case 'Q':
                    $db = DB::table('entire_instances as ei')
                        ->select([
                            'ei.identity_code',
                            'ei.serial_number',
                            'ei.category_name',
                            'ei.status',
                            'ei.scarping_at',
                            'ei.maintain_station_name',
                            'ei.maintain_location_code',
                            'ei.open_direction',
                            'ei.to_direction',
                            'ei.crossroad_number',
                            'ei.line_name',
                            'ei.said_rod',
                            'ei.scarping_at',
                            'ei.category_name',
                            'ei.model_name',
                        ])
                        ->join(DB::raw('entire_models sm'), 'sm.unique_code', '=', 'ei.entire_model_unique_code')
                        ->leftJoin(DB::raw('entire_models em'), 'em.unique_code', '=', 'sm.parent_unique_code')
                        ->where('ei.deleted_at', null)
                        ->where('ei.status', '<>', 'SCRAP')
                        ->where('ei.scarping_at', '<>', null)
                        ->where('ei.scarping_at', '<>', '')
                        ->where('ei.scarping_at', '<', $now)
                        ->where('sm.is_sub_model', true)
                        ->where('sm.name', '<>', '')
                        ->where('sm.name', '<>', null)
                        ->where('em.name', '<>', '')
                        ->where('em.name', '<>', null)
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->when(request("use_made_at") == "1", function ($q) {
                            return $q->whereBetween("ei.made_at", explode("~", request("date_made_at")));
                        })
                        ->when(request("use_created_at") == "1", function ($q) {
                            return $q->whereBetween("ei.created_at", explode("~", request("date_created_at")));
                        })
                        ->when(request("use_next_fixing_day") == "1", function ($q) {
                            return $q->whereBetween("ei.next_fixing_day", explode("~", request("date_next_fixing_day")));
                        })
                        ->orderBy('ei.scarping_at');
                    switch (strlen($modelUniqueCode)) {
                        case 7:
                            # 通过子类
                            $entireInstances = $db->where('sm.unique_code', $modelUniqueCode)->paginate();
                            break;
                        case 5:
                            # 通过类型
                            $entireInstances = $db->where('em.unique_code', $modelUniqueCode)->paginate();
                            break;
                        case 3:
                            # 通过种类
                            $entireInstances = $db->where('ei.category_unique_code', $modelUniqueCode)->paginate();
                            break;
                    }
                    break;
                case 'S':
                    $db = DB::table('entire_instances as ei')
                        ->select([
                            'ei.identity_code',
                            'ei.serial_number',
                            'ei.category_name',
                            'ei.status',
                            'ei.scarping_at',
                            'ei.maintain_station_name',
                            'ei.maintain_location_code',
                            'ei.open_direction',
                            'ei.to_direction',
                            'ei.crossroad_number',
                            'ei.line_name',
                            'ei.said_rod',
                            'ei.scarping_at',
                            'ei.model_name',
                        ])
                        ->join(DB::raw('part_instances pi'), 'pi.entire_instance_identity_code', '=', 'ei.identity_code')
                        ->join(DB::raw('part_models pm'), 'pm.unique_code', '=', 'pi.part_model_unique_code')
                        ->join(DB::raw('entire_models em'), 'pm.entire_model_unique_code', '=', 'em.unique_code')
                        ->where('ei.deleted_at', null)
                        ->where('ei.status', '<>', 'SCRAP')
                        ->where('ei.scarping_at', '<>', null)
                        ->where('ei.scarping_at', '<>', '')
                        ->where('ei.scarping_at', '<', $now)
                        ->where('em.name', '<>', '')
                        ->where('em.name', '<>', null)
                        ->where('pm.name', '<>', '')
                        ->where('pm.name', '<>', null)
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->when(request("use_made_at") == "1", function ($q) {
                            return $q->whereBetween("ei.made_at", explode("~", request("date_made_at")));
                        })
                        ->when(request("use_created_at") == "1", function ($q) {
                            return $q->whereBetween("ei.created_at", explode("~", request("date_created_at")));
                        })
                        ->when(request("use_next_fixing_day") == "1", function ($q) {
                            return $q->whereBetween("ei.next_fixing_day", explode("~", request("date_next_fixing_day")));
                        })
                        ->orderBy('ei.scarping_at');
                    switch (strlen($modelUniqueCode)) {
                        case 8:
                            # 通过型号
                            $entireInstances = $db->where('pm.unique_code', $modelUniqueCode)->paginate();
                            break;
                        case 5:
                            # 通过类型
                            $entireInstances = $db->where('em.unique_code', $modelUniqueCode)->paginate();
                            break;
                        case 3:
                            # 通过种类
                            $entireInstances = $db->where('ei.category_unique_code', $modelUniqueCode)->paginate();
                            break;
                    }
                    break;
                default:
                    $db = DB::table('entire_instances as ei')
                        ->select([
                            'ei.identity_code',
                            'ei.serial_number',
                            'ei.category_name',
                            'ei.status',
                            'ei.scarping_at',
                            'ei.maintain_station_name',
                            'ei.maintain_location_code',
                            'ei.open_direction',
                            'ei.to_direction',
                            'ei.crossroad_number',
                            'ei.line_name',
                            'ei.said_rod',
                            'ei.scarping_at',
                            'ei.category_name',
                            'ei.model_name',
                            'ei.model_unique_code',
                        ])
                        ->where('ei.deleted_at', null)
                        ->where('ei.status', '<>', 'SCRAP')
                        ->where('ei.scarping_at', '<>', null)
                        ->where('ei.scarping_at', '<>', '')
                        ->where('ei.scarping_at', '<', $now)
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($query) use ($query_condition) {
                                return $query->get("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->when(request("use_made_at") == "1", function ($q) {
                            return $q->whereBetween("ei.made_at", explode("~", request("date_made_at")));
                        })
                        ->when(request("use_created_at") == "1", function ($q) {
                            return $q->whereBetween("ei.created_at", explode("~", request("date_created_at")));
                        })
                        ->when(request("use_next_fixing_day") == "1", function ($q) {
                            return $q->whereBetween("ei.next_fixing_day", explode("~", request("date_next_fixing_day")));
                        })
                        ->orderBy('ei.scarping_at');
                    $entireInstances = $db->paginate();
                    break;
            }

            //        dd($query_condition->get());

            return view('Report.scrapedWithSub', [
                'entireInstances' => $entireInstances,
                'queryConditions' => $query_condition->toJson(),
                'statuses' => $query_condition->get("statuses"),
                'dateMadeAtOrigin' => $dateMadeAtOrigin,
                'dateMadeAtFinish' => $dateMadeAtFinish,
                'dateCreatedAtOrigin' => $dateCreatedAtOrigin,
                'dateCreatedAtFinish' => $dateCreatedAtFinish,
                'dateScarpingAtOrigin' => $dateScarpingAtOrigin,
                'dateScarpingAtFinish' => $dateScarpingAtFinish,
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 资产管理
     */
    public function property()
    {
        /**
         * 资产管理
         * @return array
         */
        $property = function () {
            $fileDir = storage_path('app/资产管理');

            if (!is_dir($fileDir)) return [[], [], [], []];

            $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
            $categories_flip = array_flip($categories);
            $withFactory = TextHelper::parseJson(file_get_contents("{$fileDir}/统计-供应商.json"));
            $categoryNames = collect($categories)->values()->toArray();
            $factoryNames = collect($withFactory)->keys()->toArray();

            $tmp = [];
            foreach ($withFactory as $factoryName => $statistics) {
                foreach ($categoryNames as $categoryName) $tmp[$factoryName][] = key_exists($categoryName, $statistics) ? $statistics[$categoryName] : 0;
            }

            return [$categories, $categories_flip, $tmp, $categoryNames, $factoryNames];
        };
        list($propertyCategories, $propertyCategoriesFlip, $propertyWithFactory, $propertyCategoryNames, $propertyFactoryNames) = $property();

        return view('Report.property', [
            'propertyCategories' => $propertyCategories,
            'propertyCategoriesFlip' => $propertyCategoriesFlip,
            'propertyWithFactory' => $propertyWithFactory,
            'propertyCategoryNames' => $propertyCategoryNames,
            'propertyFactoryNames' => $propertyFactoryNames,
            'propertyCategoriesAsJson' => TextHelper::toJson($propertyCategories),
            'propertyWithFactoryAsJson' => TextHelper::toJson($propertyWithFactory),
            'propertyCategoryNamesAsJson' => TextHelper::toJson($propertyCategoryNames),
            'propertyFactoryNamesAsJson' => TextHelper::toJson($propertyFactoryNames),
        ]);
    }

    /**
     * 根据种类获取设备列表（资产管理）
     * @param string $categoryUniqueCode
     * @return Factory|RedirectResponse|View
     */
    public function propertyCategory(string $categoryUniqueCode)
    {
        try {
            $property = function () use ($categoryUniqueCode) {
                $fileDir = storage_path('app/资产管理');

                if (!is_dir($fileDir)) return [[], [], [], []];

                $categories = TextHelper::parseJson(file_get_contents("{$fileDir}/种类.json"));
                $subModels = TextHelper::parseJson(file_get_contents("{$fileDir}/型号和子类-种类.json"))[$categories[$categoryUniqueCode]];
                $withFactory = TextHelper::parseJson(file_get_contents("{$fileDir}/统计-供应商.json"));
                $withSubModel = TextHelper::parseJson(file_get_contents("{$fileDir}/统计-供应商-型号和子类.json"))[$categories[$categoryUniqueCode]];
                $withFactoryWithCategory = TextHelper::parseJson(file_get_contents("{$fileDir}/统计-供应商-种类.json"))[$categories[$categoryUniqueCode]];

                $subModelNames = collect($withSubModel)->keys()->toArray();
                $factoryNames = collect($withFactoryWithCategory)->keys()->toArray();

                $tmp = [];
                $tmp2 = [];
                foreach ($withFactory as $factoryName => $statistics) {
                    if (in_array($factoryName, $factoryNames)) {
                        foreach ($subModelNames as $subModelName) {
                            $tmp[$factoryName][] = key_exists($subModelName, $statistics) ? $statistics[$subModelName] : 0;
                            $tmp2[$subModelName][$factoryName] = key_exists($subModelName, $statistics) ? $statistics[$subModelName] : 0;
                        }
                    }
                }

                return [$subModels, $tmp, $tmp2, $subModelNames, $factoryNames];
            };

            list($propertySubModels, $propertyWithFactory, $propertyWithSubModel, $propertySubModelNames, $propertyFactoryNames) = $property();

            return view('Report.propertyCategory', [
                'propertySubModels' => $propertySubModels,
                'propertyWithFactory' => $propertyWithFactory,
                'propertyWithSubModel' => $propertyWithSubModel,
                'propertySubModelNames' => $propertySubModelNames,
                'propertyFactoryNames' => $propertyFactoryNames,
                'propertySubModels_json' => TextHelper::toJson($propertySubModels),
                'propertyWithFactory_json' => TextHelper::toJson($propertyWithFactory),
                'propertyWithSubModel_json' => TextHelper::toJson($propertyWithSubModel),
                'propertySubModelNames_json' => TextHelper::toJson($propertySubModelNames),
                'propertyFactoryNames_json' => TextHelper::toJson($propertyFactoryNames),
            ]);
        } catch (Exception $exception) {
            return back()->with('info', '暂无数据');
        }
    }

    /**
     * 根据型号名称获取设备列表（资产管理）
     * @return Factory|RedirectResponse|View
     */
    final public function propertySubModel()
    {
        try {
            $now = Carbon::now()->format("Y-m-d");
            list($dateMadeAtOrigin, $dateMadeAtFinish) = explode("~", request("date_made_at", "{$now} 00:00:00~{$now} 23:59:59"));
            list($dateCreatedAtOrigin, $dateCreatedAtFinish) = explode("~", request("date_created_at", "{$now} 00:00:00~{$now} 23:59:59"));
            list($dateNextFixingDayOrigin, $dateNextFixingDayFinish) = explode("~", request("date_next_fixing_day", "{$now} 00:00:00~{$now} 23:59:59"));

            $root_dir = storage_path("app/资产管理");
            if (!is_dir($root_dir)) back()->with("danger", "数据不存在");

            $query_condition = QueryFacade::init($root_dir)
                ->setCategoriesWithFile(["种类.json"])
                ->setEntireModelsWithFile(["类型-种类.json"])
                ->setSubModelsWithFile(["型号和子类-类型.json"])
                ->setStatus();

            $query_condition->make(
                strval(request("category_unique_code")),
                strval(request("entire_model_unique_code")),
                strval(request("sub_model_unique_code")),
                strval(request("factory_name")),
                strval(request("scene_workshop_unique_code")),
                strval(request("station_name")),
                strval(request("status_unique_code"))
            );

            switch (substr($query_condition->get("current_category_unique_code"), 0, 1)) {
                case "Q":
                    $entireInstances = DB::table("entire_instances as ei")
                        ->select([
                            'ei.created_at',  # 创建时间
                            'ei.updated_at',  # 修改时间
                            'ei.identity_code',  # 唯一编号
                            'ei.factory_name',  # 供应商名称
                            'ei.factory_device_code',  # 出厂编号
                            'ei.serial_number',  # 出所编号
                            'ei.maintain_station_name',  # 站场名称
                            'ei.maintain_location_code',  # 安装位置
                            'ei.crossroad_number', # 道岔
                            'ei.line_name', # 线制
                            'ei.to_direction', # 去向
                            'ei.open_direction', # 开向
                            'ei.traction', # 牵引
                            'ei.said_rod', # 表示杆
                            'ei.last_installed_time',  # 最后安装时间
                            'ei.category_name',  # 种类名称
                            'ei.model_name', # 子类名称
                            'ei.status', # 状态
                            'ei.next_fixing_time',  # 下次周期修时间
                            'ei.scarping_at',  # 报废时间
                            'ei.fix_cycle_value as ei_fix_cycle_value',  # 设备周期修时长
                            'sm.fix_cycle_value as model_fix_cycle_value',  # 型号周期修时长
                            'ei.last_fix_workflow_at as fw_updated_at',  # 上次检修时间
                        ])
                        ->join(DB::raw("entire_models sm"), "sm.unique_code", "=", "ei.entire_model_unique_code")
                        ->leftJoin(DB::raw("entire_models em"), "em.unique_code", "=", "sm.parent_unique_code")
//                        ->leftJoin(DB::raw('fix_workflows fw'), function ($join) {
//                            $join->on('fw.entire_instance_identity_code', '=', 'ei.identity_code')
//                                ->orderByDesc('fw.id')
//                                ->where('fw.status', 'FIXED');
//                        })
                        ->where("ei.deleted_at", null)
                        ->where("ei.category_unique_code", $query_condition->get("current_category_unique_code"))
                        ->when($query_condition->get("current_entire_model_unique_code"), function ($q) use ($query_condition) {
                            return $q->where("em.unique_code", $query_condition->get("current_entire_model_unique_code"));
                        })
                        ->when($query_condition->get("current_sub_model_unique_code"), function ($q) use ($query_condition) {
                            return $q->where("sm.unique_code", $query_condition->get("current_sub_model_unique_code"));
                        })
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($q) use ($query_condition) {
                                return $q->where("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(request("use_made_at") == "1", function ($q) {
                            return $q->whereBetween("ei.made_at", explode("~", request("date_made_at")));
                        })
                        ->when(request("use_created_at") == "1", function ($q) {
                            return $q->whereBetween("ei.created_at", explode("~", request("date_created_at")));
                        })
                        ->when(request("use_next_fixing_day") == "1", function ($q) {
                            return $q->whereBetween("ei.next_fixing_day", explode("~", request("date_next_fixing_day")));
                        })
                        ->orderByDesc("ei.id")
                        ->paginate();
                    break;
                case "S":
                    $entireInstances = DB::table("entire_instances as ei")
                        ->select([
                            'ei.created_at',  # 创建时间
                            'ei.updated_at',  # 修改时间
                            'ei.identity_code',  # 唯一编号
                            'ei.factory_name',  # 供应商名称
                            'ei.factory_device_code',  # 出厂编号
                            'ei.serial_number',  # 出所编号
                            'ei.maintain_station_name',  # 站场名称
                            'ei.maintain_location_code',  # 安装位置
                            'ei.crossroad_number', # 道岔
                            'ei.line_name', # 线制
                            'ei.to_direction', # 去向
                            'ei.open_direction', # 开向
                            'ei.traction', # 牵引
                            'ei.said_rod', # 表示杆
                            'ei.last_installed_time',  # 最后安装时间
                            'ei.category_name',  # 种类名称
                            'ei.model_name',  # 型号名称
                            'ei.status', # 状态
                            'ei.next_fixing_time',  # 下次周期修时间
                            'ei.scarping_at',  # 报废时间
                            'ei.fix_cycle_value as ei_fix_cycle_value',  # 设备周期修时长
                            'pm.fix_cycle_value as model_fix_cycle_value',  # 型号周期修时长
                            'ei.last_fix_workflow_at as fw_updated_at',  # 上次检修时间
                        ])
                        ->leftJoin(DB::raw("part_instances pi"), "pi.entire_instance_identity_code", "=", "ei.identity_code")
                        ->join(DB::raw("part_models pm"), "pm.unique_code", "=", "pi.part_model_unique_code")
                        ->join(DB::raw("entire_models em"), "em.unique_code", "=", "pm.entire_model_unique_code")
                        ->leftJoin(DB::raw('fix_workflows fw'), 'fw.entire_instance_identity_code', '=', 'ei.identity_code')
                        ->leftJoin(DB::raw('fix_workflow_processes fwp'), 'fwp.fix_workflow_serial_number', '=', 'fw.serial_number')
//                        ->leftJoin(DB::raw('fix_workflows fw'), function ($join) {
//                            $join->on('fw.entire_instance_identity_code', '=', 'ei.identity_code')
//                                ->orderByDesc('fw.id')
//                                ->where('fw.status', 'FIXED');
//                        })
                        ->where("ei.category_unique_code", $query_condition->get("current_category_unique_code"))
                        ->when($query_condition->get("current_entire_model_unique_code"), function ($q) use ($query_condition) {
                            return $q->where("em.unique_code", $query_condition->get("current_entire_model_unique_code"));
                        })
                        ->when($query_condition->get("current_sub_model_unique_code"), function ($q) use ($query_condition) {
                            return $q->where("pm.unique_code", $query_condition->get("current_sub_model_unique_code"));
                        })
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($q) use ($query_condition) {
                                return $q->where("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(request("use_made_at") == "1", function ($q) {
                            return $q->whereBetween("ei.made_at", explode("~", request("date_made_at")));
                        })
                        ->when(request("use_created_at") == "1", function ($q) {
                            return $q->whereBetween("ei.created_at", explode("~", request("date_created_at")));
                        })
                        ->when(request("use_next_fixing_day") == "1", function ($q) {
                            return $q->whereBetween("ei.next_fixing_day", explode("~", request("date_next_fixing_day")));
                        })
                        ->paginate();
                    break;
                default:
                    $entireInstances = DB::table("entire_instances as ei")
                        ->select([
                            'ei.created_at',  # 创建时间
                            'ei.updated_at',  # 修改时间
                            'ei.identity_code',  # 唯一编号
                            'ei.factory_name',  # 供应商名称
                            'ei.factory_device_code',  # 出厂编号
                            'ei.serial_number',  # 出所编号
                            'ei.maintain_station_name',  # 站场名称
                            'ei.maintain_location_code',  # 安装位置
                            'ei.crossroad_number', # 道岔
                            'ei.line_name', # 线制
                            'ei.to_direction', # 去向
                            'ei.open_direction', # 开向
                            'ei.traction', # 牵引
                            'ei.said_rod', # 表示杆
                            'ei.last_installed_time',  # 最后安装时间
                            'ei.category_name',  # 种类名称
                            'ei.model_name',  # 型号名称
                            'ei.status', # 状态
                            'ei.next_fixing_time',  # 下次周期修时间
                            'ei.scarping_at',  # 报废时间
                            'ei.fix_cycle_value as ei_fix_cycle_value',  # 设备周期修时长
                            'sm.fix_cycle_value as model_fix_cycle_value',  # 型号周期修时长
                            'ei.last_fix_workflow_at as fw_updated_at',  # 上次检修时间
                        ])
                        ->where("ei.deleted_at", null)
                        ->join(DB::raw('entire_models em'), 'em.unique_code', '=', 'ei.entire_model_unique_code')
//                        ->leftJoin(DB::raw('fix_workflows fw'), function ($join) {
//                            $join->on('fw.entire_instance_identity_code', '=', 'ei.identity_code')
//                                ->orderByDesc('fw.id')
//                                ->where('fw.status', 'FIXED');
//                        })
                        ->when(
                            $query_condition->get("current_factory_name"),
                            function ($query) use ($query_condition) {
                                return $query->where("ei.factory_name", $query_condition->get("current_factory_name"));
                            }
                        )
                        ->when(
                            $query_condition->get("maintain_type"),
                            function ($query) use ($query_condition) {
                                if ($query_condition->get("maintain_type") == "current_station_name") {
                                    return $query->where("ei.maintain_station_name", $query_condition->get("current_station_name"));
                                } elseif ($query_condition->get("maintain_type") == "current_station_names") {
                                    return $query->whereIn("ei.maintain_station_name", $query_condition->get("current_station_names"));
                                } else {
                                    return $query;
                                }
                            }
                        )
                        ->when(
                            $query_condition->get("current_status_unique_code"),
                            function ($q) use ($query_condition) {
                                return $q->where("ei.status", $query_condition->get("current_status_unique_code"));
                            }
                        )
                        ->when(request("use_made_at") == "1", function ($q) {
                            return $q->whereBetween("ei.made_at", explode("~", request("date_made_at")));
                        })
                        ->when(request("use_created_at") == "1", function ($q) {
                            return $q->whereBetween("ei.created_at", explode("~", request("date_created_at")));
                        })
                        ->when(request("use_next_fixing_day") == "1", function ($q) {
                            return $q->whereBetween("ei.next_fixing_day", explode("~", request("date_next_fixing_day")));
                        })
                        ->paginate();
                    break;
            }

            return view("Report.propertySubModel", [
                "queryConditions" => $query_condition->toJson(),
                "currentCategoryUniqueCode" => $query_condition->get("current_category_unique_code"),
                "statuses" => $query_condition->get("statuses"),
                "entireInstances" => $entireInstances,
                "dateMadeAtOrigin" => $dateMadeAtOrigin,
                "dateMadeAtFinish" => $dateMadeAtFinish,
                "dateCreatedAtOrigin" => $dateCreatedAtOrigin,
                "dateCreatedAtFinish" => $dateCreatedAtFinish,
                "dateNextFixingDayOrigin" => $dateNextFixingDayOrigin,
                "dateNextFixingDayFinish" => $dateNextFixingDayFinish,
            ]);
        } catch (Exception $e) {
            \App\Facades\CommonFacade::ddExceptionWithAppDebug($e);
            return back()->with('info', '暂无数据');
        }
    }
}
